<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Linux开发环境及应用期末复习</title>
      <link href="/2023/12/19/linux-qi-mo-fu-xi/"/>
      <url>/2023/12/19/linux-qi-mo-fu-xi/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Linux概述"><a href="#Linux概述" class="headerlink" title="Linux概述"></a>Linux概述</h1><h2 id="计算机系统的组成"><a href="#计算机系统的组成" class="headerlink" title="计算机系统的组成"></a>计算机系统的组成</h2><p><img src="/2023/12/19/linux-qi-mo-fu-xi/constructureOfComputer.png"></p><h2 id="操作系统的发展"><a href="#操作系统的发展" class="headerlink" title="操作系统的发展"></a>操作系统的发展</h2><ul><li>手工操作</li><li>单道批处理操作系统</li><li>多道批处理系统</li><li>分时系统</li></ul><h2 id="多道程序需要的硬件支持"><a href="#多道程序需要的硬件支持" class="headerlink" title="多道程序需要的硬件支持"></a>多道程序需要的硬件支持</h2><h3 id="中断"><a href="#中断" class="headerlink" title="中断"></a>中断</h3><ul><li>CPU收到外部信号后，停止原来工作，转去处理该事件，完毕后回到原来断点继续工作</li></ul><h3 id="通道：专用的I-O处理器"><a href="#通道：专用的I-O处理器" class="headerlink" title="通道：专用的I/O处理器"></a>通道：专用的I/O处理器</h3><ul><li>控制I/O设备与内存间的数据传输，启动后独立于CPU运行，实现CPU与I/O的并行<ul><li>DMA直接内存存取</li><li>CPM通信处理器</li></ul></li></ul><h3 id="存储器管理单元"><a href="#存储器管理单元" class="headerlink" title="存储器管理单元"></a>存储器管理单元</h3><ul><li>多道程序的加载<ul><li>程序采用虚拟地址，以保证多道同时运行的程序可以在内存中的重定位（虚实地址转换）</li></ul></li><li>内存保护<ul><li>避免同时运行在内存中的程序互相影响（越界/越权）</li><li>CPU设置核心态/用户态<ul><li>应用程序工作在用户态，仅允许访问程序自己的内存，越界则产生中断</li><li>操作系统内核工作在核心态，可随意访问所有内存</li></ul></li></ul></li></ul><h2 id="系统调用和系统命令"><a href="#系统调用和系统命令" class="headerlink" title="系统调用和系统命令"></a>系统调用和系统命令</h2><h3 id="系统调用"><a href="#系统调用" class="headerlink" title="系统调用"></a>系统调用</h3><ul><li>内核的编程接口：应用程序调用操作系统提供的功能</li><li>用户态程序无法直接使用核心态程序，一般系统调用采用软件中断（trap）方式，CPU进入核心态执行</li><li>可以认为操作系统就是所有中断服务程序的集合，包括硬件中断和软件中断</li></ul><h3 id="系统调用和普通函数调用的区别"><a href="#系统调用和普通函数调用的区别" class="headerlink" title="系统调用和普通函数调用的区别"></a>系统调用和普通函数调用的区别</h3><ul><li>在UNIX系统中，都以C语言函数方式给出</li><li>实现普通函数调用的代码在CPU用户态下运行，包含在可执行程序内，使用CALL指令，利用堆栈实现，函数调用结束后返回调用处的下一条语句（库函数与自定义函数）</li><li>实现系统调用功能的代码在内核中，用户程序通过使用INT指令产生软中断进入内核执行，使用进程的核心态堆栈，执行完毕后中断返回</li></ul><h3 id="系统命令"><a href="#系统命令" class="headerlink" title="系统命令"></a>系统命令</h3><ul><li>操作系统自带的命令也是利用系统调用设计的应用程序，与普通的应用程序具有相同地位</li></ul><h2 id="应用软件和设备驱动程序开发"><a href="#应用软件和设备驱动程序开发" class="headerlink" title="应用软件和设备驱动程序开发"></a>应用软件和设备驱动程序开发</h2><h3 id="应用软件开发"><a href="#应用软件开发" class="headerlink" title="应用软件开发"></a>应用软件开发</h3><ul><li>直接使用系统调用（如：Unix）</li><li>将系统调用封装为函数库API（如Win32）</li><li>使用框架，如MFC</li><li>应用软件运行时CPU处于用户态</li></ul><h3 id="设备驱动程序开发DDK"><a href="#设备驱动程序开发DDK" class="headerlink" title="设备驱动程序开发DDK"></a>设备驱动程序开发DDK</h3><ul><li>操作系统中对设备分类，例如:网卡，磁盘，显示器，打印机，声卡，音频输入，视频输入</li><li>每类设备设计一种抽象的接口，包括多个函数</li><li>设备驱动程序操纵硬件，处理中断，提供这类设备接口规定的一组函数。函数的调用时机由操作系统决定</li><li>设备驱动程序工作在CPU特权级，驱动程序的BUG可能会导致整个系统崩溃</li><li>一般设备驱动程序通过动态链接的方式链接入内核</li></ul><h2 id="字符终端"><a href="#字符终端" class="headerlink" title="字符终端"></a>字符终端</h2><h3 id="UNIX-Linux是多用户系统"><a href="#UNIX-Linux是多用户系统" class="headerlink" title="UNIX/Linux是多用户系统"></a>UNIX/Linux是多用户系统</h3><ul><li>主机连接多台字符终端</li><li>字符终端作为交互式输入输出设备</li></ul><h3 id="终端的构成"><a href="#终端的构成" class="headerlink" title="终端的构成"></a>终端的构成</h3><ul><li>键盘</li><li>显示器</li><li>RS232串行通信接口</li></ul><h3 id="字符终端的历史"><a href="#字符终端的历史" class="headerlink" title="字符终端的历史"></a>字符终端的历史</h3><ul><li>英文打字机 typewriter</li><li>电传打字机 teletypewriter，简写tty</li><li>字符终端，仍称做tty设备</li></ul><h2 id="主机与终端的链接"><a href="#主机与终端的链接" class="headerlink" title="主机与终端的链接"></a>主机与终端的链接</h2><ul><li>主机中的串口卡（硬件）引出多个RS232串口</li><li>每个RS232接口通过电缆（3芯或更多芯）连接一台终端</li><li>RS232电缆的长度限制<ul><li>早期要求小于10米</li><li>现在可达百米</li></ul></li></ul><h2 id="行律与驱动程序"><a href="#行律与驱动程序" class="headerlink" title="行律与驱动程序"></a>行律与驱动程序</h2><h3 id="驱动程序"><a href="#驱动程序" class="headerlink" title="驱动程序"></a>驱动程序</h3><ul><li>不同的硬件需要不同的驱动程序</li><li>与行律模块的接口：上行和下行字符流</li></ul><h3 id="行律的作用"><a href="#行律的作用" class="headerlink" title="行律的作用"></a>行律的作用</h3><ul><li>一行内字符的缓冲、回显与编辑，直到按下回车键</li><li>数据加工，如：将\n（换行）转化为\r\n（回车换行）</li><li>将Ctrl-C字符转化为中止进程的信号</li></ul><h2 id="终端转义序列"><a href="#终端转义序列" class="headerlink" title="终端转义序列"></a>终端转义序列</h2><h3 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h3><ul><li>Esc：ASCII码1B（十进制27，八进制033）</li></ul><h3 id="主机发往终端方向数据中的转义序列的功能"><a href="#主机发往终端方向数据中的转义序列的功能" class="headerlink" title="主机发往终端方向数据中的转义序列的功能"></a>主机发往终端方向数据中的转义序列的功能</h3><ul><li>控制光标位置、字符颜色、字符大小等等</li><li>选择终端的字符集</li><li>控制终端上的打印机、刷卡机、磁条器、密码键盘</li></ul><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><ul><li>Esc[2J  由主机发送到终端的四字节序列：1B 5B 32 4A 功能：清除屏幕</li><li>Esc[8A  四字节序列，光标上移8行</li><li>Esc[16;8H  七字节序列，光标移到16行8列</li><li>Esc[1;31m  七字节序列，红色字符；程序中用字符串格式”\033[1;31m”</li></ul><h2 id="主机和终端之间的流量控制"><a href="#主机和终端之间的流量控制" class="headerlink" title="主机和终端之间的流量控制"></a>主机和终端之间的流量控制</h2><h3 id="必要性"><a href="#必要性" class="headerlink" title="必要性"></a>必要性</h3><ul><li>终端的显示速度跟不上主机的发送速度</li><li>主机送来数据终端需要打印出来，但打印速度慢</li><li>主机送来的显示内容，需暂停显示，仔细分析</li><li>需要一种机制控制主机方向来的数据流量</li></ul><h3 id="两种流控方式"><a href="#两种流控方式" class="headerlink" title="两种流控方式"></a>两种流控方式</h3><ul><li>硬件方式：RS232接口的CTS信号线</li><li>软件方式：利用流控字符Xon（要求主机继续发送，Ctrl-Q）和Xoff（要求主机暂停发送数据，Ctrl-S）</li></ul><h2 id="仿真终端和虚拟终端"><a href="#仿真终端和虚拟终端" class="headerlink" title="仿真终端和虚拟终端"></a>仿真终端和虚拟终端</h2><h3 id="仿真终端"><a href="#仿真终端" class="headerlink" title="仿真终端"></a>仿真终端</h3><ul><li>PC机串口，运行终端仿真软件来仿真终端。<br>例如：DOS操作系统下的CrossTalk，Windows中的”超级终端“</li></ul><h3 id="虚拟终端"><a href="#虚拟终端" class="headerlink" title="虚拟终端"></a>虚拟终端</h3><ul><li>UNIX主机与PC机通过网络相连，客户端运行telnet，服务器端运行telnetd，称为UNIX的一个基于TCP通信的虚拟终端</li><li>安全终端：在TCP连接上加密和压缩数据，如：Windows客户端软件SecureCRT</li></ul><p><img src="/2023/12/19/linux-qi-mo-fu-xi/virtualTeiminal.png"></p><h1 id="系统状态查看工具"><a href="#系统状态查看工具" class="headerlink" title="系统状态查看工具"></a>系统状态查看工具</h1><h2 id="用户登录和联机手册的查阅"><a href="#用户登录和联机手册的查阅" class="headerlink" title="用户登录和联机手册的查阅"></a>用户登录和联机手册的查阅</h2><h3 id="useradd"><a href="#useradd" class="headerlink" title="useradd"></a>useradd</h3><blockquote><p>useradd tt</p></blockquote><p>root用户（超级用户）不受权限的制约，可随意修改和删除文件，使用useradd命令创建新用户，用户信息存放在/etc/passwd文件中，包括<strong>用户名</strong>和<strong>用户ID</strong>，以及<strong>Home目录</strong>，<strong>登录shell</strong>（一般为bash，也可以选其他shell，其他系统程序，甚至自设计的程序）</p><h3 id="man"><a href="#man" class="headerlink" title="man"></a>man</h3><blockquote><p>man name</p></blockquote><p>man命令取自manual（说明手册）的前三个字母，用于查阅联机手册<br>手册页的内容：</p><ul><li>列出基本功能和语法</li><li>对于C语言的函数调用，列出头文件和链接函数库</li><li>功能说明</li><li>SEE ALSO：有关的其他项目的名字和章节号</li></ul><blockquote><p>man section name  # 在某章中查询相关条目</p></blockquote><p>常用章节编号：1命令  2系统调用  3库函数  5配置文件</p><blockquote><p>man -k regexp  # 列出关键字与正则表达式regexp匹配的条目</p></blockquote><h2 id="时间、计算器和口令维护"><a href="#时间、计算器和口令维护" class="headerlink" title="时间、计算器和口令维护"></a>时间、计算器和口令维护</h2><h3 id="date"><a href="#date" class="headerlink" title="date"></a>date</h3><blockquote><p>date<br>Wed Nov 7 21:09:16 CST 2018&gt;</p></blockquote><p>date用于读取系统日期和时间</p><blockquote><p>date “+%Y-%m-%d %H:%M:%S Day %j”<br>2018-11-07 21:09:54 Day 311</p></blockquote><ul><li>311指的是今年第311天</li><li>格式控制字符串：第一个字符必须为+号，%m代表月，%M代表分钟</li><li>%s秒坐标（从UTC1970开始），常用于计算时间间隔</li></ul><blockquote><p>ntpdate 0.pool.ntp.org  # 通过NTP协议校对系统时间，必须root用户<br>ntpdate -q 0.pool.ntp.org # 查询时间，普通用户也可以</p></blockquote><h3 id="cal"><a href="#cal" class="headerlink" title="cal"></a>cal</h3><blockquote><p>cal  # 打印当前月份的日历<br>cal year  # 打印指定年的日历<br>cal month year  # 打印指定年月的日历<br>cal 12  # 打印公元12年的日历</p></blockquote><h3 id="bc"><a href="#bc" class="headerlink" title="bc"></a>bc</h3><blockquote><p>bc  # 缺省精度为小数点后0位<br>bc -l  # 缺省精度为小数点后20位</p></blockquote><p>可以通过scale自行决定精度（小数点位数）</p><blockquote><p>scale=10000</p></blockquote><h3 id="passwd"><a href="#passwd" class="headerlink" title="passwd"></a>passwd</h3><blockquote><p>passwd  # 更改自己的口令<br>passwd liu  # root用户强迫更改liu的口令</p></blockquote><p>普通用户</p><ul><li>使用passwd命令更改自己的口令，更改前要先验证原来的口令<br>超级用户root</li><li>修改口令之前不验证旧的口令</li><li>可修改自己的口令，无法读取其他用户的口令，但可以强迫设置其他用户口令（passed liu）</li></ul><p><img src="/2023/12/19/linux-qi-mo-fu-xi/passwd.png" alt="|319"></p><h2 id="了解系统状态"><a href="#了解系统状态" class="headerlink" title="了解系统状态"></a>了解系统状态</h2><h3 id="who"><a href="#who" class="headerlink" title="who"></a>who</h3><blockquote><p>who  # 显示当前登录系统的用户<br>root   tty7     2014-05-13 12:12 (:0)<br>root   pts/0    2014-05-14 17:09 (:0.0)<br>root   pts/1    2014-05-14 18:51 (192.168.1.17)<br>root   pts/2    2014-05-14 19:48 (192.168.1.17)</p></blockquote><ul><li>第一列：用户名，第二列：终端设备的设备文件名</li><li>设备在文件系统中有一个文件名（同普通磁盘文件不同的是文件类型属于特殊文件），设备文件一般放于目录/dev下</li></ul><blockquote><p>tty  # 打印出当前终端的设备文件名<br>who am i  # 登录shell时的用户名<br>whoami  # 当前系统的有效用户</p></blockquote><h3 id="uptime"><a href="#uptime" class="headerlink" title="uptime"></a>uptime</h3><blockquote><p>uptime<br>05:52:21 up 412 days, 4:15, 5 users, load average: 0.55, 0.73, 0.43  </p></blockquote><ol><li>系统自启动后到现在的运行时间</li><li>当前登录系统的用户数</li><li>近期1分钟，5分钟，15分钟内系统CPU的负载</li></ol><h3 id="top"><a href="#top" class="headerlink" title="top"></a>top</h3><blockquote><p>top  # 列出资源占用排名靠前的进程</p></blockquote><p><img src="/2023/12/19/linux-qi-mo-fu-xi/top.png"></p><ul><li>VIRT：进程逻辑地址空间大小</li><li>RES：占用物理内存数</li><li>SHR：与其他进程共享的内存数</li><li>%CPU：占用CPU百分比</li><li>%MEM：占用内存百分比</li><li>TIME+：占用的CPU时间</li></ul><h3 id="ps（process-status）"><a href="#ps（process-status）" class="headerlink" title="ps（process status）"></a>ps（process status）</h3><blockquote><p>ps  # 只列出在当前终端上启动的进程<br>ps -e  # 列出系统所有的进程<br>ps -f  # 以full格式列出每一个进程<br>ps -l  # 以long格式列出每一个进程</p></blockquote><ul><li>UID：用户ID</li><li>PID：进程ID</li><li>PPID：父进程的PID</li><li>C：CPU占用指数</li><li>STIME：启动时间</li><li>SZ：进程逻辑内存大小(持续增加：内存泄漏)</li><li>TTY：终端的名字</li><li>COMMAND：命令名</li><li>WCHAN：进程在内核的何处睡眠（wait channel）</li><li>TIME：累计执行时间</li><li>PRI：优先级</li><li>S：状态，S（sleep），R（run），Z（zombie）</li></ul><h3 id="free"><a href="#free" class="headerlink" title="free"></a>free</h3><blockquote><p>free  # 了解内存使用情况<br>        total used free shared buffers cached<br>Mem: 254772 184568 70204 0 5692 89892<br>Swap: 524280 65116 459164</p></blockquote><h3 id="vmstat"><a href="#vmstat" class="headerlink" title="vmstat"></a>vmstat</h3><blockquote><p>vmstat  # 了解系统负载<br>vmstat 2 1  # 每2秒采集一次服务器状态，只采集1次</p></blockquote><p><img src="/2023/12/19/linux-qi-mo-fu-xi/vmstat.png"></p><h3 id="telnet-ssh"><a href="#telnet-ssh" class="headerlink" title="telnet/ssh"></a>telnet/ssh</h3><blockquote><p>telnet 202.172.122.135<br>telnet cdc.xynet.edu.cn</p></blockquote><p>这两个指令用于远程登录，使用telnet/ssh时对方必须实现开启了TELNET/SSH服务，两者的区别主要在于安全性，SSH提供了加密和更强大的身份验证选项。</p><h3 id="ftp"><a href="#ftp" class="headerlink" title="ftp"></a>ftp</h3><blockquote><p>ftp 202.172.122.135<br>ftp cdc.xynet.edu.cn</p></blockquote><p>用于文件传送，对方必须实现开启了FTP服务。<br>ftp常用命令：dir、get、put、cd、lcd（local cd）、mkdir、rmdir、delete、rename、ascii（设置ASCII码方式传送文件）、binary（设置二进制方式传送文件）、bye（退出ftp）</p><p><strong>Window和Unix文本文件结构的不同</strong></p><ul><li>文本文件行的行尾不同<ul><li>UNIX：行尾处仅存换行字符</li><li>Windows：行尾处存回车和换行两个字符</li></ul></li><li>例：文件mini.txt中，第一行为ab，第二行为xyz<ul><li>UNIX：文件大小为7字节，61 62 0a 78 79 7a 0a</li><li>Windows：文件大小为9字节，61 62 0d 78 79 7a 0d 0a</li></ul></li></ul><p><strong>VNC（Virtual Network Computing）</strong><br>VNC是一种远程桌面协议，允许用户远程访问和控制另一台计算机的桌面。它使用户能够在远程计算机上看到和操作图形用户界面（GUI），就像他们坐在该计算机前一样。</p><p><strong>Samba</strong><br>Samba是一个开源的软件套件，用于实现Windows网络协议（如SMB/CIFS）在Linux和其他UNIX系统上的兼容性，以实现文件和打印共享。</p><h1 id="文本文件处理"><a href="#文本文件处理" class="headerlink" title="文本文件处理"></a>文本文件处理</h1><h2 id="读取文件内容"><a href="#读取文件内容" class="headerlink" title="读取文件内容"></a>读取文件内容</h2><h3 id="more-less"><a href="#more-less" class="headerlink" title="more/less"></a>more/less</h3><blockquote><p>more shudu.c  # 指定一个文件<br>more *.[ch]  # 指定多个文件<br>ls -l | more  # 指定0个文件(效果同ls -l)<br>less shudu.c</p></blockquote><p>more命令：空格（翻页）、回车（上滚一行）、q（quit）、/pattern（搜索指定模式字符串）、h（help）、Ctrl-L（屏幕刷新）<br>less命令：回退浏览的功能更强，可直接使键盘的上下箭头键，或者j,k，类似vi的光标定位键，以及PgUp，PgDn，Home，End键</p><h3 id="cat-od"><a href="#cat-od" class="headerlink" title="cat/od"></a>cat/od</h3><blockquote><p>cat tryl.c<br>cat -n shudu.c  # 显示行号<br>cat &gt;try  # 从stdin输入到文件try，直到ctrl-d<br>cat tryl.c try2.c try.h &gt; trysrc</p><p>od -t x1 x.dat  # 以十六进制打印文件x.dat各字节</p></blockquote><h3 id="head-tail"><a href="#head-tail" class="headerlink" title="head/tail"></a>head/tail</h3><blockquote><p>head  ab.c  # 显示文件的头部，默认前10行<br>head -n 15 ab.c  # 显示文件ab.c前15行<br>head -n -20 msg.c  # 除去文件尾部20行其余均算头部</p></blockquote><blockquote><p>tail -n 40 liu.mail  # 显示文件尾部20行<br>tail –n +20 msg.c  # 除去文件头部20行其余均算尾部<br>tail -f debug.txt  # 实时打印文件尾部被追加的内容（选项-f:forever）</p></blockquote><h2 id="文本数据的处理"><a href="#文本数据的处理" class="headerlink" title="文本数据的处理"></a>文本数据的处理</h2><h3 id="tee：三通"><a href="#tee：三通" class="headerlink" title="tee：三通"></a>tee：三通</h3><blockquote><p>./myap | tee myap.log  # 将从标准输入stdin得到的数据抄送到标准输出stdout显示，同时存入磁盘文件中</p></blockquote><h3 id="wc（word-count）"><a href="#wc（word-count）" class="headerlink" title="wc（word count）"></a>wc（word count）</h3><blockquote><p>wc sum.c  # 列出文件一共有多少行，有多少个单词，多少字符<br>wc x.c makefile stat.sh  # 除单个文件的行、单词、字符外，最后列出一个合计<br>wc -l *.c makefile start.sh  # -l：只列出行数</p></blockquote><h3 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h3><blockquote><p>sort telno &gt; telno1  # 对文件内容排序<br>ls -s | sort -n | tail -10  # -n：对于与数字按照算术值而不是字符串进行比较 ls -s：以文件大小排序</p></blockquote><h3 id="tr：翻译字符"><a href="#tr：翻译字符" class="headerlink" title="tr：翻译字符"></a>tr：翻译字符</h3><blockquote><p>cat report | tr ‘[a-z]’ ‘[A-Z]’  # 将小写字母改为大写字母</p></blockquote><h3 id="uniq"><a href="#uniq" class="headerlink" title="uniq"></a>uniq</h3><blockquote><p>unique options input-file output-file  # 筛选文件中的重复行</p></blockquote><p>重复的行：紧邻的两行内容相同<br>选项：</p><ul><li>-u（unique）只保留没有重复的行</li><li>-d（duplicated）只保留有重复的行（但只打印一次）</li><li>没有以上两个选项，打印没有重复的行和有重复的行（但只打印一次）</li><li>-c（count）计数同样的行出现几次</li></ul><h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><h2 id="单字符正则表达式"><a href="#单字符正则表达式" class="headerlink" title="单字符正则表达式"></a>单字符正则表达式</h2><ul><li>非特殊字符与其自身匹配</li><li>转义字符（\）. * $ ^ [ \</li><li>圆点（.）匹配任意单字符</li></ul><p><strong>定义集合</strong></p><ul><li>基本用法<ul><li>单字符正则表达式[abcd]与a,b,c或d匹配</li><li>圆点、星号和反斜线在方括号内时，代表它们自己</li></ul></li><li><strong>用减号-定义一个区间</strong><ul><li>如[a-d] [A-Z] [a-zA-Z0-9]</li><li>-在最后则仅表示自身，如[ab-]只与3个字符匹配</li></ul></li><li><strong>用^表示补集</strong><ul><li>^在开头，表示与集合内字符之外的任意字符匹配<ul><li>如：[^a-z]匹配任一非小写字母</li></ul></li><li>^不在开头则仅表示自身，如[a-z^]能匹配27个单字符</li></ul></li></ul><p><strong>星号（*）</strong></p><ul><li>单字符表达式后跟*，匹配此单字符正则表达式的<strong>0次</strong>或<strong>任意多次</strong>出现</li></ul><p><strong>锚点（$与^）</strong></p><ul><li>$在尾部时有特殊意义，否则与其自身匹配<ul><li>例：123$匹配文件中行尾的123，.$匹配行尾的任意字符</li></ul></li><li>^在首部时有特殊意义，否则与其自身匹配<ul><li>例：^printf匹配行首的printf字符串，不在行首的printf串不匹配</li><li>例：在vi中使用：10,50s/^    //g：删除10-50行的每行行首的4个空格</li></ul></li></ul><h2 id="正则表达式扩展"><a href="#正则表达式扩展" class="headerlink" title="正则表达式扩展"></a>正则表达式扩展</h2><p>扩展的正则表达式（ERE）对基本正则表达式（BRE）进行了改进： </p><ul><li>表示<strong>分组</strong>：圆括号（）</li><li>表示<strong>逻辑或</strong>的符号 |</li><li><strong>重复次数</strong>定义<ul><li>*表示左边的单字符正则表达式的0次或多次重复</li><li>+号表示1次或多次</li><li>？表示0次或一次</li><li>限定重复次数{m,n}，例如：[1-9][0-9]{6,8}   表示7-9位数字，首位非0</li></ul></li></ul><h2 id="筛选编辑指令"><a href="#筛选编辑指令" class="headerlink" title="筛选编辑指令"></a>筛选编辑指令</h2><h3 id="grep-fgrep-egrep"><a href="#grep-fgrep-egrep" class="headerlink" title="grep/fgrep/egrep"></a>grep/fgrep/egrep</h3><blockquote><p>grep 选项 模式 文件名列表  # 在文件中查找字符串<br>选项：<br>    -i：忽略大小写<br>    -v：反向查找，只打印不匹配的行<br>    -n：显示匹配行的行号<br>    -r：递归查找子目录中的文件<br>    -l：只打印匹配的文件名<br>    -c：只打印匹配的行数<br>    -F：按照字符串检索<br>    -G：BRE<br>    -E：ERE</p><p>grep ‘[0-9]*‘ shudu.c</p></blockquote><ul><li>egerp：使用扩展正则表达式描述模式</li><li>fgrep：快速搜索指定字符串（按字符串搜索而不是按模式搜索）<br><img src="/2023/12/19/linux-qi-mo-fu-xi/grep.png" alt="|400"></li></ul><h3 id="sed-Stream-Editor"><a href="#sed-Stream-Editor" class="headerlink" title="sed(Stream Editor)"></a>sed(Stream Editor)</h3><blockquote><p>基本用法：sed 选项 ‘脚本’ 文件名<br>选项：-e：执行脚本  -i：直接修改文件  -n：静默模式，只输出脚本处理后的结果</p><p>sed ‘s/要替换的内容/替换后的内容/‘ 文件名  # 替换文本<br>sed ‘/要删除的内容/d’  # 删除行<br>sed -n ‘行号p’  # 打印行<br>sed -e ‘s/旧内容/新内容/g’ -e ‘s/另一个旧内容/另一个新内容/g’ 文件名  # 多个操作组合</p></blockquote><p>在模式描述中，可以用括号 <code>\(</code> 和 <code>\)</code> 创建匹配组（capture groups），将匹配的文本片段捕获到一个临时缓冲区中，以便后续在替换操作或脚本中引用这些捕获组的内容。<br>将日期格式“月-日-年”改为“年.月.日”<br>比如：将&nbsp; 04-26-1997替换为1997.04.26使用命令:<br>s/<strong>\([0-9][0-9]\)</strong>-<strong>\([0-9][0-9]\)</strong>-<strong>\([0-9][0-9]*\</strong>)/\3.\1.\2/g<br>注意要先将三个/找到并进行划分</p><h3 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h3><blockquote><p>基本用法：awk ‘模式{操作}’ 文件名<br>awk -f 脚本文件 文件名</p><p>awk ‘模式’ 文件名  # 没有指定操作，会打印匹配模式的行<br>awk ‘{print}’ 文件名  # 打印文件的每一行<br>awk -F ‘,’ ‘{print $1,$2}’ 文件名  # -F指定不同的字段分隔符（默认为空格）<br>awk ‘{sum += $1} END {print sum}’ 文件名  # 计算文件中所有数字的总和（这里假设仅每行第一个字段为数字）<br>awk ‘{ if ($1 &gt; 10) print $1 }’ 文件名  # 只打印大于10的数字</p></blockquote><h1 id="文件管理和目录关系"><a href="#文件管理和目录关系" class="headerlink" title="文件管理和目录关系"></a>文件管理和目录关系</h1><h2 id="文件系统管理"><a href="#文件系统管理" class="headerlink" title="文件系统管理"></a>文件系统管理</h2><h3 id="文件命名规则"><a href="#文件命名规则" class="headerlink" title="文件命名规则"></a>文件命名规则</h3><ul><li>一般允许1-255字符</li><li>除斜线外的所有字符都是命名的合法字符（斜线用作路径名分隔符）</li><li>大小写有区别</li></ul><h3 id="UNIX常见目录和文件"><a href="#UNIX常见目录和文件" class="headerlink" title="UNIX常见目录和文件"></a>UNIX常见目录和文件</h3><p><img src="/2023/12/19/linux-qi-mo-fu-xi/UNIXFile.png" alt="|600"></p><h3 id="文件通配符规则"><a href="#文件通配符规则" class="headerlink" title="文件通配符规则"></a>文件通配符规则</h3><ul><li>*<ul><li>匹配任意长度的文件名字符串</li><li>当点字符（.）作为文件名的第一个字符时，必须显式匹配。例：*file不匹配.profile</li></ul></li><li>?<ul><li>匹配任意单字符</li></ul></li><li>[]<ul><li>匹配括号内任意字符，也可以用-指定范围</li></ul></li><li>~（Bash特有）<ul><li>~：当前用户主目录</li><li>~kuan：kuan用户的主目录<br>注意：</li></ul></li><li>文件名通配符规则与正则表达式的规则不同，应用场合不同</li><li>Windows中*.* 匹配所有文件，Linux中*.*要求文件名中必须含有圆点，否则不匹配，如：*.*与makefile不匹配</li></ul><h3 id="文件通配符处理过程"><a href="#文件通配符处理过程" class="headerlink" title="文件通配符处理过程"></a>文件通配符处理过程</h3><p><strong>shell和kernel</strong><br><img src="/2023/12/19/linux-qi-mo-fu-xi/shell&amp;kernel.png" alt="|164"></p><ul><li>shell<ul><li>shell是一个用户态进程，如/bin/bash</li><li>对用户提供命令行界面</li><li>启动其他应用程序（ap）</li><li>使用操作系统核心提供的功能:包括系统命令和用户编写的程序</li></ul></li><li>kernel<ul><li>管理系统资源(包括内存，磁盘等)运行在核心态</li><li>通过软中断方式对用户态进程提供系统调用接口</li></ul></li></ul><p><strong>shell文件名通配符处理</strong><br>文件名通配符的处理由shell完成，分以下三步：</p><ul><li>在shell提示符下，从键盘输入命令，被shell接受</li><li>shell对所键入内容作若干加工处理，其中含有对文件通配符的展开工作(文件名生成)，生成结果命令</li><li>执行前面生成的结果命令</li></ul><h2 id="列出文件目录"><a href="#列出文件目录" class="headerlink" title="列出文件目录"></a>列出文件目录</h2><h3 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h3><blockquote><p>ls<br>选项：<br>-F：Flag<br>-l：长格式列表<br>-h：human-readable，以便于人阅读的方式打印数值，如1K 234M<br>-d：列出目录自身的信息<br>-a：列出文件名首字符为圆点的文件<br>-A：同-a，但不列出.和..<br>-s：size，列出文件占用的磁盘空间<br>-i：i-node，列出文件的i节点号</p></blockquote><p><strong>ls -F</strong><br>目录后缀/，可执行文件后缀*，符号连接文件后缀@，普通文件无标记&gt; <img src="/2023/12/19/linux-qi-mo-fu-xi/ls-F.png" alt="|225"></p><p><strong>ls -l结果解释</strong><br>-rwxr-x–x 1 liang stud 519 Jul 5 15:02&nbsp; file1</p><ul><li>第1列：文件属性<ul><li>第1字符为文件属性<br>  - 普通文件 b 块设备文件<br>  d 目录文件 c 字符设备文件<br>  l 符号连接文件 p 命名管道文件</li><li>文件的访问权限（rwx：读、写、执行）<br>  依次为文件所有者、同组用户、其他用户对文件的权限</li></ul></li><li>第2列：文件link数，涉及到此文件的目录项数</li><li>第3、4列：文件主的名字和组名</li><li>第5列：<ul><li>普通磁盘文件：列出文件大小（字节数）</li><li>目录：列出目录表（存储目录信息的数据结构）大小，不是目录下文件长度和</li><li>符号连接文件：符号连接文件自身的长度</li><li>字符设备和块设备文件：列出主设备号和次设备号</li><li>管道文件：列出管道内的数据长度</li></ul></li><li>第6列：文件最后一次被修改的日期和时间</li><li>第7列：文件名（对于符号连接文件，附带列出文件内容）</li></ul><h2 id="文件的复制与删除"><a href="#文件的复制与删除" class="headerlink" title="文件的复制与删除"></a>文件的复制与删除</h2><h3 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h3><blockquote><p>cp file1 file2  # 若file2不存在则创建，否则覆盖<br>cp file1 file2 … filen dir  # dir必须已经存在并且是一个目录</p><p>cp -r dir1 dir2  # -r递归地复制一个目录，dir2不存在则新建，拷入dir2；存在则拷入dir2/dir1<br>选项-v：冗长（verbose），复制目录时实时列出正在复制的文件的名字<br>选项-u：增量拷贝（update），根据文件的时戳，不拷贝相同的或者过时的版本的文件，以提高速度</p></blockquote><h3 id="mv"><a href="#mv" class="headerlink" title="mv"></a>mv</h3><blockquote><p>mv file1 file2  # 改名<br>mv file1 file2 … filen dir  # 移动文件<br>mv dir1 dir2  # dir2不存在-&gt;改名；dir2存在-&gt;移动目录</p></blockquote><h3 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h3><blockquote><p>rm file1 file2 … filen # 删除文件<br>-r：递归地删除实参表中的目录<br>-i：每删除一个文件前需要操作员确认<br>-f：强制删除</p></blockquote><p><strong>显示区分命令选项和处理对象</strong><br>问题：<br>设当前目录下只有a，b，c三个文件，<br>ls&gt;-i  # 生成文件-i<br>rm -i  # 不能删除文件-i<br>rm * -&gt; rm -i a b c  # 将-i解析为选项<br>解决方法：<br>用–显式地表示命令行参数列表中选项的结束，例如rm – *，rm – -i</p><h2 id="文件比对"><a href="#文件比对" class="headerlink" title="文件比对"></a>文件比对</h2><h3 id="cmp"><a href="#cmp" class="headerlink" title="cmp"></a>cmp</h3><blockquote><p>cmp file1 file2</p><p>逐字节比较两个文件是否完全相同<br>完全相同时不给出任何提示，否则打印出第一个不同之处</p></blockquote><h3 id="md5sum-sha1sum"><a href="#md5sum-sha1sum" class="headerlink" title="md5sum/sha1sum"></a>md5sum/sha1sum</h3><blockquote><p>md5sum/sha1sum filename</p><p>使用MD5算法/SHA-1算法根据文件内容生成16字节/20字节hash值</p></blockquote><h3 id="diff"><a href="#diff" class="headerlink" title="diff"></a>diff</h3><blockquote><p>diff file1 file2  # normal格式<br>diff -u file1 file2  # unified格式<br>diff -un file1 file2  # unified格式，显示不同行上下相同的各n行</p><p>输出格式：<br>normal：add、change、delete<br><img src="/2023/12/19/linux-qi-mo-fu-xi/diff.png" alt="|500"><br>unified（-u）：+ -</p></blockquote><h2 id="vi编辑器"><a href="#vi编辑器" class="headerlink" title="vi编辑器"></a>vi编辑器</h2><p><img src="/2023/12/19/linux-qi-mo-fu-xi/vi1.png" alt="|500"><br><img src="/2023/12/19/linux-qi-mo-fu-xi/vi2.png" alt="|500"><br><img src="/2023/12/19/linux-qi-mo-fu-xi/vi3.png" alt="|500"></p><h2 id="目录管理"><a href="#目录管理" class="headerlink" title="目录管理"></a>目录管理</h2><h3 id="pwd"><a href="#pwd" class="headerlink" title="pwd"></a>pwd</h3><blockquote><p>print working directory</p></blockquote><h3 id="cd-change-directory"><a href="#cd-change-directory" class="headerlink" title="cd(change directory)"></a>cd(change directory)</h3><blockquote><p>cd /usr/include<br>cd /<br>cd ..<br>cd    # Windows中打印当前工作目录，unix中回到用户主目录<br>cd是shell的一个内部命令，在硬盘上没有存储，由shell自行完成</p></blockquote><h3 id="mkdir-rmdir"><a href="#mkdir-rmdir" class="headerlink" title="mkdir/rmdir"></a>mkdir/rmdir</h3><blockquote><p>mkdir sun/work.d<br>rmdir sun/work.d  # 要求被删除的目录为空<br>rm -r sun/work.d</p></blockquote><h3 id="rsync"><a href="#rsync" class="headerlink" title="rsync"></a>rsync</h3><blockquote><p>rsync 选项 源目录/文件 目标目录<br>选项：-a（归档模式，保留所有文件属性），-v、-r、-u</p></blockquote><p>rsync用一精巧的算法，将文件<strong>分块</strong>，在两主机间传播数据块的<strong>hash值</strong>，具体推出两版本文件的区别，使得网络只传输增、删、改部分</p><h2 id="目录遍历"><a href="#目录遍历" class="headerlink" title="目录遍历"></a>目录遍历</h2><h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><blockquote><p>find 路径 匹配条件 动作</p><p>-name pattern：按文件名查找，支持使用通配符*和？<br>-type type：按文件类型查找，可以是f（普通文件）、d（目录）、l（符号连接）等<br>-size [+-]size[cwbkMG]：按文件大小查找，支持使用+/-表示大于或小于指定大小，单位可以是c（字节）、w（字数）、b（块数）、k（KB）、M（MB）或G（GB）<br>-mtime days：按修改时间查找，支持使用+/-表示在指定天数前或后，days是一个整数表示天数<br>-user/group name：按文件所有者/所有组查找</p><p>可以用（） -o ！等表示多条件的“与”“或”“非”</p><p>-print：打印查找的文件的路径名<br>-exec：对查找到的目标执行某一命令，在-exec及随后的分号之间的内容作为一条命令，在这命令的命令参数中，{}代表遍历到的目标文件的路径名<br>-ok：与-exec类似，只是对查找到符合条件的目标执行一个命令前需要经过操作员确认</p></blockquote><h2 id="目录遍历的应用（待补充）"><a href="#目录遍历的应用（待补充）" class="headerlink" title="目录遍历的应用（待补充）"></a>目录遍历的应用（待补充）</h2><h2 id="批量处理文件（待补充）"><a href="#批量处理文件（待补充）" class="headerlink" title="批量处理文件（待补充）"></a>批量处理文件（待补充）</h2><h2 id="打包与压缩"><a href="#打包与压缩" class="headerlink" title="打包与压缩"></a>打包与压缩</h2><h3 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h3><blockquote><p>tar ctxv[f device] file-list</p><p>选项第一字母指定要执行的操作<br>c：Create创建新磁带。从头开始写，以前存于磁带上的数据会被覆盖掉<br>t：Table列表。磁带上的文件名列表，当不指定文件名时，将列出所有的文件<br>x：eXtract抽取。从磁带中抽取指定的文件。当不指定文件名时，抽取所有文件</p><p>除功能字母外的其它选项<br>v：Verbose冗长。每处理一个文件，就打印出文件的文件名，并在该名前冠以功能字母<br>f：File。指定设备文件名<br>z：采用压缩格式(gzip算法）<br>j：采用压缩格式(bzip2算法)</p></blockquote><p><strong>tar的使用：磁带机操作</strong></p><ul><li>tar cvf /dev/rct0 .<br>  将当前目录树备份到设备/dev/rct0中，圆点目录是当前目录</li><li>tar tvf /dev/rct0<br>  查看磁带设备/dev/rct0上的文件目录</li><li>tar xvf /dev/rct0<br>  将磁带设备/dev/rct0上的文件恢复到文件系统中<br><strong>tar的使用：文件打包</strong><br>tar cvf my.tar *.[ch] makefile<br>指定普通文件代替设备文件，将多个文件或目录树存储成一个文件。这是UNIX世界早期最常用的文件和目录打包工具<br><strong>tar的使用：目录打包</strong><br>设work是一个有多个层次的子目录</li><li>tar cvf work.tar work</li><li>tar cv<strong>z</strong>f work.tar.gz work&nbsp; (gzip压缩算法，对C程序体积为原来的20%)</li><li>tar cv<strong>j</strong>f work.tar.bz2 work（bzip2压缩算法，对C程序17%，执行时间三倍）<br>查看归档文件中的文件目录：</li><li>tar <strong>t</strong>vf work.tar.gz&nbsp;&nbsp;<br>从归档文件中恢复目录树：</li><li>tar <strong>x</strong>vf work.tar.gz<br>文件名后缀.tar,.tar.gz,.tar.bz2仅仅是惯例，不是系统级强制要求<br><strong>文件压缩和解压缩</strong><br>gzip/gunzip&nbsp;&nbsp; (执行速度快）<br>bzip2/bunzip2 (占用较多的CPU时间）</li></ul><h1 id="文件和目录的权限"><a href="#文件和目录的权限" class="headerlink" title="文件和目录的权限"></a>文件和目录的权限</h1><h2 id="文件的权限"><a href="#文件的权限" class="headerlink" title="文件的权限"></a>文件的权限</h2><p>文件的权限用于控制进程对系统中文件和目录的访问</p><ul><li>权限的三个级别<ul><li>文件主，同组用户，其他用户</li><li>每个文件有唯一的属主</li></ul></li><li>普通文件的权限<ul><li>读、写、可执行</li><li><strong>不可写文件也可能会被删除（需要看目录有没有写权限）</strong></li></ul></li></ul><p>两类可执行文件</p><ul><li>程序文件（可执行文件）<ul><li>二进制的CPU指令集合</li></ul></li><li>脚本文件（文本文件）<ul><li>默认的解释程序为/bin/sh</li><li>可以在文件的第一行自行指定解释程序（必须是第一行，#!必须是这个文件首先出现的两个字符）例如：#!/bin/bash</li><li>解释程序也可以是用户自己编写的应用程序</li><li>脚本程序运行时，实际上是由解释程序创建了一个进程</li></ul></li></ul><h2 id="目录的权限"><a href="#目录的权限" class="headerlink" title="目录的权限"></a>目录的权限</h2><ul><li>读权限<ul><li>拥有读权限的用户可以使用 ls 命令来查看该目录中的文件和子目录列表。</li><li>目录的读权限并不允许用户查看目录中文件的具体内容；查看文件内容需要对那些文件具有读权限。</li><li>拥有目录的读权限并不意味着可以进入目录。进入目录需要该目录的执行权限（x）。</li></ul></li><li>写权限<ul><li>若无写权限，那么目录表不许写（不许创建/删除文件）</li><li>修改文件不需要修改目录文件，需要修改i节点</li></ul></li><li>执行权限<ul><li><strong>有执行权限意味着允许用户进入目录</strong></li><li>cat /a/b/c，要求/a与a/b目录有x权限，c文件有读权限</li><li>cd ../st8，要求当前目录，..和st8必须有x权限</li></ul></li><li>STICKY权限（粘着位）<ul><li>早期Unix具有sticky属性的可执行文件尽量常驻内存或交换区以提高效率。现代Linux对访问过的文件自动缓冲在内存，文件sticky属性被忽略</li><li>对于公共目录下，用户user1和user2没有写权限就不能创建文件，若有写权限，用户user1的文件就算是只读文件也可以被user2删除。STICKY属性用于解决这个问题：<strong>目录有写权限并且带STICKY属性，此目录下的文件仅文件主可以删除，其他用户删除操作会失败</strong>。</li></ul></li></ul><h2 id="权限验证的顺序"><a href="#权限验证的顺序" class="headerlink" title="权限验证的顺序"></a>权限验证的顺序</h2><p>每个文件都有文件主和组的属性（文件节点中）<br>每个进程也有进程主和组的属性（进程PCB中）<br>都是整数，uid和gid的编号与名字的对应关系见/etc下passwd和group文件</p><ul><li>文件主与进程主相同——使用文件主的权限</li><li>文件主与进程主不相同但同组——使用组权限</li><li>文件主与进程主不相同且不同组——使用其他权限<br>注意：超级用户不受权限的制约</li></ul><h2 id="文件权限相关命令"><a href="#文件权限相关命令" class="headerlink" title="文件权限相关命令"></a>文件权限相关命令</h2><h4 id="确定文件的权限"><a href="#确定文件的权限" class="headerlink" title="确定文件的权限"></a>确定文件的权限</h4><ul><li>使用ls命令<ul><li>有关选项-l和-d，例如：ls -ld .列出当前目录自身的权限</li></ul></li></ul><h4 id="修改权限"><a href="#修改权限" class="headerlink" title="修改权限"></a>修改权限</h4><blockquote><p>chmod：修改权限（字母形式）<br>chmod [ugoa][+-=][rwxst]文件名表</p><p>u–user  文件主的权限<br>g–group  同组用户的权限<br>o–other  其他用户权限<br>a–all  所有上述三级权限<br>（t–Sticky，s–SUID）</p></blockquote><p>例：chmod go-rwx *.[ch]  对所有c语言源程序文件，不允许其他用户读、写和执行</p><blockquote><p>chmod：修改权限（数字形式）</p><p>例：chmod 644 xyz1 xyz2<br>八进制： 6 4 4<br>二进制：110 100 100<br>权限：rw- r– r–</p></blockquote><p>注意：只有文件主和超级用户修改文件权限</p><blockquote><p>umask：决定文件/目录的初始权限<br>umask是shell内部命令，是进程属性的一部分<br>umask：打印当前的umask值<br>umask 022：将umask值设置为八进制的022(二进制为000 010 000，取消新文件和新目录的组w权限和其他用户w权限)</p></blockquote><p>一般将umask命令放到shell自动执行的批处理文件中。<br>系统调用umask可以修改进程自身的umask属性值，初创文件的权限受open的规定值进程自身属性umask值影响。已存在的文件的权限，不受open/umask的影响。</p><h2 id="三级权限存在的问题"><a href="#三级权限存在的问题" class="headerlink" title="三级权限存在的问题"></a>三级权限存在的问题</h2><p>问题：系统中任一个用户，要么对文件的全部内容具有访问权，要么不可访问文件。有的情况下，很不方便。例如用户修改口令，需要访问和修改文件/etc/passwd。</p><p>解决方法：SUID权限</p><ul><li>当一个可执行文件设置了 SUID 权限后，无论谁运行这个文件，该程序都会以文件所有者的权限来执行。</li><li>例如，如果一个可执行文件的所有者是 root，并且设置了 SUID 权限，那么无论谁运行这个程序，该程序都会以 root 用户的权限来运行。</li><li>SUID 通常用于那些需要提高权限以执行特定任务的程序。例如，passwd程序用于更改用户的密码，需要访问通常只有 root 用户才能访问的系统文件。通过设置 SUID 权限，普通用户在运行 passwd程序时能以 root 用户的身份执行，从而可以更新密码文件。</li></ul><h1 id="shell的基本机制"><a href="#shell的基本机制" class="headerlink" title="shell的基本机制"></a>shell的基本机制</h1><h2 id="shell概述"><a href="#shell概述" class="headerlink" title="shell概述"></a>shell概述</h2><h3 id="shell种类"><a href="#shell种类" class="headerlink" title="shell种类"></a>shell种类</h3><ul><li>B-shell</li><li>C-shell</li><li>K-shell</li><li>/bin/bash（inux上的标准shell）</li></ul><h3 id="shell的功能"><a href="#shell的功能" class="headerlink" title="shell的功能"></a>shell的功能</h3><ul><li>shell是命令解释器</li><li>文件名替换，命令替换，变量替换</li><li>历史替换（上下方向键查看历史指令），别名替换</li><li>流程控制的内部命令</li></ul><h3 id="shell的特点"><a href="#shell的特点" class="headerlink" title="shell的特点"></a>shell的特点</h3><ul><li>主要用途：批处理，执行效率比算法预言低</li><li>shell编程风格和C语言等算法语言的区别</li><li>shell是<strong>面向命令处理的语言</strong>，提供的流程控制结构通过对一些内部命令的解释实现</li><li>shell许多灵活的功能，通过<strong>shell替换</strong>实现，例如：流程控制所需的条件判断，四则运算，都由shell之外的命令完成</li></ul><h2 id="bash的启动"><a href="#bash的启动" class="headerlink" title="bash的启动"></a>bash的启动</h2><h3 id="三种启动方法"><a href="#三种启动方法" class="headerlink" title="三种启动方法"></a>三种启动方法</h3><ul><li>将登陆后执行的shell设置为bash：注册shell</li><li>键入bash命令：交互式shell</li><li>脚本解释器</li></ul><h3 id="自动执行的一批命令"><a href="#自动执行的一批命令" class="headerlink" title="自动执行的一批命令"></a>自动执行的一批命令</h3><p><strong>用户级</strong></p><ul><li>当bash作为注册shell被启动时:自动执行用户主目录下的.bash_profile文件中命令，记作：<del>/.bash_profile或$HOME/.bash_profile。或</del>/.profile</li><li>当bash作为注册shell退出时:自动执行$HOME/.bash_logout</li><li>当bash作为交互式shell启动时:自动执行$HOME/.bashrc</li><li>类似umask之类的命令，应当写在.bash_profile文件中<br><strong>系统级</strong></li><li>当bash作为注册shell被启动时:自动执行/etc/profile文件中命令</li><li>当bash作为交互式shell启动时:自动执行/etc/bash.bashrc</li><li>当bash作为注册shell退出时:自动执行/etc/bash.bash.logout</li></ul><h3 id="脚本文件"><a href="#脚本文件" class="headerlink" title="脚本文件"></a>脚本文件</h3><p>编辑文件lsdir，文件名不必须为.sh后缀，只是个惯例</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [<span class="variable">$#</span> = 0]               <span class="comment"># 检查命令行参数的个数</span></span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">dir</span>=.</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">dir</span>=<span class="variable">$1</span>                <span class="comment"># 变量dir赋值为命令行第一个参数</span></span><br><span class="line"><span class="keyword">fi</span>                        <span class="comment"># if语句的结束，相当于end if</span></span><br><span class="line">find <span class="variable">$dir</span> -<span class="built_in">type</span> d -<span class="built_in">print</span>  <span class="comment"># 打印dir的目录树</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'------------'</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$dir</span></span><br><span class="line"><span class="built_in">pwd</span></span><br></pre></td></tr></tbody></table></figure><h4 id="脚本文件的执行"><a href="#脚本文件的执行" class="headerlink" title="脚本文件的执行"></a>脚本文件的执行</h4><ul><li>新创建子进程，并在子进程中执行脚本<ol><li>bash&lt;\lsdir  无法携带命令行参数</li><li>bash lsdir<br>   bash -x lsdir （调试运行，指令命令之前打印出每个命令及其扩展的参数）<br>   bash lsdir /usr/lib/gcc</li><li>给文件设置可执行属性x，然后执行：chmod u+x lsdir  ./lsdir /usr/lib/gcc</li></ol></li><li>在当前shell进程中执行脚本：. lsdir /usr/lib/gcc  或者  source lsdir /usr/lib/gcc （脚本执行后对当前shell状态有影响）</li></ul><h2 id="历史与别名"><a href="#历史与别名" class="headerlink" title="历史与别名"></a>历史与别名</h2><h3 id="历史表"><a href="#历史表" class="headerlink" title="历史表"></a>历史表</h3><ul><li>先前键入的命令存于历史表，编号递增，FIFO刷新</li><li>表大小由变量HISTSIZE设定，修改HISTSIZE的配置应放入~/.bashrc</li></ul><h4 id="查看历史表"><a href="#查看历史表" class="headerlink" title="查看历史表"></a>查看历史表</h4><ul><li>内部指令history（文件~/.bash_history）</li></ul><h4 id="历史替换"><a href="#历史替换" class="headerlink" title="历史替换"></a>历史替换</h4><ul><li>人机交互时直接使用上下箭头</li><li>其他方法：!! 引用上一命令  !str  以str开头的最近使用过的命令，如!v !m !.</li></ul><h3 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h3><h4 id="别名替换"><a href="#别名替换" class="headerlink" title="别名替换"></a>别名替换</h4><ul><li>在别名表中增加一个别名（内部命令alias）<br>如：alias p=’ping 202.143.12.189’<br>alias rm=‘rm -i’   对rm命令进行重载<br>如果需要，应把alias命令放入.bashrc</li><li>查看别名表 alias</li><li>取消别名（内部命令unalias）<br>unalias n 在别名表中取消n</li></ul><h4 id="TAB键补全"><a href="#TAB键补全" class="headerlink" title="TAB键补全"></a>TAB键补全</h4><ul><li>每行的首个单词<br>TAB键补全搜索$PATH下的命令</li><li>行中的其它单词<br>TAB键补全当前目录下的文件名</li></ul><h2 id="输入重定向"><a href="#输入重定向" class="headerlink" title="输入重定向"></a>输入重定向</h2><ul><li>&lt;\filename<br>从文件filename中获取stdin，例如：sort&lt;telno.txt</li><li>&lt;&lt;word<br>从shell脚本文件获取数据直到再次遇到定界符work，定界符两侧加单引号：不允许定界符之间的内容进行替换操作（如‘date’、$HOME）</li><li>&lt;&lt;&lt;word<br>从命令行获取信息作为标准输入</li></ul><h2 id="输出重定向与管道"><a href="#输出重定向与管道" class="headerlink" title="输出重定向与管道"></a>输出重定向与管道</h2><h3 id="程序的标准输入-输出"><a href="#程序的标准输入-输出" class="headerlink" title="程序的标准输入/输出"></a>程序的标准输入/输出</h3><p><img src="/2023/12/19/linux-qi-mo-fu-xi/stdin&amp;stdout.png" alt="|500"></p><h3 id="stdout输出重定向"><a href="#stdout输出重定向" class="headerlink" title="stdout输出重定向"></a>stdout输出重定向</h3><ul><li>&gt;filename<br>将stdout重定向到文件filename，文件已存在则先清空（覆盖方式）</li><li>&gt;&gt;filename<br>将stdout重定向追加到文件filename</li></ul><h3 id="stderr输出重定向"><a href="#stderr输出重定向" class="headerlink" title="stderr输出重定向"></a>stderr输出重定向</h3><ul><li>2&gt;filename<br>将文件句柄2重定向到文件filename，分离stdout与stderr的意义</li><li>2&gt;&amp;1<br>将文件句柄2重定向到文件描述符1指向的文件，允许对除0，1，2外其它文件句柄输入或输出重定向</li></ul><h3 id="输出重定向例子"><a href="#输出重定向例子" class="headerlink" title="输出重定向例子"></a>输出重定向例子</h3><ul><li>ls -l &gt; file.list<br>将命令ls标准输出stdout定向到文件file.list中</li><li>cc try.c -o try 2 &gt; try.err<br>将cc命令的stderr重定向到文件try.err中</li><li>try &gt; try.out 2&gt;try.err<br>try 1 &gt;try.out 2&gt;try.err<br>将try程序执行后的stdout和stderr分别重定向到不同的文件</li><li>./stda &gt;rpt 2&gt;&amp;1<br>stdout和stderr均存入文件rpt</li><li>./ stda 2&gt;&amp;1 &gt;rpt<br>stderr定向到终端，stdout重定向到文件</li></ul><h3 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h3><ul><li>ls -l | grep ‘^d’<br>前一命令的stdout作后一命令的stdin</li><li>cc try.c -o try 2&gt;&amp;1 | more<br>前一命令的stdout+stderr作为下一命令的stdin</li></ul><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><h2 id="变量的赋值及使用"><a href="#变量的赋值及使用" class="headerlink" title="变量的赋值及使用"></a>变量的赋值及使用</h2><h3 id="bash变量"><a href="#bash变量" class="headerlink" title="bash变量"></a>bash变量</h3><ul><li>存储的内容<ul><li><strong>字符串</strong>（对于数字串来说，不是二进制形式）</li><li>在执行过程中其内容可以被修改</li></ul></li><li>变量名<ul><li>第一个字符必须为字母</li><li>其余字符可以是字母，数字，下划线</li></ul></li><li>赋值与引用<ul><li>addr=20.1.1.254 注意：赋值作为单独一条命令，<strong>等号两侧不许多余空格</strong></li><li>引用addr变量的方法：$addr或${addr}</li><li>命令行中含有$符的变量引用，shell会先完成变量替换</li><li>赋值时，等号右侧字符串中含有特殊字符要用双引号，如unit=”Beiyou University”</li><li>引用未定义变量，变量值为空字符串</li><li>shell内部开关<ul><li>set -u当引用一个未定义的变量时，产生一个错误</li><li>set +u当引用一个未定义的变量时，认为是一个空串（默认情形）</li><li>set -x执行命令前打印出shell替换后的命令及参数，为区别于正常的shell输出，前面冠以+号</li><li>set +x取消上述设置</li></ul></li></ul></li></ul><h3 id="echo命令"><a href="#echo命令" class="headerlink" title="echo命令"></a>echo命令</h3><blockquote><p>echo arg1 arg2 arg3 …<br>打印各命令行参数，每两个间用一空格分开，最后打印换行符</p><p>加选项-e打印不可打印字符（注意需要加单引号引起来）<br>\b 退格  \r回车  \t 水平制表<br>\n 换行  \\反斜线  \nnn 八进制描述的ASCII码（n为三个数字）<br>\c 打印完毕，不换行 </p></blockquote><p>缺点：在不同Unix之间兼容性差</p><h2 id="在脚本中编辑文件"><a href="#在脚本中编辑文件" class="headerlink" title="在脚本中编辑文件"></a>在脚本中编辑文件</h2><h3 id="read"><a href="#read" class="headerlink" title="read"></a>read</h3><p>内部命令read：变量取值的另外一种方法</p><ul><li>从标准输入读入一行内容赋值给变量，例：read name</li></ul><h3 id="ed"><a href="#ed" class="headerlink" title="ed"></a>ed</h3><blockquote><p>ed 选项 filename<br>单行纯文本编辑器<br>内置命令：<br>    A：切换到输入模式，在文件最后一行之后输入新的内容<br>    C：切换到输入模式，用输入的内容替换掉最后一行的内容<br>    i：切换到输入模式，在当前行之前加入一个新的空行来输入内容<br>    d：用于删除最后一行文本内容<br>    n：用于显示最后一行的行号和内容<br>    w：&lt;文件名&gt;：以给定的文件保存当前正在编辑的文件<br>    q：退出ed编辑器</p></blockquote><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><h3 id="环境变量和局部变量"><a href="#环境变量和局部变量" class="headerlink" title="环境变量和局部变量"></a>环境变量和局部变量</h3><h4 id="默认类型"><a href="#默认类型" class="headerlink" title="默认类型"></a>默认类型</h4><ul><li>所创建的shell变量，默认为局部变量</li></ul><h4 id="内部命令export"><a href="#内部命令export" class="headerlink" title="内部命令export"></a>内部命令export</h4><ul><li>局部变量转换为环境变量，例如export proto</li></ul><h4 id="局部变量和环境变量"><a href="#局部变量和环境变量" class="headerlink" title="局部变量和环境变量"></a>局部变量和环境变量</h4><ul><li>shell启动的子进程继承环境变量，不继承局部变量</li><li>子进程对环境变量的修改，不影响父进程中同名变量</li><li>环境变量的设置，如PATH，CLASSPATH，LANG，若有必要放在~/.bashrc中或/etc/profile中</li></ul><h3 id="系统的环境变量"><a href="#系统的环境变量" class="headerlink" title="系统的环境变量"></a>系统的环境变量</h3><h4 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h4><ul><li>登陆后系统自动创建一些环境变量影响应用程序运行</li></ul><h4 id="HOME：用户主目录的路径名"><a href="#HOME：用户主目录的路径名" class="headerlink" title="HOME：用户主目录的路径名"></a>HOME：用户主目录的路径名</h4><h4 id="PATH：指定系统在查找可执行文件（命令）时应搜索的目录列表"><a href="#PATH：指定系统在查找可执行文件（命令）时应搜索的目录列表" class="headerlink" title="PATH：指定系统在查找可执行文件（命令）时应搜索的目录列表"></a>PATH：指定系统在查找可执行文件（命令）时应搜索的目录列表</h4><ul><li>PATH=/bin:/usr/bin:/etc </li><li>与DOS/Windows不同的是，它不首先搜索当前目录</li><li>PATH=.:/bin:/usr/bin:/etc先搜索当前目录(危险：可能会执行到恶意程序） </li><li>PATH=/bin:/usr/bin:/etc:.后搜索当前目录(危险：可能会执行到恶意程序）</li></ul><h4 id="相关命令set-env"><a href="#相关命令set-env" class="headerlink" title="相关命令set/env"></a>相关命令set/env</h4><ul><li>内部命令set列出当前所有变量及其值以及函数（包括环境变量和局部变量、函数定义）<br>  set|grep^fname=</li><li>外部命令/bin/env列出环境变量及其值</li></ul><h4 id="环境变量的引用"><a href="#环境变量的引用" class="headerlink" title="环境变量的引用"></a>环境变量的引用</h4><ul><li>脚本程序可直接引用环境变量值（脚本程序由当前子shell解释执行，而环境变量可继承）</li><li>C程序可以通过函数getenv()引用环境变量</li></ul><h1 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h1><h2 id="shell替换"><a href="#shell替换" class="headerlink" title="shell替换"></a>shell替换</h2><p>shell的替换工作：先替换命令行再执行命令</p><ul><li>文件名生成</li><li>变量替换</li><li>命令替换</li></ul><h3 id="变量替换"><a href="#变量替换" class="headerlink" title="变量替换"></a>变量替换</h3><ul><li>ls $HOME</li><li>echo ”My home is $HOME,Terminal is $TERM”</li></ul><h3 id="文件名生成"><a href="#文件名生成" class="headerlink" title="文件名生成"></a>文件名生成</h3><ul><li>遵循文件通配符规则，按照字典序排列<br>如:ls *.c文件名替换后实际执行lsa.cx.c</li><li>无匹配文件：保持原文，例如：*.php展开后还是*.php<br>例如：vi *.php</li></ul><h3 id="命令替换"><a href="#命令替换" class="headerlink" title="命令替换"></a>命令替换</h3><ol><li>反撇号方式<br>now=`date`  //以命令date的stdout替换`date`</li></ol><p>ts=`date’+%Y%m%d-%H%M%S’`;<br>mv myap.log `whoami`-$ts.log   //用户名加时间戳做文件名</p><p>frames=`expr 5+13`</p><ol start="2"><li>$()格式（与反撇号方式类似）<br>now=$(date)</li></ol><p>ts=$(date’+%Y%m%d-%H%M%S’);<br>mv myap.log $(whoami)-$ts.log</p><p>frames=$(expr 5+13)</p><h3 id="shell内部变量：位置参数"><a href="#shell内部变量：位置参数" class="headerlink" title="shell内部变量：位置参数"></a>shell内部变量：位置参数</h3><ul><li>$0         脚本文件本身的名字</li><li>$1$2     1号命令行参数，2号命令行参数，以此类推</li><li>$#        命令行参数的个数</li><li>”$*”     等同于”$1 $2 $3 $4…”</li><li>”$@”    等同于”$1” ”$2” ”$3”…</li><li>内部命令shift：位置参数的移位操作，$#的值减1，旧的$2变为$1，旧的$3变为$2，以此类推<br>其他用法如：shift3（移位三个位置）</li></ul><h1 id="元字符和转义"><a href="#元字符和转义" class="headerlink" title="元字符和转义"></a>元字符和转义</h1><h2 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h2><p>空格，制表符         命令行参数的分隔符<br>回车                        执行键入的命令<br>&gt;&lt;|                         重定向与管道(还有||)<br>;                              用于一行内输入多个命令(还有;;)<br>&amp;                            后台运行(还有&amp;&amp;)<br>$                             引用shell变量<br>`                             反向单引号，用于命令替换<br>*[]?                        文件通配符(echo”*“与echo*不同）<br>\                             取消后继字符的特殊作用(转义)<br>()                            用于定义shell函数或在子shell中执行一组命令</p><h2 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h2><h3 id="反斜线"><a href="#反斜线" class="headerlink" title="反斜线"></a>反斜线</h3><ul><li>反斜线作转义符，取消其后元字符的特殊作用</li><li>如果反斜线加在非元字符前面，反斜线跟没有一样</li></ul><p>find / -size +100 \(-name core -o -name \*.tmp\) -exec rm -f {}\;<br>ls-l&gt;file\ list        文件名中包含空格<br>echo *与echo \*</p><h3 id="单引号和双引号"><a href="#单引号和双引号" class="headerlink" title="单引号和双引号"></a>单引号和双引号</h3><ul><li>双引号”括起来的内容，除$和`外特殊字符的特殊含义被取消（保留一定的灵活性）</li><li>单引号‘括起来的内容，任何字符不作特殊解释</li></ul><h1 id="shell流程控制：条件"><a href="#shell流程控制：条件" class="headerlink" title="shell流程控制：条件"></a>shell流程控制：条件</h1><h2 id="shell中的逻辑判断"><a href="#shell中的逻辑判断" class="headerlink" title="shell中的逻辑判断"></a>shell中的逻辑判断</h2><h3 id="shell中的条件判断"><a href="#shell中的条件判断" class="headerlink" title="shell中的条件判断"></a>shell中的条件判断</h3><p>命令执行的返回码为0表示成功，非0表示失败，可以把返回码理解为”出错代码“。<br>如果代码中main()函数没有return一个确定的值，返回码就是随机值，不可用来做条件判断。</p><h3 id="shell内部变量"><a href="#shell内部变量" class="headerlink" title="shell内部变量$?"></a>shell内部变量$?</h3><p>值为上一命令的返回码，例如：<br>$ ls -d xyz<br>xyz<br>$ echo $?<br>0<br>注：用管道线连接在一起的若干命令，进行条件判断时以最后一个命令执行的返回码为准</p><h3 id="复合逻辑"><a href="#复合逻辑" class="headerlink" title="复合逻辑"></a>复合逻辑</h3><p>用&amp;&amp;或||连结两个命令<br>可以利用复合逻辑中的“短路计算”特性实现最简单的条件</p><ul><li>cmd1&amp;&amp;cmd2<br>若cmd1执行成功(返回码为0)则执行cmd2，否则不执行cmd2</li><li>cmd1||cmd2<br>cmd1执行失败(返回码不为0)则执行cmd2，否则不执行cmd2</li></ul><p>若没有目录ydir<br>$ ls -d ydir &gt;/dev/null 2&gt;&amp;1 || echo No ydir<br>No ydir</p><h3 id="命令true与false"><a href="#命令true与false" class="headerlink" title="命令true与false"></a>命令true与false</h3><ul><li>/bin/true<br>返回码总为0</li><li>/bin/false<br>返回码总不为0</li><li>有的shell为了提高效率，将true和false设置为内部命令</li></ul><h2 id="test命令和方括号命令"><a href="#test命令和方括号命令" class="headerlink" title="test命令和方括号命令"></a>test命令和方括号命令</h2><h3 id="命令test与"><a href="#命令test与" class="headerlink" title="命令test与["></a>命令test与[</h3><ul><li><strong>用于检查某个条件是否成立，并根据这个条件的结果返回退出状态。退出状态为 0 表示条件为真，非 0 表示条件为假。</strong></li><li>命令/usr/bin/[要求其最后一个命令行参数必须为]</li><li>除此之外/usr/bin/[与/usr/bin/test功能相同<br>有的Linux系统中/usr/bin/[是一个指向test的符号连接</li><li>注意：不要将方括号理解成一个词法符号</li><li>举例<br>test -r /etc/motd<br>[ -r/etc/motd ]         [是命令，]是参数。空格不能省略</li></ul><h3 id="文件特性检测"><a href="#文件特性检测" class="headerlink" title="文件特性检测"></a>文件特性检测</h3><p>-f  普通文件     -d  目录文件<br>-r  可读            -w  可写<br>-x  可执行        -s   size&gt;0<br><img src="/2023/12/19/linux-qi-mo-fu-xi/exampleOfTest.png"></p><h3 id="字符串比较"><a href="#字符串比较" class="headerlink" title="字符串比较"></a>字符串比较</h3><p>str1= str2         str1与str2串相等(bash也允许以==代替=)<br>str1!=str2         str1串与str2串不等<br><strong>注意:等号和不等号两侧的空格不可少</strong><br>[ “$a”=”” ] &amp;&amp; echo empty string            <strong>注意:$a的引号</strong><br>test $# = 0 &amp;&amp; echo”No argument”</p><p>level=8<br>[ $level=0 ] &amp;&amp; echo level is Zero<br>应为<br>[ $level = 0 ] &amp;&amp; echo level is Zero<br>[ $level=0 ]仅判断$level=0是否为空字符串，非空即返回0</p><h3 id="整数的比较"><a href="#整数的比较" class="headerlink" title="整数的比较"></a>整数的比较</h3><p>-eq＝                 -ne ≠<br>-gt＞                  -ge≥<br>-lt＜                   -le≤<br>例:<br>test `ls | wc -l` -ge 100 &amp;&amp; echo”Too many files”</p><h3 id="复合条件"><a href="#复合条件" class="headerlink" title="复合条件"></a>复合条件</h3><p>！            NOT（非）<br>-o            OR（或）<br>-a            AND（与）<br>例:如果变量cmd的值为一个可执行命令，执行该命令<br>[ ! -d $cmd -a -x $cmd ] &amp;&amp; $cmd<br>注意：必需的空格不可省略</p><h2 id="命令组合"><a href="#命令组合" class="headerlink" title="命令组合"></a>命令组合</h2><h3 id="命令组合的两种方式-与"><a href="#命令组合的两种方式-与" class="headerlink" title="命令组合的两种方式{}与()"></a>命令组合的两种方式{}与()</h3><p>命令组合类似C语言中的复合语句，组合在一起的几个命令作为一个整体看待：可以集体管道和重定向或者当条件满足时执行若干个命令。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">pwd</span></span><br><span class="line">DIR=/usr/bin</span><br><span class="line">[ -d <span class="variable">$DIR</span> ] &amp;&amp; {</span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$DIR</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Current Directory is `pwd`"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"`ls | wc -l` files"</span></span><br><span class="line">}</span><br><span class="line"><span class="built_in">pwd</span></span><br></pre></td></tr></tbody></table></figure><h3 id="与-的不同"><a href="#与-的不同" class="headerlink" title="{}与()的不同"></a>{}与()的不同</h3><h4 id="语义上的不同"><a href="#语义上的不同" class="headerlink" title="语义上的不同"></a>语义上的不同</h4><p>{}在当前shell中执行一组命令<br>()在子shell中执行一组命令<br>例如，上述代码中，第二次pwd结果应为/usr/bin，假如将花括号换为圆括号，结果应与第一次pwd结果相同</p><h4 id="语法上的不同"><a href="#语法上的不同" class="headerlink" title="语法上的不同"></a>语法上的不同</h4><p>(list)在子shell中执行命令表list<br>{ list;}在当前shell中执行命令表list</p><ul><li>注意:<strong>左花括号后面必须有一个空格</strong></li><li>圆括号是shell元字符，花括号不是，它作为一个特殊内部命令处理。所以必须是一行的行首单词</li></ul><h2 id="条件分支"><a href="#条件分支" class="headerlink" title="条件分支"></a>条件分支</h2><h3 id="条件结构if：两个或多个分支"><a href="#条件结构if：两个或多个分支" class="headerlink" title="条件结构if：两个或多个分支"></a>条件结构if：两个或多个分支</h3><blockquote><p>if condition<br>then<br>    list<br>elif condition<br>then<br>    list<br>else<br>    list<br>fi</p></blockquote><p>其中：if/then/elif/else/fi为关键字（内部命令），<strong>关键字作为内部命令，要么在行首，要么前面有分号来分隔命令</strong><br>与C语言不同，if的语法中then与else或fi配对，使得不需要花括号这样的命令组合</p><h3 id="case结构：多条件分支"><a href="#case结构：多条件分支" class="headerlink" title="case结构：多条件分支"></a>case结构：多条件分支</h3><blockquote><p>case word in<br>     pattern1)<br>         list1;;<br>     pattern2)<br>         list2;;<br>     …<br>    esac</p></blockquote><ul><li>word与pattern匹配：使用shell的文件名匹配规则</li><li>;;是一个整体，不能在两分号间加空格，也不能用两个连续的空行代替</li><li>word与多个模式匹配时，执行遇到的第一个命令表</li></ul><h3 id="shell脚本中的注释"><a href="#shell脚本中的注释" class="headerlink" title="shell脚本中的注释"></a>shell脚本中的注释</h3><p>shell中使用#号作注释<br>#号出现在一个单词的首部，那么，从#号至行尾的所有字符被忽略</p><h1 id="shell流程控制：循环"><a href="#shell流程控制：循环" class="headerlink" title="shell流程控制：循环"></a>shell流程控制：循环</h1><h2 id="表达式计算"><a href="#表达式计算" class="headerlink" title="表达式计算"></a>表达式计算</h2><ul><li>shell不支持除字符串以外的数据类型，不支持加减乘除等算数运算和关于字符串的正则表达式运算</li><li>需要这些功能，借助于shell之外的可执行程序/usr/bin/expr实现</li><li>有的shell（包括bash）为了提高执行效率，提供内部命令版本的echo,printf,expr,test,[等命令，但这仅仅是一种性能优化措施。只依赖外部命令完全可以实现</li></ul><h3 id="expr"><a href="#expr" class="headerlink" title="expr"></a>expr</h3><p>括号：()<br>算术运算：+ - * / %<br>关系运算：&gt; &gt;= &lt;= = !=<br>逻辑运算：| &amp;<br>正则表达式运算： ：</p><h3 id="空格与转义"><a href="#空格与转义" class="headerlink" title="空格与转义"></a>空格与转义</h3><ul><li>应该转义的地方必须加反斜线转义</li><li>应该有空格的地方不允许漏掉<br><img src="/2023/12/19/linux-qi-mo-fu-xi/exampleOfExpr.png" alt="|500"></li></ul><h3 id="正则表达式运算"><a href="#正则表达式运算" class="headerlink" title="正则表达式运算"></a>正则表达式运算</h3><p>用法:expr string : pattern</p><ul><li>正则表达式pattern匹配字符串string，打印匹配长度</li><li>attern中用\(和\)括起一部分，能匹配时打印括号内能匹配的部分，否则为空字符串<br><img src="/2023/12/19/linux-qi-mo-fu-xi/exampleOfExpr2.png" alt="|500"></li></ul><h2 id="内部命令eval"><a href="#内部命令eval" class="headerlink" title="内部命令eval"></a>内部命令eval</h2><p>将程序中输入的或者加工出来的数据作为程序来执行</p><ul><li>解释和编译</li><li>将数据（程序生成的数据或者外部输入的数据）当做程序来执行是只有解释型语言才可能具备的特点，类似C这样的编译型语言无法具备这样的功能（但可以通过“动态链接”的方式，在程序运行期间不停止程序的运行有限度地变换处理程序）<br><img src="/2023/12/19/linux-qi-mo-fu-xi/exampleOfEval.png" alt="|400"></li></ul><h2 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h2><blockquote><p>while condition<br>do<br>    list<br>done</p></blockquote><h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><blockquote><p>for name in word1 word2 …<br>do<br>    list<br>done</p></blockquote><p>或者</p><blockquote><p>for name<br>do<br>    list<br>done<br>相当于<br>for name in $1 $2 …<br>do<br>list<br>done</p></blockquote><h3 id="seq"><a href="#seq" class="headerlink" title="seq"></a>seq</h3><p>用seq命令实现类似C语言中的for循环</p><blockquote><p>for i in `seq 1 254`<br>do<br>ping -c 1 -w 1 192.168.0.$i<br>done</p></blockquote><p>人机交互时可直接写为一行：<br>for i in `seq1254`;do ping -c1 -w1 192.168.0.$i;done</p><h3 id="break-continue-exit"><a href="#break-continue-exit" class="headerlink" title="break,continue,exit"></a>break,continue,exit</h3><ul><li><p>内部命令break<br>循环结构for/while中使用，中止循环<br>例：break<br>  break2         # 中止两重循环</p></li><li><p>内部命令continue<br>在循环结构for/while中使用，提前结束本轮循环</p></li><li><p>内部命令exit<br>结束脚本程序的执行，退出。exit的参数为该进程执行结束后的返回码<br>例：exit 1</p></li></ul><h1 id="shell流程控制：函数"><a href="#shell流程控制：函数" class="headerlink" title="shell流程控制：函数"></a>shell流程控制：函数</h1><p>语法：<br>name() { list; }</p><ul><li>调用函数时函数名后附加上0到多个参数</li><li>在函数体内部以$1,$2,…或$*,$@方式引用参数</li><li>函数体内用内命令return使函数有返回码，0表示成功，非零表示失败</li></ul><h1 id="进程的基本概念"><a href="#进程的基本概念" class="headerlink" title="进程的基本概念"></a>进程的基本概念</h1><h2 id="进程的组成和逻辑内存"><a href="#进程的组成和逻辑内存" class="headerlink" title="进程的组成和逻辑内存"></a>进程的组成和逻辑内存</h2><h3 id="进程与程序"><a href="#进程与程序" class="headerlink" title="进程与程序"></a>进程与程序</h3><p>程序：存放在磁盘上的一个可执行文件<br>进程：程序的一次执行，包括指令段、用户数据段和系统数据段的执行环境<br>进程和程序的关系：程序用于初始化进程的指令段和用户数据段，之后两者无联系</p><h3 id="进程的组成部分"><a href="#进程的组成部分" class="headerlink" title="进程的组成部分"></a>进程的组成部分</h3><h4 id="指令段（Text）"><a href="#指令段（Text）" class="headerlink" title="指令段（Text）"></a>指令段（Text）</h4><ul><li>程序的CPU指令代码，包括：主程序和子程序编译后的CPU指令代码，以及调用的库函数代码</li><li>指令段的大小固定不变，只读</li></ul><h4 id="用户数据段"><a href="#用户数据段" class="headerlink" title="用户数据段"></a>用户数据段</h4><ul><li>全局变量，静态变量，字符串常数</li><li>允许数据段增长和缩小，实现内存的动态分配</li></ul><h4 id="用户栈段"><a href="#用户栈段" class="headerlink" title="用户栈段"></a>用户栈段</h4><ul><li>程序执行所需要的栈空间，实现函数的调用<ul><li>保存子程序返回地址</li><li>在函数和被调函数之间传递参数</li><li>函数体内部定义的变量（静态变量除外）</li></ul></li><li>main函数得到的命令行参数以及环境参数<ul><li>存放在栈的最底部</li><li>main函数运行之前，这些部分就已经被系统初始化</li></ul></li><li>栈段的动态增长与增长限制</li></ul><h4 id="系统数据段"><a href="#系统数据段" class="headerlink" title="系统数据段"></a>系统数据段</h4><ul><li>上述三部分在进程私有的独立地逻辑地址空间内（CPU用户态访问）</li><li>系统数据段是内核内的数据，每个进程对应一套<ul><li>包括页表和进程控制块PCB</li></ul></li></ul><h4 id="size命令观察可执行程序的段大小"><a href="#size命令观察可执行程序的段大小" class="headerlink" title="size命令观察可执行程序的段大小"></a>size命令观察可执行程序的段大小</h4><blockquote><p>size filename-list  # 列出程序或目标文件的相应段大小</p></blockquote><p><img src="/2023/12/19/linux-qi-mo-fu-xi/exampleOfSize.png" alt="|500"></p><h4 id="进程虚拟地址空间的布局"><a href="#进程虚拟地址空间的布局" class="headerlink" title="进程虚拟地址空间的布局"></a>进程虚拟地址空间的布局</h4><p><img src="/2023/12/19/linux-qi-mo-fu-xi/virtualAddressOfProcess.png" alt="|334"></p><h4 id="逻辑地址和物理地址间的转换"><a href="#逻辑地址和物理地址间的转换" class="headerlink" title="逻辑地址和物理地址间的转换"></a>逻辑地址和物理地址间的转换</h4><p>略，操作系统课程中有详细内容</p><h2 id="进程的执行状态"><a href="#进程的执行状态" class="headerlink" title="进程的执行状态"></a>进程的执行状态</h2><h3 id="进程的系统数据"><a href="#进程的系统数据" class="headerlink" title="进程的系统数据"></a>进程的系统数据</h3><p>在UNIX内核中，含有进程的属性，包括：</p><ul><li>页表</li><li>进程状态，优先级信息</li><li>核心堆栈</li><li>当前目录（记录了当前目录的i-节点），根目录</li><li>打开的文件描述符表</li><li>umask值</li><li>进程PID，PPID</li><li>进程主的实际UID/GID，有效UID/GID</li><li>进程组组号</li></ul><h3 id="传统UNIX的user-proc结构"><a href="#传统UNIX的user-proc结构" class="headerlink" title="传统UNIX的user+proc结构"></a>传统UNIX的user+proc结构</h3><p>进程PCB被分为user结构和proc结构两部分</p><ul><li>user结构（约5000字节）,&lt;sys/user.h&gt;<ul><li><strong>进程运行时才需要的数据在user结构</strong></li><li>核心态堆栈占用了较多空间</li></ul></li><li>proc结构（约300字节）,&lt;sys/proc.h&gt;<ul><li><strong>进程不运行时也需要的管理信息存于proc</strong></li></ul></li><li>用户程序不能直接存取和修改进程的系统数据</li><li>系统调用可用来访问或修改这些属性<ul><li>chdir,umask,open,close,setpgrp,getpid,getppid</li></ul></li></ul><h3 id="进程的基本状态"><a href="#进程的基本状态" class="headerlink" title="进程的基本状态"></a>进程的基本状态</h3><p>从用户的角度看，进程创建后，主要有运行状态和等待状态（操作系统角度来看，有新建、就绪、运行、等待、终止五个状态）</p><h3 id="进程的调度"><a href="#进程的调度" class="headerlink" title="进程的调度"></a>进程的调度</h3><ul><li>内核将可运行进程按优先级调度，高优先级进程优先；</li><li>进程的优先级总在不停的发生变化；</li><li>处于睡眠状态的进程一旦被叫醒后，被赋以高优先级，以保证人机会话操作和其它外设的响应速度；</li><li>用户程序用nice()系统调用有限地调整进程的优先级。</li></ul><h3 id="系统调用的过程示例"><a href="#系统调用的过程示例" class="headerlink" title="系统调用的过程示例"></a>系统调用的过程示例</h3><p><img src="/2023/12/19/linux-qi-mo-fu-xi/systemCall.png" alt="|475"></p><h2 id="进程的执行时间"><a href="#进程的执行时间" class="headerlink" title="进程的执行时间"></a>进程的执行时间</h2><p>进程执行时间包括睡眠时间，CPU时间（用户时间和系统时间）</p><h3 id="time"><a href="#time" class="headerlink" title="time"></a>time</h3><p><img src="/2023/12/19/linux-qi-mo-fu-xi/time.png" alt="|500"></p><h3 id="系统调用times"><a href="#系统调用times" class="headerlink" title="系统调用times"></a>系统调用times</h3><p><img src="/2023/12/19/linux-qi-mo-fu-xi/times.png" alt="|500"></p><h3 id="与时间有关的函数"><a href="#与时间有关的函数" class="headerlink" title="与时间有关的函数"></a>与时间有关的函数</h3><p>标准函数库中time()：获得当前时间坐标</p><ul><li>坐标0为1970年1月1日零点，单位：秒</li><li>t=time(0);和time(&amp;t);都会使t值为当前时间坐标</li></ul><p>函数gettimeofday()</p><ul><li>获得当前时间坐标，坐标的0是1970年1月1日零点</li><li>可以精确到微秒μs(10-6秒)</li></ul><p>mktime</p><ul><li>将年月日时分秒转换为坐标值</li></ul><p>ctime()和asctime()，localtime()</p><ul><li>坐标值和年月日时分秒转换</li></ul><p>strftime</p><ul><li>定制表示日期和时间的字符串（包括年月日时分秒等）</li></ul><h3 id="忙等待"><a href="#忙等待" class="headerlink" title="忙等待"></a>忙等待</h3><p>在忙等待中，一个进程或线程反复检查某个条件是否满足，而不进行其他操作或改变状态。多任务系统中”忙等待“的程序是不可取的。</p><h1 id="进程的创建和重定向"><a href="#进程的创建和重定向" class="headerlink" title="进程的创建和重定向"></a>进程的创建和重定向</h1><h2 id="进程的生命周期"><a href="#进程的生命周期" class="headerlink" title="进程的生命周期"></a>进程的生命周期</h2><p>回顾：<a href="Linux%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0.md#%E8%BF%9B%E7%A8%8B%E7%9A%84%E7%B3%BB%E7%BB%9F%E6%95%B0%E6%8D%AE">进程的系统数据</a></p><h3 id="fork：创建新进程"><a href="#fork：创建新进程" class="headerlink" title="fork：创建新进程"></a>fork：创建新进程</h3><p>功能：</p><ul><li>fork系统调用可以创建新进程，原先的进程称作父进程，新创建进程被称作子进程</li><li>完全复制：新进程的指令，用户数据段，堆栈段</li><li>部分复制：系统数据段<br>fork返回值：</li><li>父进程返回值&gt;0，是进程的PID</li><li>子进程返回值=0，失败时返回-1<br>内核实现：</li><li>创建新的PCB，复制父进程环境（包括PCB和内存资源）给子进程</li><li>父子进程可以共享程序和数据（例如：copy-on-write技术）</li></ul><h3 id="命令行参数和环境参数"><a href="#命令行参数和环境参数" class="headerlink" title="命令行参数和环境参数"></a>命令行参数和环境参数</h3><p>命令行参数和环境参数是位于进程堆栈底部的初始化数据。</p><ul><li>访问命令行参数的方法（argc，argv）</li><li>访问环境参数的三种方法<ul><li>通过C库定义的外部变量environ</li><li>main函数的第三个参数</li><li>getenv库函数调用</li></ul></li></ul><h3 id="exec系统调用"><a href="#exec系统调用" class="headerlink" title="exec系统调用"></a>exec系统调用</h3><p>功能：</p><ul><li><strong>用一个指定的程序文件，重新初始化一个进程</strong></li><li>可指定新的命令行参数和环境参数（初始化堆栈底部）</li><li>exec不创建新进程，只是将当前进程重新初始化了指令段和用户数据段，堆栈段以及CPU的PC指针<br>6种格式exec系统调用：<br>exec前缀，后跟一至两个字母（l-list,  v-vector，e-env,  p-path）</li><li>l与v：指定命令行参数的两种方式，l以表的形式，v要事先组织成一个指针数组</li><li>e：需要指定envp来初始化进程</li><li>p：使用环境变量PATH查找可执行文件<br><img src="/2023/12/19/linux-qi-mo-fu-xi/exec.png" alt="|500"></li></ul><h3 id="wait系统调用"><a href="#wait系统调用" class="headerlink" title="wait系统调用"></a>wait系统调用</h3><p>功能：</p><ul><li>等待进程的子进程终止（”收尸“）</li><li>如果已经有子进程终止，则立即返回<br>函数返回值为已终止的子进程PID</li></ul><h3 id="僵尸进程（zombie或defunct）"><a href="#僵尸进程（zombie或defunct）" class="headerlink" title="僵尸进程（zombie或defunct）"></a>僵尸进程（zombie或defunct）</h3><p>当一个进程已经完成执行（即已经结束），但其父进程尚未通过调用<code>wait()</code>系统调用来读取其终止状态时，这个已结束的进程就变成了僵尸进程。</p><ul><li>系统已经释放了进程占用的包括内存在内的系统资源，但仍在内核中保留进程的部分数据结构，记录进程的终止状态，等待父进程来”收尸“。</li><li>僵尸进程占用资源很少，仅占用内核进程表资源，过多的僵尸进程会导致系统有限数目的进程表被用光。</li></ul><h2 id="自编shell：xsh0"><a href="#自编shell：xsh0" class="headerlink" title="自编shell：xsh0"></a>自编shell：xsh0</h2><h3 id="字符串库函数strtok"><a href="#字符串库函数strtok" class="headerlink" title="字符串库函数strtok"></a>字符串库函数strtok</h3><p>char *strtok(char *str,char *tokens)<br>功能:返回第一个单词的首字节指针<br>示例：<br><img src="/2023/12/19/linux-qi-mo-fu-xi/strtok.png" alt="|400"></p><ul><li>空格、制表符、换行都作为字符串结束标识</li><li>NULL指示继续分割</li><li>无从分割则返回NULL</li></ul><h3 id="最简单的shell：xsh0"><a href="#最简单的shell：xsh0" class="headerlink" title="最简单的shell：xsh0"></a>最简单的shell：xsh0</h3><p><img src="/2023/12/19/linux-qi-mo-fu-xi/xsh0.png" alt="|550"><br><img src="/2023/12/19/linux-qi-mo-fu-xi/xsh0_2.png" alt="|500"></p><ul><li>exit是唯一的一个内部命令</li><li>execvp（argv[0], argv）将子进程重新初始化为argv[0]指定的新程序，所以只有新程序执行失败才会输出”Bad command“</li></ul><h3 id="库函数system：运行一个命令"><a href="#库函数system：运行一个命令" class="headerlink" title="库函数system：运行一个命令"></a>库函数system：运行一个命令</h3><p>int system(char *string);</p><ul><li>执行用字符串传递的shell命令，可使用管道符和重定向</li><li>库函数system()是利用系统调用fork，exec，wait实现的<br>例：<code>system("ls -l")</code> 会在程序运行时执行 UNIX/LINUX 的 <code>ls -l</code> 命令，列出当前目录中的文件和目录的详细列表。</li></ul><h2 id="进程与文件描述符"><a href="#进程与文件描述符" class="headerlink" title="进程与文件描述符"></a>进程与文件描述符</h2><h3 id="活动文件目录AFD"><a href="#活动文件目录AFD" class="headerlink" title="活动文件目录AFD"></a>活动文件目录AFD</h3><h4 id="磁盘文件目录（分两级）"><a href="#磁盘文件目录（分两级）" class="headerlink" title="磁盘文件目录（分两级）"></a>磁盘文件目录（分两级）</h4><p>磁盘文件目录是文件系统中用于组织和管理存储在磁盘上的文件和文件夹的结构。它提供了一种方式，让操作系统能够有效地定位、管理和维护磁盘上的文件。</p><ul><li>文件名，i节点<br><strong>i节点是 Unix 文件系统中的一种数据结构，用于存储文件或目录的元数据</strong>。每个文件或目录都有一个与之关联的 i节点，其中包含了如下信息：文件类型、权限、所有者、大小、时间戳、链接计数、数据块指针。</li></ul><h4 id="活动文件目录（分三级）"><a href="#活动文件目录（分三级）" class="headerlink" title="活动文件目录（分三级）"></a>活动文件目录（分三级）</h4><ul><li><strong>文件描述符表FDT</strong>：每进程一张，PCB的user结构中整型数组u_ofile记录进程打开的文件，文件描述符fd是u_ofile数组的下标。</li><li><strong>系统文件表SFT</strong>：整个操作系统维护一张，用于存储所有打开文件的信息。对于每个打开的文件，存储如下信息：文件的当前偏移量（文件读写操作的当前位置）、文件打开模式、文件的引用计数、指向相关i节点的指针。</li><li><strong>活动i节点表</strong>：整个操作系统维护一张，内存中inode表是外存中inode的缓冲，有个专用的引用计数<br><img src="/2023/12/19/linux-qi-mo-fu-xi/AFD.png" alt="|325"><br>ps：图中存在一个细节问题：文件描述符0、1、2分别代表标准输入、标准输出、标准错误，不是普通的文件。</li></ul><h3 id="文件描述符的继承与关闭"><a href="#文件描述符的继承与关闭" class="headerlink" title="文件描述符的继承与关闭"></a>文件描述符的继承与关闭</h3><ul><li>fork创建的子进程继承父进程的文件描述符表</li><li>父进程在fork前打开的文件，父子进程有相同的文件偏移<br><img src="/2023/12/19/linux-qi-mo-fu-xi/SFTafterFork.png" alt="|500"></li></ul><h3 id="close-on-exec标志"><a href="#close-on-exec标志" class="headerlink" title="close-on-exec标志"></a>close-on-exec标志</h3><p><img src="/2023/12/19/linux-qi-mo-fu-xi/close-on-exec.png" alt="|550"></p><h2 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h2><h3 id="文件描述符的复制"><a href="#文件描述符的复制" class="headerlink" title="文件描述符的复制"></a>文件描述符的复制</h3><p>系统调用</p><ul><li><code>int dup2(int fd1, int fd2);</code><br>功能</li><li>复制文件描述符fd1到fd2</li><li>fd2可以是空闲的文件描述符，如果fd2是已打开文件，则关闭已打开文件<br><img src="/2023/12/19/linux-qi-mo-fu-xi/dup2.png" alt="|525"></li></ul><h3 id="xsh1：输入输出重定向"><a href="#xsh1：输入输出重定向" class="headerlink" title="xsh1：输入输出重定向"></a>xsh1：输入输出重定向</h3><p><img src="/2023/12/19/linux-qi-mo-fu-xi/xsh1.png" alt="|575"><br><img src="/2023/12/19/linux-qi-mo-fu-xi/xsh1-2.png" alt="|625"><br><img src="/2023/12/19/linux-qi-mo-fu-xi/xsh1-3.png" alt="|500"></p><h1 id="管道与信号"><a href="#管道与信号" class="headerlink" title="管道与信号"></a>管道与信号</h1><h2 id="管道-1"><a href="#管道-1" class="headerlink" title="管道"></a>管道</h2><h4 id="创建管道"><a href="#创建管道" class="headerlink" title="创建管道"></a>创建管道</h4><p><code>int pipe(int pfd[2]);</code><br><code>int pipe(int *pfd);</code><br><code>int pipe(int pfd[])</code></p><ul><li>创建一个管道，pfd[0]和pfd[1]分别为管道两端的文件描述字，pfd[0]用于读，pfd[1]用于写</li></ul><h4 id="管道写"><a href="#管道写" class="headerlink" title="管道写"></a>管道写</h4><p><code>ret = write(pfd[1],buf,n)</code></p><ul><li>若管道已满，则被阻塞，直到管道另一端read将已进入管道的数据取走为止</li><li>管道容量：某一有限值，如8192字节，与操作系统的实现相关</li></ul><h4 id="管道读"><a href="#管道读" class="headerlink" title="管道读"></a>管道读</h4><p><code>ret = read(pfd[0],buf,n)</code></p><ul><li>若管道写端已关闭，则返回0</li><li>若管道为空，且写端文件描述字未关闭，则被阻塞</li><li>若管道不为空(设管道中实际有m个字节)<br>  n≥m，则读m个；<br>  如果n＜m则读取n个</li><li>实际读取的数目作为read的返回值。</li><li>注意：管道是无记录边界的字节流通信</li></ul>]]></content>
      
      
      <categories>
          
          <category> 期末复习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大数据技术基础小测二</title>
      <link href="/2023/11/28/da-shu-ju-ji-zhu-ji-chu-xiao-ce-er/"/>
      <url>/2023/11/28/da-shu-ju-ji-zhu-ji-chu-xiao-ce-er/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ol><li>Kafka在架构和应用定位上不包括：<br>A、存储的数据是多副本的，能够做到数据不丢<br>B、可将数据暂存一段时间(默认是一周)，供消费者重复读取，提供了类似于“发布订阅模式”的功能<br>C、提供memory channel和file channel，数据有可能丢失<br>D、生产者和消费者均需要用户使用API编写，仅提供了少量的与外部系统集成的组件&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [单选题]</li></ol><blockquote><p>解析：<br>A选项，<strong>Kafka通过在多个服务器上复制数据来确保数据的高可用性和持久性</strong>。这意味着即使某个服务器失败，Kafka也能保证数据不会丢失。<br>B选项，<strong>Kafka允许在服务器上暂存数据一段时间</strong>，这个时间是可配置的（默认情况下大约是一周）。这样，消费者可以在这段时间内重复读取数据。<strong>Kafka的这种功能支持发布订阅模式</strong>，其中生产者发布消息，而消费者订阅并读取这些消息。<br>C选项，Kafka本身不提供memory channel和file channel这样的概念。这些是Apache Flume的组成部分，另一个不同的数据集成工具。在Kafka中，数据的持久性和可靠性是通过复制和日志存储来实现的，并不直接依赖于内存或文件系统。<br>D选项，<strong>Kafka要求开发者使用其API来实现生产者和消费者</strong>。然而，<strong>Kafka提供了丰富的与外部系统集成的组件和连接器</strong>，例如Kafka Connect，这使得与外部系统的集成变得更加容易和灵活。答案选C</p></blockquote><ol start="2"><li>在Kafka中，每条数据被称为“消息”，每条消息表示为一个三元组，该三元组不包括：<br>A、topic B、key C、message D、value&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [单选题]</li></ol><blockquote><p>解析：在Kafka中，消息是通信的基本单位。每条消息都有三个主要组成部分：<br>A. <strong>Topic</strong>（主题）：标识消息所属的类别或主题，允许消息被发布到特定的类别。<br>B. <strong>Key</strong>（键）：是一个可选字段，用于标识消息的唯一性，帮助在分布式系统中将消息路由到特定的分区。<br>C. <strong>Message</strong>（值）：包含实际传输的数据，即消息的内容。<br>所以，在这个三元组中，不包括的部分是 D、value。</p></blockquote><ol start="3"><li>Producer负责将数据写入Broker，通常由用户根据实际需要编写，一般不包括以下哪个步骤：<br>A、创建配置对象ProducerConfig<br>B、定义分类区SimplePartitioner<br>C、创建Producer对象，并发送数据<br>D、创建配置对象ConsumerConfig&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [单选题]</li></ol><blockquote><p>解析：Producer负责将数据写入Broker，通常由用户根据实际需要编写。可根据以下三个步骤进行：<strong>创建配置对象ProducerConfig；定义分类区SimplePartitioner；创建Producer对象，并发送数据。</strong> D选项属于Consumer程序的步骤。</p></blockquote><ol start="4"><li>ZooKeeper内部存储着有关HBase的重要元信息和状态信息，担任着HMaster与RegionServer之间的服务协调角色，具体职责不包括：<br>A、保证任何时候，集群中可以存在多个HMaster；<br>B、存储所有Region的寻址入口；<br>C、实时监控RegionServer的上线和下线信息，并实时通知给HMaster；<br>D、存储HBase的schema和table元数据&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [单选题]</li></ol><blockquote><p>解析：<br>A选项，在HBase中，<strong>通常只有一个活动的HMaster</strong>，它负责协调和管理整个HBase集群。ZooKeeper确保集群中只有一个活跃的HMaster，并在HMaster失败时协助选举新的HMaster。因此，ZooKeeper不是用来保证多个HMaster同时存在的。<br>B选项，<strong>ZooKeeper在HBase中用于存储关于Region服务器的信息</strong>，包括它们的地址和状态，这样客户端和HMaster可以知道如何与这些Region服务器通信。<br>C选项，<strong>ZooKeeper监控着RegionServer的状态</strong>，包括它们的上线和下线。当RegionServer的状态发生变化时，ZooKeeper会及时通知HMaster，从而允许HMaster做出相应的调整。<br>D选项。承担了许多协调和管理的角色，<strong>负责存储HBase的schema和表的元数据</strong>。</p></blockquote><ol start="5"><li>根据接收者可能收到的重复消息的次数，将消息传递语义分为三种模式，其中，发送者发送后立即返回，不关心接收者是否收到这种模式是：<br>A、at least once B、at most once C、exactly once&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [单选题]</li></ol><p>&nbsp;</p><blockquote><p>解析：<br><strong>at most once</strong>：发送者将消息发送给消费者后，立刻返回，不会关心消费者是否成功收到消息。 这种情况下，消息可能被消费者成功接收，也可能丢失；<br><strong>at least once</strong>：发送者将消息发送给消费者后，需等待确认，如果未收到确认消息，则会重发消息。这种语义能保证消费者收到消息，但可能会收到多次；<br><strong>exactly once</strong>：消费者会且只会处理一次同一条消息。</p></blockquote><ol start="6"><li>下列关于网络数据采集说法错误的是<br>A.网络数据采集是指通过网络爬虫或网站公开API等方式从网站上获取数据信息，支持图片、音频、视频等文件或附件的采集，附件和正文可以自动关联<br>B.网络爬虫的常见抓取策略有宽度优先策略、反向链接策略、PartialPageRank策略、OPIC策略、大站优先策略等<br>C.单个抓取程序足以胜任大规模的分布式抓取系统，不需要多个抓取程序协同工作<br>D.Scrapy Engine作为Scrapy内部的主要组件构成，负责控制系统所有组件之间的数据流，并在发生某些操作时触发事件&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [单选题]</li></ol><blockquote><p>解析：一般来说，大规模的分布式抓取系统需要抓取整个互联网上数以亿计的网页，单个抓取程序难以胜任，往往需要多个抓取程序协同工作。</p></blockquote><ol start="7"><li>下列关于HDFS关键技术说法正确的是（ABD）<br>A. HDFS的数据块损坏容错性设计为：DataNode保存数据块时，会同时生成一个校验码。当存取数据块时，如果发现校验码不一致则认为该数据块已经损坏，NameNode会通过其他节点上的正常副本重构受损的数据块。<br>B. HDFS的副本放置策略与集群物理拓扑结构是直接相关的。<br>C. HDFS只提供了API方式，让用户管理集中式缓存系统中的文件和目录，可以根据需要将一个文件增加到缓存中，或从缓存中移除。<br>D. HDFS支持多种常用存储类型，包括：ARCHIVE、DISK、SSD、RAM_DISK。</li></ol><blockquote><p>解析：HDFS允许用户将一部分目录或文件缓存在off-heap内存中，以加速对这些数据的访问效率，该机制被称为集中式缓存管理。<strong>为了方便用户管理集中式缓存系统中的文件和目录，HDFS提供了API和命令行两种方式</strong>，可以根据需要将一个文件增加到缓存中，或从缓存中移除。</p></blockquote><ol start="8"><li>下列关于NoSQL说法错误的是（B）<br>A. NoSQL是非关系型数据库的统称，采用类似键-值、列族、文档等非关系模。<br>B. 关系型数据库是横向扩展的，NoSQL数据库是纵向扩展的。<br>C. NoSQL以块为单元操作数据，使用的是非结构化的查询语言。<br>D. NoSQL存储的格式都是key-value类型的，并且存储在内存中，非常容易存储，而且对于数据的一致性是弱要求。NoSQL无需SQL的解析，提高了读写性能。</li></ol><blockquote><p>解析：纵向扩展(scale-up)是指利用现有的存储系统，通过不断增加存储容量来满足数据增长的需求；横向扩展(scale-out)是指以网络互连的节点为单位扩大存储容量(集群)。<br><strong>关系系型数据库是纵向扩展</strong>，也就是说想要提高处理能力，要使用速度更快的计算机。<br><strong>Nosql数据库是横向扩展的</strong>，它的存储天然就是分布式的，可以通过给资源池添加更多的普通数据库服务器来分担负载。</p></blockquote><ol start="9"><li>RegionServer写流程的具体流程包括：<br>A、RegionServer收到写请求后，将写入的数据以追加的方式写入HDFS上的日志文件WAL；<br>B、扫描器查找缓存BlockCache，它内部缓存了最近读取过的数据<br>C、RegionServer将数据写入内存数据结构MemStore中，之后通知客户端数据写入成功；<br>D、当MemStore所占内存达到一定阈值后，RegionServer会将数据顺序刷新到HDFS中，保存成HFile格式的文件</li></ol><blockquote><p>解析：ACD<br>扫描器查找缓存BlockCache，它内部缓存了最近读取过的数据。这个选项似乎不是写流程的一部分，而是读流程的一部分，因此不包括在内</p></blockquote><ol start="10"><li>下列关于文件存储格式说法正确的是：<br>A.文件存储格式直接决定了数据存取效率以及被上层分布式计算集成的容易程度<br>B.常见的存储格式包括行式存储和列式存储两种：行式存储以文本格式Text File、key/value二进制存储格式Sequence File为典型代表；列式存储以ORC、Parquet和Carbon Data三种文件格式为代表<br>C.行存储和列存储的写入都是一次完成，性能较高<br>D.行存储将每行数据存储在一起，压缩比较低；列存储以列为单位存储数据，使得类型相同的数据存放在一起，对压缩算法友好，压缩比较高</li></ol><blockquote><p>解析：ABD<br>行存储和列存储的写入都是一次完成，性能较高。这是不准确的，因为写入性能的高低受多种因素影响，并不仅仅取决于存储格式。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据技术基础 </tag>
            
            <tag> 试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大数据技术基础小测一</title>
      <link href="/2023/11/28/da-shu-ju-ji-zhu-ji-chu-xiao-ce-yi/"/>
      <url>/2023/11/28/da-shu-ju-ji-zhu-ji-chu-xiao-ce-yi/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ol><li><p>当前大数据技术的基础是由( )首先提出的<br>A.&nbsp; 微软<br>B.&nbsp; 谷歌<br>C.  百度<br>D.  阿里巴巴</p><details><summary>查看答案</summary>解析： Google在大数据方面的技术，均是以发表论文的形式对外公开的，尽管其没有对外开源&gt;系统实现代码，但这些论文直接带动了大数据技术的发展，尤其为大数据开源技术的发展指明了方向。对外公开的技术包括GFS、BigTable、MapReduce、Chubby、Pregel等。</details></li><li><p>在数据度量中，1ZB是多大（ ）<br>A.  10^15<br>B.&nbsp;&nbsp;10^18<br>C.&nbsp;&nbsp;10^21<br>D.&nbsp;&nbsp;10^24</p><details><summary>查看答案</summary>解析：数据单位按照从小到大依次是TB,PB,EB,ZB,YB,分别是10^12,10^15,10^18,10^21,10^24</details></li><li><p>网页、视频、图片、用户行为日志属于哪种数据（ ）<br>A.  结构化数据<br>B.&nbsp;&nbsp;非结构化数据<br>C.&nbsp;&nbsp;都不是<br>D.&nbsp;&nbsp;都是</p><details><summary>查看答案</summary>解析：<b>非结构化数据</b>指数据结构不规则或不完整，没有预定义的数据模型，不方便用数据库二维逻辑表来表现的数据。如word、pdf、ppt及各种格式的图片、视频等。<b>结构化数据</b>指关系模型数据，即<b>以关系数据库表形式管理的数据</b>，结合到典型场景中更容易理解，比如企业ERP(Enterprise resource Planning)、OA(Office Automation)、HR(Human Resource)里的数据。 &nbsp;</details></li><li><p>下列不属于大数据的4V特征的是（ ）<br>A.  Volume（量大）<br>B.  Velocity（快速化）<br>C.  Variety（多样化）<br>D.  Value（价值密度高）</p><details><summary>查看答案</summary>解析：大数据具备价值密度低、商业特征高的特征。大数据的4V特征：量大（Volume） 多样化（Variety） 快速化（Velocity） 价值密度低（Value）</details></li><li><p>MapReduce,Spark属于哪种计算模式（ ）<br>A.  批处理计算<br>B.  流计算<br>C.&nbsp;&nbsp;图计算<br>D.&nbsp;&nbsp;查询分析计算</p><details><summary>查看答案</summary>解析：<b>批处理计算</b>是针对大规模数据的批处理，代表产品有MapReduce、Spark等；<b>流计算</b>是针对流数据的实时计算，代表产品有Storm、S4、Flume、Streams、Puma、Dstream、银河流数据处理平台等；<b>图计算</b>是针对大规模图结构数据的处理，代表产品有Pregel、GraphX、Giraph等；<b>查询分析计算</b>是针对大规模数据的存储管理和查询分析，代表产品有Dremel、Hive、Cassandra、 Impala等。</details></li><li><p>以下哪个不是大数据时代新兴的技术（ ）<br>A.  HBase<br>B.  Spark<br>C.  MySQL<br>D.  Hadoop</p><details><summary>查看答案</summary>解析：Hbase和Spark都属于大数据技术的重要组成部分，而MySQL并不适合大数据。</details></li><li><p>每种大数据产品都有特定的应用场景，以下哪个产品是用于批处理的（ ）：<br>A.  Storm<br>B.  MapReduce<br>C.  Pregel<br>D.  Dremel</p><details><summary>查看答案</summary>解析：批处理计算是针对大规模数据的批处理，代表产品有MapReduce、Spark等；</details></li><li><p>下列叙述不恰当的是（ ）：<br>A.  大数据时代可以分析更多数据，甚至可以处理和某个特别现象相关的全部数据，而不再依赖于随机采样。<br>B.  从对象角度看，大数据是大小超出典型数据库软件采集、储存、分析和管理等能力的数据集合。<br>C.  大数据时代，数据量极大，但纷繁复杂的数据是不可接受的，所以仍需追求精确性。<br>D.  批处理计算、流计算、图计算与查询分析计算是常见的四种大数据计算模式。</p><details><summary>查看答案</summary>解析：大数据时代追求效率而非精确：大数据时代，数据量极大，乐于接受数据的纷繁复杂，而不再追求精确性；</details></li><li><p>下面哪一项不属于Hadoop与Spark开源大数据技术栈的层级（ ）<br>A.  数据收集<br>B.  数据存储<br>C.  计算引擎<br>D.  数据清洗</p><details><summary>查看答案</summary>解析：随着大数据开源技术的快速发展，目前开源社区已经积累了比较完整的大数据技术栈，应用最广泛的是以Hadoop与Spark为核心的生态系统，整个大数据技术栈涉及<b>数据收集、数据存储、资源管理与服务协调、计算引擎和数据分析这五个层级</b>。</details></li><li><p>下面哪一项不属于Hadoop与Spark开源大数据技术栈的数据存储层的技术（ ）<br>A.  HDFS<br>B.  Kudu<br>C.  ZooKeeper<br>D.  HBase</p><details><summary>查看答案</summary>解析：数据存储层主要由分布式文件系统（面向文件的存储）和分布式数据库（面向行/列的存储）构成。</details></li></ol><ul><li>HDFS：Hadoop分布式文件系统，具有良好的扩展性与容错性等优点</li><li>HBase：构建在HDFS之上的分布式数据库，允许用户存储结构化与半结构化的数据</li><li>Kudu：分布式列式存储数据库，允许用户存储结构化数据，支持行无限扩展以及数据随机查找与更新</li></ul>]]></content>
      
      
      <categories>
          
          <category> 试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据技术基础 </tag>
            
            <tag> 试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统笔记</title>
      <link href="/2023/11/25/cao-zuo-xi-tong-bi-ji/"/>
      <url>/2023/11/25/cao-zuo-xi-tong-bi-ji/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="第八章-内存管理"><a href="#第八章-内存管理" class="headerlink" title="第八章 内存管理"></a>第八章 内存管理</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><ul><li>CPU能直接访问的存储器：<strong>寄存器和内存</strong>。</li><li>程序必须（从磁盘）<strong>装到内存</strong>中才能执行。</li><li>在处理地址空间和内存管理方面，程序员主要关注<strong>逻辑地址</strong>，操作系统主要关注<strong>内存大小</strong>、<strong>地址绑定</strong>以及<strong>内存保护</strong>。</li><li>寄存器通常在一个CPU时钟周期内（或更少）就可以完成访问，而内存通常需要多个CPU时钟周期访问。当CPU已读入指令但尚未从内存中读取完数据时，会暂停导致CPU利用率降低。为解决这个问题，在内存和CPU之间引入了<strong>高速缓存Cache</strong>（将<strong>需要频繁读取的数据从内存暂存到Cache中</strong>），通常位于CPU上。</li><li><strong>内存保护</strong>需要保证执行正确的操作。</li></ul><h2 id="基址寄存器和限址寄存器"><a href="#基址寄存器和限址寄存器" class="headerlink" title="基址寄存器和限址寄存器"></a>基址寄存器和限址寄存器</h2><ol><li><strong>基址寄存器</strong>（Base Register）：存储基址，表示一个可用内存块的<strong>起始地址</strong>。</li><li><strong>限址寄存器</strong>（Limit Register）：存储限址，表示基址寄存器定义的<strong>内存块大小</strong>。</li></ol><p><img src="/2023/11/25/cao-zuo-xi-tong-bi-ji/base&amp;limit.png" alt="|334"></p><h2 id="地址绑定"><a href="#地址绑定" class="headerlink" title="地址绑定"></a>地址绑定</h2><p><strong>地址绑定</strong>：在程序的执行过程中，将程序中的逻辑地址（或虚拟地址）映射到实际的物理地址的过程。这个过程可以在编译时、加载时或运行时发生。</p><p>一个程序运行的流程：<strong>编译（编译成机器码）–&gt;链接（链接外部模块）–&gt;加载（加载进内存）–&gt;执行</strong>。</p><h3 id="地址绑定的时机"><a href="#地址绑定的时机" class="headerlink" title="地址绑定的时机"></a>地址绑定的时机</h3><ul><li><strong>编译时</strong>绑定：若编译时已知进程在内存中驻留的地址，即可生成绝对代码。如果未来地址发送变化，程序需要<strong>重新编译</strong>。（<strong>静态重定位，不需要硬件支持</strong>）</li><li><strong>加载时</strong>绑定：编译时生成可重定位代码。加载时再进行绑定，此时若内存地址发生变化，只需要<strong>重新加载程序</strong>。（<strong>静态重定位，不需要硬件支持</strong>）</li><li><strong>运行时</strong>绑定：如果一个进程在运行时可从一个内存段移到另一个内存段，那么绑定将延迟到运行时进行。如果要改变内存地址，只需要改变基址寄存器的值即可。（<strong>动态重定位，需要硬件支持，如基址寄存器、限址寄存器和MMU，为大多数操作系统采用</strong>）</li></ul><h2 id="逻辑地址vs-物理地址"><a href="#逻辑地址vs-物理地址" class="headerlink" title="逻辑地址vs.物理地址"></a>逻辑地址vs.物理地址</h2><ol><li>逻辑地址</li></ol><ul><li>程序运行时由CPU产生的<strong>虚拟地址</strong>。</li><li>CPU利用逻辑地址访问内存中的物理地址并获取数据。</li><li>CPU产生的逻辑地址集合被称为<strong>逻辑地址空间</strong>。</li></ul><ol start="2"><li>物理地址</li></ol><ul><li>内存中数据的<strong>实际地址</strong>，由<strong>内存管理单元</strong>（MMU）计算得出。</li><li>物理地址对用户程序<strong>不可见</strong>。</li><li>物理地址的集合被称为<strong>物理地址空间</strong>。</li></ul><h2 id="内存管理单元（MMU）"><a href="#内存管理单元（MMU）" class="headerlink" title="内存管理单元（MMU）"></a>内存管理单元（MMU）</h2><ul><li>完成从逻辑地址到物理地址的映射。</li><li>逻辑地址 + 重定位寄存器中的值 = 物理地址。</li></ul><p><img src="/2023/11/25/cao-zuo-xi-tong-bi-ji/MMU.png" alt="|400"></p><h2 id="动态加载和动态链接"><a href="#动态加载和动态链接" class="headerlink" title="动态加载和动态链接"></a>动态加载和动态链接</h2><p>一个程序运行的流程：<strong>编译（编译成机器码）–&gt;链接（链接外部模块）–&gt;加载（加载进内存）–&gt;执行</strong>。但链接和加载有时也可以在执行时动态进行。</p><p><img src="/2023/11/25/cao-zuo-xi-tong-bi-ji/link&amp;load.png" alt="|500"></p><ul><li>动态链接（运行时链接）：将链接的过程推迟到程序实际执行的时候，利用<strong>存根</strong>（stub）定位内存中的库历程并执行，允许多个程序共享相同的库(被称为<strong>共享库</strong>)，减少了重复的代码和内存占用。需要操作系统的支持。</li><li>动态加载（运行时加载）：将不常用的代码（例如用于异常处理的代码）写入到模块程序中，只有当需要时才会加载进入内存。<strong>提高了内存空间利用率</strong>。不需要系统提供特别的支持，通常是程序员实现。例子：<strong>Windows操作系统的各种DLL库</strong>。</li></ul><h2 id="交换（Swapping）"><a href="#交换（Swapping）" class="headerlink" title="交换（Swapping）"></a>交换（Swapping）</h2><p>一个进程可以<strong>暂时</strong>从内存中交换到<strong>备份区</strong>，之后再被换回内存中继续执行。允许操作系统更有效地利用有限的物理内存资源，类似于进程调度中的<strong>中期调度</strong>。</p><p><img src="/2023/11/25/cao-zuo-xi-tong-bi-ji/Swapping.png" alt="|375"></p><ul><li><strong>备份区</strong>：一个足够大的<strong>可以容纳所有用户内存映像拷贝的快速磁盘</strong>，提供对这些内存映像的直接访问。</li><li><strong>换入，换出</strong>（Roll out，roll in）：换出低优先级的进程，以装入执行高优先级的进程。</li><li>交换时间的<strong>主要部分是传输时间</strong>。</li><li>系统维护一个<strong>已准备运行的进程队列</strong>，这些进程在磁盘上有内存映像。</li></ul><h2 id="连续内存分配"><a href="#连续内存分配" class="headerlink" title="连续内存分配"></a>连续内存分配</h2><h3 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h3><p>内存通常分为两个部分：</p><ul><li><strong>操作系统和中断向量</strong>通常放在<strong>低内存</strong>中。</li><li><strong>用户进程</strong>放在<strong>高内存</strong>中。</li></ul><p>再分配寄存器用于<strong>防止用户进程相互越界访问</strong>，并且<strong>避免它们修改操作系统</strong>的代码和数据。</p><p><img src="/2023/11/25/cao-zuo-xi-tong-bi-ji/addressProtection.png" alt="|400"></p><ul><li><strong>基址寄存器</strong>存储物理地址的最小值。</li><li><strong>限址寄存器</strong>存储逻辑地址的范围——所有逻辑地址都要比这个值小。</li><li><strong>MMU</strong>实现逻辑地址的动态映射。</li></ul><h3 id="多区分配"><a href="#多区分配" class="headerlink" title="多区分配"></a>多区分配</h3><ul><li><strong>空闲块（hole）</strong>——可用的内存块。</li><li>当一个进程到达时，从足<strong>够容纳该进程的空闲块</strong>中分配内存。</li><li>操作系统维护有关<strong>已分配分区和空闲分区</strong>的信息。</li></ul><p><img src="/2023/11/25/cao-zuo-xi-tong-bi-ji/Contiguous%20Allocation.png" alt="|550"></p><p>分配策略：</p><ul><li><strong>首次适应</strong>：分配首个足够大的孔。</li><li><strong>最优适应</strong>：分配最小的足够大的孔。</li><li><strong>最差适应</strong>：分配最大的足够大的孔。<br>在速度和空间利用率上，首次适应和最优适应要优于最差适应。</li></ul><h2 id="碎片"><a href="#碎片" class="headerlink" title="碎片"></a>碎片</h2><ul><li><strong>外部碎片</strong>：全部的可用空间可以满足一个进程的请求但<strong>不连续</strong>。</li><li><strong>内部碎片</strong>：<strong>分配给进程的内存大于进程申请的内存</strong>，造成内存浪费。</li></ul><p>通过<strong>压缩</strong>（compaction）可以减少外部碎片：</p><ul><li>重新排列内存内容，将所有的空闲内存拼成一个大的空闲块。</li><li>需要满足动态重定位，且在执行时才能发生。</li></ul><h2 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><ul><li><p>把<strong>物理内存</strong>分为等大小（2的幂次）的块，叫做<strong>帧或页帧</strong>。</p></li><li><p>把<strong>逻辑内存</strong>分为等大小的块，叫做<strong>页或页面</strong>。</p></li><li><p>当执行一个<strong>n页</strong>的进程时，需要找到<strong>n个空闲帧</strong>加载程序。</p></li><li><p>系统通过<strong>帧表</strong>保留所有的空闲帧，通过<strong>页表</strong>实现逻辑内存到物理内存的映射。</p></li><li><p>每个进程都拥有一个页表，存放着自己的<strong>逻辑地址空间（页）与物理地址空间（帧）的映射</strong>。</p></li><li><p>分页使分页内存完全独立于物理内存，<strong>解决了外部碎片</strong>（内存和进程都被分成碎片，内存碎片可以被利用而不是浪费），<strong>但仍有内部碎片</strong>。</p></li></ul><h3 id="地址转换机制"><a href="#地址转换机制" class="headerlink" title="地址转换机制"></a>地址转换机制</h3><ul><li>逻辑地址表示为：<strong>页码</strong>（page number）+<strong>页偏移</strong>（page offset）。</li><li>页码：页表的索引，通过页码在页表中找到对应的帧号。</li><li>页偏移：数据在页内的偏移值。</li></ul><p><img src="/2023/11/25/cao-zuo-xi-tong-bi-ji/pageNumberOffset.png"><br>逻辑地址空间 $2^m$     页大小$2^n$</p><p><img src="/2023/11/25/cao-zuo-xi-tong-bi-ji/Paging%20Hardware.png"></p><ul><li>在页表中根据页号找到帧号。</li><li>帧号和页内偏移构成物理地址。</li></ul><h3 id="页表"><a href="#页表" class="headerlink" title="页表"></a>页表</h3><h4 id="页表的实现"><a href="#页表的实现" class="headerlink" title="页表的实现"></a>页表的实现</h4><ul><li>页表存放在内存中，<strong>页表基地址寄存器</strong>（PTBR）指向页表的基地址，<strong>页表限长寄存器</strong>（PTLR）表示页表的长度。</li><li>这种模式下<strong>每次数据/指令访问需要两次内存访问</strong>：先访问页表获取帧号，再访问数据/指令。使用<strong>转换表缓冲区</strong>（TLBs，也称联想寄存器）解决两次访问的问题：是<strong>高速硬件Cache</strong>，存储少数频繁访问的页表条目，访问几乎不需要额外开销。<ul><li>所需条目在TLB中，直接读取帧号，计算物理地址并访问。</li><li>所需条目不在TLB中：从内存中的页表读取帧号，并将页码和帧号存入TLB，若TLB已满则采用相应的替换策略。</li></ul></li></ul><p><img src="/2023/11/25/cao-zuo-xi-tong-bi-ji/PagingHardwareWithTLB.png" alt="|425"></p><h4 id="有效访问时间"><a href="#有效访问时间" class="headerlink" title="有效访问时间"></a>有效访问时间</h4><ul><li>关联查找时间：ε</li><li>假设内存访问时间是1ms</li><li>命中率：α<br><img src="/2023/11/25/cao-zuo-xi-tong-bi-ji/EATofTLB.png" alt="|475"></li></ul><h4 id="内存保护"><a href="#内存保护" class="headerlink" title="内存保护"></a>内存保护</h4><p>页表中的每一个表项都有一个有效-无效位。</p><ul><li>有效表示页面合法且在进程的逻辑地址空间内。</li><li>无效表示不在进程的逻辑地址空间内。</li></ul><p><img src="/2023/11/25/cao-zuo-xi-tong-bi-ji/Valid-InvalidBit.png" alt="|450"></p><h4 id="共享页"><a href="#共享页" class="headerlink" title="共享页"></a>共享页</h4><ul><li><strong>只读（可重入）代码</strong>的一份拷贝在多个进程之间共享。</li><li>共享代码必须出现在<strong>所有进程的逻辑空间中的相同位置</strong>。</li></ul><p><img src="/2023/11/25/cao-zuo-xi-tong-bi-ji/Shared%20Pages.png" alt="|400"></p><h4 id="页表的结构"><a href="#页表的结构" class="headerlink" title="页表的结构"></a>页表的结构</h4><h5 id="层次页表"><a href="#层次页表" class="headerlink" title="层次页表"></a>层次页表</h5><p>将页表再分页，使用时先利用外部页表的页码和外部页表的页偏移获取内部页表的帧号，再计算物理地址，存取数据。（除了二级页表外，还有三级甚至四级页表等）。</p><p><img src="/2023/11/25/cao-zuo-xi-tong-bi-ji/Two%20Level%20Page%20Table.png" alt="|350"></p><p><img src="/2023/11/25/cao-zuo-xi-tong-bi-ji/Address%20Translation.png" alt="|525"></p><h5 id="哈希页表"><a href="#哈希页表" class="headerlink" title="哈希页表"></a>哈希页表</h5><p><strong>处理超过32位地址空间的一种常用方法</strong>，防止存储时稀疏问题，解决了浪费（<strong>允许页表项只在需要时被分配</strong>）。</p><p>实现：</p><ul><li>将<strong>虚拟页码哈希到哈希表</strong>，每个哈希表的条目中存储了一个<strong>链表</strong>（拉链法解决哈希时的碰撞），链表每个元素含有三个字段：（1）虚拟页码（2）帧号（3）指向下个元素的指针。</li><li>将虚拟页码与哈希表中第一个元素的第一个字段比较，如果相同，那么取出帧号计算物理地址。否则利用指针访问下个元素，再次比较。</li></ul><p><img src="/2023/11/25/cao-zuo-xi-tong-bi-ji/Hashed%20Page%20Table.png" alt="|500"></p><h5 id="倒置页表（反向页表）"><a href="#倒置页表（反向页表）" class="headerlink" title="倒置页表（反向页表）"></a>倒置页表（反向页表）</h5><p><strong>为每个物理内存帧创建一个对应页的条目</strong>，使页表按照物理内存排序，<strong>所有进程共享一张页表</strong>。</p><ul><li>倒置页表不包含进程逻辑地址空间的完整信息，每个进程必须将完整信息保存在外存的<strong>外部页表</strong>中。外部页表按需调入内存。</li><li>优点：减少了物理内存的使用。</li><li>缺点：进程较少时，检索时间较长。（原先直接访问，现在需要遍历搜索）。实现共享内存困难。</li></ul><p><img src="/2023/11/25/cao-zuo-xi-tong-bi-ji/Inverted%20Page.png" alt="|475"></p><h2 id="分段"><a href="#分段" class="headerlink" title="分段"></a>分段</h2><p>分段是一种内存管理机制，将一个进程的<strong>逻辑地址空间划分为若干个段</strong>。每个段代表着一个<strong>逻辑单元</strong>，如代码段、数据段、堆、栈等。</p><ul><li>逻辑地址由<strong>段号和段偏移</strong>组成。</li><li>逻辑地址到物理地址的映射由<strong>段表</strong>实现，段表中每个条目包含段基址和段界限。</li><li><strong>段表基址寄存器</strong>（STBR）指向内存中段表的位置，<strong>段表长度寄存器</strong>（STLR）表示一个程序使用的段的数量。</li></ul><p><img src="/2023/11/25/cao-zuo-xi-tong-bi-ji/Segmentation%20Hardware.png" alt="|475"></p><h3 id="分段与分页的比较"><a href="#分段与分页的比较" class="headerlink" title="分段与分页的比较"></a>分段与分页的比较</h3><ul><li>分段与分页最大的区别在于：<strong>段的大小不固定，而页的大小固定</strong>。</li><li>分段无法解决外部碎片，<strong>因为碎片大小可能会比所有请求的段大小更小</strong>。但分段不存在内部碎片问题，因为分配给进程的内存块大小不是固定的。</li><li>分段的好处是<strong>易于共享内存</strong>，因为段具有实际意义。不同进程共享的段具有同样的段号。<strong>非连续内存存储才支持共享内存，连续内存存储每个进程的内存区域都是唯一的</strong>。</li></ul><h3 id="实例：Intel-Pentium"><a href="#实例：Intel-Pentium" class="headerlink" title="实例：Intel Pentium"></a>实例：Intel Pentium</h3><p><img src="/2023/11/25/cao-zuo-xi-tong-bi-ji/Pentium%20Paging.png" alt="|500"></p><h1 id="第九章-虚拟内存"><a href="#第九章-虚拟内存" class="headerlink" title="第九章 虚拟内存"></a>第九章 虚拟内存</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>虚拟内存是计算机操作系统中的一种技术，它<strong>定义了一个连续的虚拟地址空间，并且将部分硬盘空间用作内存的扩展</strong>。</p><h3 id="概念区分"><a href="#概念区分" class="headerlink" title="概念区分"></a>概念区分</h3><ul><li>虚拟地址空间：分配给进程的虚拟内存。</li><li>虚拟地址：在虚拟内存中指令或数据的位置。</li><li>虚拟内存：把内存和磁盘结合起来使用，得到一个容量很大的虚存。物理内存上的数据可以通过页表直接访问，但<strong>如果访问到磁盘上的数据，要先调入到内存上的空闲帧（无空闲帧时先利用置换算法与内存中某个帧交换再访问）</strong>。</li></ul><h3 id="虚拟内存的大小决定因素"><a href="#虚拟内存的大小决定因素" class="headerlink" title="虚拟内存的大小决定因素"></a>虚拟内存的大小决定因素</h3><ul><li><strong>操作系统字长</strong>：决定了逻辑地址的最大长度，也决定了虚拟内存的大小（超出部分无法正确寻址使用）。</li><li><strong>内存外存容量和</strong></li></ul><h3 id="两种实现方式"><a href="#两种实现方式" class="headerlink" title="两种实现方式"></a>两种实现方式</h3><ul><li>请求分页</li><li>请求分段</li></ul><h2 id="请求分页"><a href="#请求分页" class="headerlink" title="请求分页"></a>请求分页</h2><p>进程运行开始时，<strong>仅装入一个或零个页面</strong>，所有的数据和指令大都存放在外存中。进程执行过程中，<strong>根据进程的需求动态装入页面</strong>（将外存中固定块的内容装入内存中的某一帧，并更新页表）。内存已满时，要利用<strong>页面置换算法</strong>将低优先级的页面置换出去。<br><strong>使用惰性的调页程序</strong>，即只在页面被需要时调入。</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>减少I/O操作</li><li>减少内存需求</li><li>更快的响应速度</li><li>支持更多用户</li></ul><h3 id="有效-无效位"><a href="#有效-无效位" class="headerlink" title="有效-无效位"></a>有效-无效位</h3><p>每一个页表的表项有一个有效-无效位<br><strong>v/1</strong>-&gt;valid-&gt;<strong>页面在内存中并且合法</strong><br><strong>i/0</strong>-&gt;invalid-&gt;<strong>页面合法但不在内存中/页面不合法</strong></p><p><img src="/2023/11/25/cao-zuo-xi-tong-bi-ji/demandpaging.png"></p><h3 id="页错误"><a href="#页错误" class="headerlink" title="页错误"></a>页错误</h3><p>对一个页面的首次访问，会陷入操作系统的缺页中断。<br><strong>六步过程</strong></p><ol><li>访问指令/数据，有效-无效位为1-&gt;直接访问，否则继续。</li><li>页面不合法-&gt;终止，报错，<br> 页面合法但不在内存中-&gt;继续。</li><li>找到页在磁盘中的位置。</li><li>有空闲帧-&gt;直接调入<br> 无空闲帧-&gt;换出一个低优先级的帧<br>         没修改过-&gt;直接覆盖<br>         修改过-&gt;先写入到磁盘，再覆盖</li><li>更新页表。</li><li>重启指令。</li></ol><p><img src="/2023/11/25/cao-zuo-xi-tong-bi-ji/pageFault.png" alt="|525"></p><h3 id="有效访问时间-1"><a href="#有效访问时间-1" class="headerlink" title="有效访问时间"></a>有效访问时间</h3><ul><li>缺页率：0&lt;=p&lt;=1.0</li><li><strong>有效访问时间 EAT = （1 - p） * 内存访问时间 + p * 缺页错误处理时间</strong></li><li><strong>缺页错误处理时间 = 处理缺页中断 + 页交换出去时间（不一定需要） + 读入页时间 + 重启进程开销</strong></li></ul><p><img src="/2023/11/25/cao-zuo-xi-tong-bi-ji/computingOfEAT.png" alt="|425"></p><h3 id="页面置换算法"><a href="#页面置换算法" class="headerlink" title="页面置换算法"></a>页面置换算法</h3><p>页面置换：当需要调入新的页面而没有空闲帧时，找到内存中某些页面换出。<br>页面置换算法性能目标：<strong>最小缺页率</strong></p><p>如果发生了页面置换，缺页处理时间会加倍，使用<strong>修改位modify bit或者脏位dirty bit</strong>来减少页面传输的开销：<strong>只有修改过的页面才会被写入磁盘（违背修改的页面直接丢弃）</strong>。</p><p>页面置换完成了逻辑内存和物理内存之间的分离–<strong>可以在较小的物理内存上提供大量的虚拟内存</strong>。</p><h4 id="先进先出（FIFO）算法"><a href="#先进先出（FIFO）算法" class="headerlink" title="先进先出（FIFO）算法"></a>先进先出（FIFO）算法</h4><ul><li>置换在内存中<strong>停留时间最久</strong>的页面。</li><li>可能出现<strong>Belady’s Anomaly</strong>: more frames -&gt; more page faults</li></ul><h4 id="最优置换选择（OPT）算法"><a href="#最优置换选择（OPT）算法" class="headerlink" title="最优置换选择（OPT）算法"></a>最优置换选择（OPT）算法</h4><ul><li>置换在<strong>最远的将来才会使用</strong>的页面。</li><li>缺页错误率最低，不会产生<strong>Belady’s Anomaly</strong>，但需要未来知识才能实现。</li></ul><h4 id="最近最少使用（LRU）算法"><a href="#最近最少使用（LRU）算法" class="headerlink" title="最近最少使用（LRU）算法"></a>最近最少使用（LRU）算法</h4><ul><li>置换<strong>最长时间没有被使用</strong>的页面。</li><li>性能接近OPT，需要硬件（<strong>计数器或堆栈</strong>）支持。</li></ul><h4 id="近似LRU算法-二次机会法"><a href="#近似LRU算法-二次机会法" class="headerlink" title="近似LRU算法/二次机会法"></a>近似LRU算法/二次机会法</h4><ul><li>无硬件支持时使用<strong>引用位</strong>实现近似LRU算法。<ul><li>初始时，将内存中每一页的引用位都初始化为0。</li><li>当某个页面被引用时，引用位设置为1。</li><li>当需要置换时，顺时针遍历内存中所有页面。如果找到一个页的引用位为0，那么将其置换；引用位为1，则将其改为0，继续遍历。~~（给它一次做人的机会）</li></ul></li></ul><p><img src="/2023/11/25/cao-zuo-xi-tong-bi-ji/secondChance.png" alt="|400"></p><h4 id="计数算法"><a href="#计数算法" class="headerlink" title="计数算法"></a>计数算法</h4><ul><li>用一个计数器<strong>记录每个页面被引用的次数</strong>。</li><li>LFU 算法：替换被引用次数最小的也页面。</li><li>MFU 算法</li></ul><h3 id="帧分配"><a href="#帧分配" class="headerlink" title="帧分配"></a>帧分配</h3><p>每个进程需要的最小帧数由<strong>计算机架构</strong>决定：</p><ul><li>例子：IBM370的SS-MOV指令：<ul><li>指令是6个字节，并可能跨越2个页面</li><li>存储来源（from）可能需要2个页面</li><li>目的区域（to）可能需要2个页面</li><li>所以这个指令需要的最小帧数为6</li></ul></li></ul><p>两种主流分配方式：</p><ul><li>固定分配<ul><li><strong>平均分配</strong>：例如，100个帧，5个进程，则每个进程分给20个帧。</li><li><strong>比例分配</strong>：按照每个进程的大小（分配比例=进程大小/总进程大小）进行分配。</li></ul></li><li><strong>优先级分配</strong>：根据优先级而不是进程大小按比例分配。</li></ul><h3 id="全局置换vs-局部置换"><a href="#全局置换vs-局部置换" class="headerlink" title="全局置换vs.局部置换"></a>全局置换vs.局部置换</h3><ul><li><strong>全局置换</strong>：每个进程可以从<strong>所有帧的集合</strong>中选择一个进行页面置换，而不用管该帧是否已经分配给其它进程。<strong>高优先级进程可以选择低优先级进程的帧来置换</strong>。（具有<strong>更好的系统吞吐量</strong>）</li><li><strong>局部置换</strong>：每个进程只能从<strong>自己的帧中</strong>选择页面进行置换。</li></ul><h3 id="颠簸（Thrashing）"><a href="#颠簸（Thrashing）" class="headerlink" title="颠簸（Thrashing）"></a>颠簸（Thrashing）</h3><p>颠簸：一个进程的页面被<strong>频繁换入换出</strong>。(例如，某个低优先级进程的帧被全局置换，之后因为执行需要又要换回)</p><p>原因：</p><ul><li>进程分配的<strong>帧数不足</strong>。</li><li>页面<strong>置换算法不合理</strong>。</li></ul><p>后果：</p><ul><li><strong>CPU利用率低</strong>（频繁进行页面置换，CPU等待时间长）</li><li>操作系统认为需要增加多道程序的道数（CPU利用率低），<strong>调入新的进程，造成更多的缺页错误和更长的换页队列，造成恶性循环</strong>。</li></ul><p><img src="/2023/11/25/cao-zuo-xi-tong-bi-ji/thrashing.png" alt="|425"></p><p>解决方案：</p><ul><li><strong>局部性原理</strong><ul><li>Δ=工作集窗口</li><li>$WSS_i$（working set of $P_i$）=最近Δ中引用的页面总数</li><li>系统需要<strong>跟踪每个进程的工作集</strong>，并为它<strong>分配大于其工作集帧数的帧</strong>。</li><li>当所有进程的工作集帧数之和大于当前系统可用帧数时，系统将发生抖动，<strong>需要暂停一个进程</strong>。</li></ul></li><li><strong>页错误门限</strong><ul><li>假如页错误率太低，回收一些进程的帧。</li><li>假如页错误率太高，分给进程一些帧。</li></ul></li></ul><h3 id="请求分页在进程创建中的作用"><a href="#请求分页在进程创建中的作用" class="headerlink" title="请求分页在进程创建中的作用"></a>请求分页在进程创建中的作用</h3><ol><li>写时复制（Copy-on-Write）</li></ol><ul><li>写时复制允许父进程和子进程<strong>最初共享</strong>相同的内存页，<strong>只有当其中一个进程修改了共享的页时，该页才会被复制</strong>。</li><li>使进程创建更高效。</li></ul><ol start="2"><li>内存映射文件（Memory-Mapped Files）</li></ol><ul><li>通过<strong>将磁盘块映射到内存中的页面</strong>中，内存映射文件I/O允许<strong>将文件I/O视为内存访问</strong>。</li><li><strong>允许多个进程映射同一文件</strong>，从而使内存中的页面可以共享。</li></ul><p><img src="/2023/11/25/cao-zuo-xi-tong-bi-ji/Memory%20Mapped%20Files.png" alt="|500"></p><h3 id="内核的内存分配"><a href="#内核的内存分配" class="headerlink" title="内核的内存分配"></a>内核的内存分配</h3><p>内核态的内存分配不同于用户态的内存分配</p><ul><li>内核内存分配可能需要<strong>连续的物理内存</strong>（请求分页分配的是不连续的物理内存）。</li><li>内核需要为数据结构（相对小，数量多）请求内存。需要努力<strong>最小化碎片浪费</strong>。</li></ul><h4 id="伙伴系统"><a href="#伙伴系统" class="headerlink" title="伙伴系统"></a>伙伴系统</h4><ul><li>内存<strong>按2的幂的大小进行划分</strong>，即4KB、8KB等，组成若干空闲块链表；查找链表找到满足进程需求的最佳匹配块<ul><li>首先将整个可用空间看作一块: 2^n</li><li>假设进程申请的空间大小为s，如果满足2^n-1&lt;s&lt;=2^n，则分配整个块</li><li>否则，将块划分为两个大小相等的伙伴，大小为2^n-1，<strong>一直划分下去直到产生大于或等于s的最小块</strong></li></ul></li><li>优点：通过合并的技术，可以将相邻的伙伴迅速组合以形成更大的分段；</li><li>缺点：由于跨度为两个2的幂，很可能造成内部碎片浪费。</li></ul><p><img src="/2023/11/25/cao-zuo-xi-tong-bi-ji/buddySystemExample.png" alt="|400"><br><img src="/2023/11/25/cao-zuo-xi-tong-bi-ji/buddySystem.png" alt="|400"></p><h4 id="slab分配"><a href="#slab分配" class="headerlink" title="slab分配"></a>slab分配</h4><ul><li>本质上仍然是分页，但物理页面在内存中是连续的。</li><li>每个内核数据结构都有一个cache，用于存储内核数据结构对象<strong>实例</strong>。（<strong>每个Cache包含一个或多个Slab，每个Slab由一个或多个物理连续的页组成</strong>）</li><li>优点：<ul><li>没有因碎片而引起内存浪费；</li><li>可以快速满足内存请求。</li></ul></li></ul><p><img src="/2023/11/25/cao-zuo-xi-tong-bi-ji/slabAllocation.png" alt="|475"></p><h1 id="第十章-文件系统接口"><a href="#第十章-文件系统接口" class="headerlink" title="第十章 文件系统接口"></a>第十章 文件系统接口</h1><h2 id="文件概念"><a href="#文件概念" class="headerlink" title="文件概念"></a>文件概念</h2><p>文件：是计算机中<strong>信息存储</strong>的基本组织形式，是存储设备的<strong>逻辑存储单位</strong>，是记录在<strong>外存中</strong>的相关信息的命名组合。</p><h3 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h3><ul><li><strong>无结构</strong>：文字流、字节流等。</li><li><strong>简单记录结构</strong>：线性、固定长度、可变长度等。</li><li><strong>复杂结构</strong>：结构化文档、多媒体文件等。</li></ul><h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><p>文件相关操作：</p><ul><li><strong>创建</strong>文件</li><li><strong>写</strong>文件</li><li><strong>读</strong>文件</li><li>在文件内<strong>重定位</strong></li><li><strong>删除</strong>文件</li><li><strong>截断</strong>文件</li><li>打开文件：在磁盘上搜索目录结构，找到条目Fi，将其内容移至内存。需要数据结构——<strong>打开文件表</strong>，存放文件指针、打开文件计数器、文件存储位置、访问权限等。</li><li>关闭文件：将内存中条目Fi的内容移动到磁盘上的目录结构。</li></ul><h3 id="文件类型"><a href="#文件类型" class="headerlink" title="文件类型"></a>文件类型</h3><p><img src="/2023/11/25/cao-zuo-xi-tong-bi-ji/fileTypes.png" alt="|432"></p><h2 id="访问方式"><a href="#访问方式" class="headerlink" title="访问方式"></a>访问方式</h2><ul><li><p><strong>顺序访问（顺序文件）</strong>：文件信息<strong>按顺序</strong>（即一个接着一个记录）加以处理，依次访问数据，不能直接跳转到文件的指定位置。类似于<strong>磁带</strong>的访问方式。这种访问模式是最常见的，例如，<strong>编译器和编辑器</strong>以这种方式访问文件。还有<strong>日志文件</strong>也是顺序文件。</p><ul><li>优点：<strong>节省存储空间</strong>，不会有空间浪费。</li><li>缺点：<strong>访问效率较差</strong>。需要顺序遍历寻找，<strong>线性时间复杂度</strong>。</li></ul></li><li><p><strong>直接访问（直接文件）</strong>：又称随机访问、相对访问。文件信息以<strong>定长的分区</strong>形式存储，访问时，先计算记录所在的块，再直接读取相应的块。基于磁盘的访问方式，<strong>对于大数据的立即存取</strong>十分有用。例如，<strong>数据库</strong>通常使用这种方式。</p><ul><li>优点：<strong>访问效率较好</strong>。O(1)。</li><li>缺点：<strong>浪费存储空间（内部碎片）</strong>。</li></ul></li><li><p>索引文件：<strong>顺序文件存储+直接文件检索</strong></p><ul><li>文件内部的记录按照<strong>顺序访问</strong>进行存储，但是为记录建立<strong>可直接访问的索引表</strong>，存放记录号和记录所在位置的指针。访问时，先访问索引获取位置，再访问实际地址。</li></ul></li></ul><p><img src="/2023/11/25/cao-zuo-xi-tong-bi-ji/indexAccess.png" alt="|500"></p><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><h3 id="基本概念-1"><a href="#基本概念-1" class="headerlink" title="基本概念"></a>基本概念</h3><h4 id="目录项"><a href="#目录项" class="headerlink" title="目录项"></a>目录项</h4><p>存放文件的属性信息，在某些操作系统中，目录项中就是FCB（文件控制块），更多地采用<strong>iNode节点</strong>以减少目录项大小，<strong>从而提高检索效率。</strong></p><h4 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h4><ul><li>包含着所有文件信息的<strong>节点集合</strong>。</li><li>根据文件名检索文件的桥梁。</li><li><strong>目录项的有序集合</strong>。</li></ul><h4 id="目录文件"><a href="#目录文件" class="headerlink" title="目录文件"></a>目录文件</h4><ul><li>目录的存在形式。</li><li>目录以<strong>文件的方式</strong>存放在外存上的文件系统中，因为一个操作系统的文件系统往往包含着数百GB的文件，目录文件会非常大，如果全部调入内存会极大地占用空间。</li></ul><h4 id="目录常见操作"><a href="#目录常见操作" class="headerlink" title="目录常见操作"></a>目录常见操作</h4><ul><li>搜索文件</li><li>创建文件</li><li>删除文件</li><li>列出目录</li><li>重命名文件</li><li>跟踪文件系统</li></ul><h4 id="检索文件的过程"><a href="#检索文件的过程" class="headerlink" title="检索文件的过程"></a>检索文件的过程</h4><p><strong>遍历目录项</strong>（虽然目录项类似一种索引，但它由于<strong>经常变动</strong>，所以<strong>一般不排序</strong>，因此也无法直接访问，需要进行<strong>按文件名</strong>遍历）</p><ol><li>打开目录文件</li><li>从磁盘读入该目录文件的1个物理物理块，该块包含若干个目录项</li><li>根据文件名遍历内存中的该块，如找到对应的FCB则结束</li><li>判断该目录文件是否还有物理块没有读入，如果是转2；否则，结束。表示该目录中没有此文件名的文件</li></ol><h4 id="目录性能"><a href="#目录性能" class="headerlink" title="目录性能"></a>目录性能</h4><ul><li><strong>物理块</strong>：外部存储被划分为和页、帧等大小或者倍数的物理块。<strong>内存和存储设备数据交换基本单位</strong>。一个物理块一般为4KB、8KB和16KB等</li><li>提高目录性能：检索时，读入<strong>尽可能少</strong>的物理块</li><li>如果：<ul><li>目录项大小= ds bytes</li><li>目录中最多文件数 = n</li><li>物理块大小 = b</li></ul></li><li>那么：<ul><li>目录文件大小 = ds * n bytes</li><li>目录文件需要的物理块数目 = ds * n/b</li><li>检索一个文件需要平均读入的块数=（ds∗n/b+1）/2</li></ul></li><li>提高目录性能的方法<ul><li>减少目录中的文件数目（<strong>多级目录</strong>）</li><li>减少目录项的大小（<strong>iNode</strong>）</li></ul></li></ul><h4 id="iNode"><a href="#iNode" class="headerlink" title="iNode"></a>iNode</h4><p>将目录项由较大的FCB变为较小的iNode，类似于索引，包含<strong>一个文件名和iNode号。</strong></p><ul><li>我们根据iNode号，可以进入一个iNode表（不含文件名）查询对应的FCB指针，通过FCB获取对应的文件。</li></ul><h3 id="目录的逻辑结构"><a href="#目录的逻辑结构" class="headerlink" title="目录的逻辑结构"></a>目录的逻辑结构</h3><h4 id="目录逻辑结构的设计目标"><a href="#目录逻辑结构的设计目标" class="headerlink" title="目录逻辑结构的设计目标"></a>目录逻辑结构的设计目标</h4><ul><li><strong>效率（性能）</strong>：<ul><li>快速定位文件位置</li><li>提高文件访问效率</li></ul></li><li><strong>命名（方便性）</strong>：<ul><li>方便用户使用</li><li>同名的不同文件</li><li>不同名的相同文件</li></ul></li><li><strong>分组</strong>：<ul><li>文件分组（子目录）</li><li>兼顾效率和方便性</li></ul></li></ul><h4 id="单层目录"><a href="#单层目录" class="headerlink" title="单层目录"></a>单层目录</h4><ul><li>所有文件在<strong>同一目录</strong>中，只有一级目录：<strong>根目录</strong></li><li>优点：<strong>结构简单</strong></li><li>缺点：<ul><li><strong>效率差</strong></li><li><strong>不能有同名文件</strong></li><li><strong>不能分组</strong><br>  <img src="/2023/11/25/cao-zuo-xi-tong-bi-ji/single-levelDirectory.png"></li></ul></li></ul><h4 id="两级目录"><a href="#两级目录" class="headerlink" title="两级目录"></a>两级目录</h4><ul><li><strong>每个用户</strong>有自己的目录结构，即目录下的目录</li><li>优点：<ul><li><strong>不同用户可有相同文件名的文件</strong>；</li><li>比单层目录<strong>提高检索效率</strong>（文件分布在多个用户目录中）</li></ul></li><li>缺点：<ul><li>相同用户不能有同名文件;</li><li>相同用户无法给文件分组。<br>  <img src="/2023/11/25/cao-zuo-xi-tong-bi-ji/two-levelDirectory.png"></li></ul></li></ul><h4 id="树形目录"><a href="#树形目录" class="headerlink" title="树形目录"></a>树形目录</h4><ul><li>两级目录的扩展，从两层变为<strong>多层</strong>。</li><li>特点：<ul><li>检索高效（子目录增多导致每个目录下文件减少）</li><li>可以分组</li><li>允许重名<br>  <img src="/2023/11/25/cao-zuo-xi-tong-bi-ji/treeStructuredDirectoried.png"></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大数据技术基础</title>
      <link href="/2023/11/25/da-shu-ju-ji-zhu-ji-chu-bi-ji/"/>
      <url>/2023/11/25/da-shu-ju-ji-zhu-ji-chu-bi-ji/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="第一章-大数据基础"><a href="#第一章-大数据基础" class="headerlink" title="第一章 大数据基础"></a>第一章 大数据基础</h1><h2 id="1-1-大数据基础"><a href="#1-1-大数据基础" class="headerlink" title="1.1 大数据基础"></a>1.1 大数据基础</h2><h3 id="大数据带来的思维转变"><a href="#大数据带来的思维转变" class="headerlink" title="大数据带来的思维转变"></a>大数据带来的思维转变</h3><ul><li>全样而非抽样</li><li>效率而非精确</li><li>相关而非因果</li></ul><h3 id="大数据特征"><a href="#大数据特征" class="headerlink" title="大数据特征"></a>大数据特征</h3><ul><li>Value</li><li>Velocity（快速）</li><li>Volume</li><li>Variety</li></ul><h3 id="大数据的产生阶段"><a href="#大数据的产生阶段" class="headerlink" title="大数据的产生阶段"></a>大数据的产生阶段</h3><ul><li>运营式系统阶段（数据被动产生）</li><li>用户原创内容阶段（数据主动产生）</li><li>感知式系统阶段</li></ul><h3 id="科学研究四范式"><a href="#科学研究四范式" class="headerlink" title="科学研究四范式"></a>科学研究四范式</h3><ul><li>实验</li><li>理论</li><li>计算</li><li>数据探索</li></ul><h3 id="大数据计算模式"><a href="#大数据计算模式" class="headerlink" title="大数据计算模式"></a>大数据计算模式</h3><table><thead><tr><th>大数据计算模式</th><th>解决问题</th><th>代表产品</th></tr></thead><tbody><tr><td>批处理计算</td><td>针对大规模数据的批量处理</td><td>Map Reduce、Spark等</td></tr><tr><td>流计算</td><td>针对流数据的实时计算</td><td>Flume、Storm、Streams等</td></tr><tr><td>图计算</td><td>针对大规模图结构数据的处理</td><td>Pregel、Graphx等</td></tr><tr><td>查询分析计算</td><td>大规模数据的存储管理和查询分析</td><td>Hive等</td></tr></tbody></table><h3 id="大数据技术框架（重要）"><a href="#大数据技术框架（重要）" class="headerlink" title="大数据技术框架（重要）"></a>大数据技术框架（重要）</h3><ul><li>数据收集</li><li>数据存储</li><li>资源管理与服务协调</li><li>计算引擎</li><li>数据分析</li><li>数据可视化</li></ul><p><img src="/2023/11/25/da-shu-ju-ji-zhu-ji-chu-bi-ji/bigDataBasicFrame.png"></p><h3 id="大数据技术实现方案"><a href="#大数据技术实现方案" class="headerlink" title="大数据技术实现方案"></a>大数据技术实现方案</h3><h4 id="Hadoop与Spark开源大数据技术栈"><a href="#Hadoop与Spark开源大数据技术栈" class="headerlink" title="Hadoop与Spark开源大数据技术栈"></a>Hadoop与Spark开源大数据技术栈</h4><p><img src="/2023/11/25/da-shu-ju-ji-zhu-ji-chu-bi-ji/hadoop&amp;spark.png"></p><h3 id="大数据架构"><a href="#大数据架构" class="headerlink" title="大数据架构"></a>大数据架构</h3><p><strong>Lambda架构：</strong><br>将数据处理流程分解成三层：</p><ul><li>批处理层：利用分布式批处理计算，以批为单位处理数据，并产生一个经预计算产生的只读数据视图。</li><li>流式处理层：采用流式计算技术，降低了数据处理延迟。</li><li>服务层：批处理层和流式处理层结合在一起，可以既保证数据延迟低，也能完成复杂的逻辑计算。</li></ul><p><img src="/2023/11/25/da-shu-ju-ji-zhu-ji-chu-bi-ji/Lambda.png"></p><p>案例：推荐系统<br>![[recommandSystem.png]]</p><h2 id="1-2-大数据收集"><a href="#1-2-大数据收集" class="headerlink" title="1.2 大数据收集"></a>1.2 大数据收集</h2><h3 id="关系型数据收集"><a href="#关系型数据收集" class="headerlink" title="关系型数据收集"></a>关系型数据收集</h3><p>关系型数据是常见的一种数据类型，通常存储在MySQL、 Oracle等关系型数据库中，为了能够利用大数据技术处理和存储这些关系型数据，将这些数据导入到HDFS、Hbase等大数据存储系统中，以便使用MapReduce、Spark等分布式计算技术进行高效分析和处理。为便于与前端数据可视化系统对接，通常需要将Hadoop大数据系统分析产生的结果导回到关系型数据库中。为解决上述问题，<strong>高效地实现关系型数据库与Hadoop之间数据的导入导出</strong>，Hadoop生态系统提供了<strong>Sqoop</strong>工具。</p><h3 id="Sqoop"><a href="#Sqoop" class="headerlink" title="Sqoop"></a>Sqoop</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>Sqoop采用插拔式Connector架构，解决了关系型数据库与Hadoop之间的数据传输问题。</p><p>Sqoop通常完成的任务：</p><ul><li>数据迁移</li><li>可视化分析结果</li><li>数据增量导入</li></ul><p>Sqoop具备的特点：</p><ul><li>性能高</li><li>自动类型转换</li><li>自动传播元信息</li></ul><h4 id="Sqoop基本架构"><a href="#Sqoop基本架构" class="headerlink" title="Sqoop基本架构"></a>Sqoop基本架构</h4><h5 id="Sqoop1架构"><a href="#Sqoop1架构" class="headerlink" title="Sqoop1架构"></a>Sqoop1架构</h5><p><img src="/2023/11/25/da-shu-ju-ji-zhu-ji-chu-bi-ji/Sqoop1.png"></p><h5 id="Sqoop2架构"><a href="#Sqoop2架构" class="headerlink" title="Sqoop2架构"></a>Sqoop2架构</h5><p><img src="/2023/11/25/da-shu-ju-ji-zhu-ji-chu-bi-ji/Sqoop2.png"></p><h5 id="Sqoop1与Sqoop2对比"><a href="#Sqoop1与Sqoop2对比" class="headerlink" title="Sqoop1与Sqoop2对比"></a>Sqoop1与Sqoop2对比</h5><p><img src="/2023/11/25/da-shu-ju-ji-zhu-ji-chu-bi-ji/SqoopVSSqoop2.png"></p><h4 id="Sqoop使用方式"><a href="#Sqoop使用方式" class="headerlink" title="Sqoop使用方式"></a>Sqoop使用方式</h4><h5 id="Sqoop1使用方式"><a href="#Sqoop1使用方式" class="headerlink" title="Sqoop1使用方式"></a>Sqoop1使用方式</h5><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29550710/1697727069806-87e8eea3-e247-4eac-9664-2e0812d8bfcd.png#averageHue=%23f1eeeb&amp;clientId=ua9edeed5-70db-4&amp;from=paste&amp;height=293&amp;id=uf2701d70&amp;originHeight=403&amp;originWidth=1094&amp;originalType=binary&amp;ratio=1.375&amp;rotation=0&amp;showTitle=false&amp;size=185220&amp;status=done&amp;style=none&amp;taskId=u128fce70-4a36-44b9-a89f-9ae07fa96f3&amp;title=&amp;width=795.6363636363636" alt="image.png"></p><h5 id="Sqoop2使用方式"><a href="#Sqoop2使用方式" class="headerlink" title="Sqoop2使用方式"></a>Sqoop2使用方式</h5><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29550710/1697727091744-8861bf1f-c6ac-4495-941d-81bdb03f31c8.png#averageHue=%23f3f0ed&amp;clientId=ua9edeed5-70db-4&amp;from=paste&amp;height=366&amp;id=u9a6b147e&amp;originHeight=503&amp;originWidth=1138&amp;originalType=binary&amp;ratio=1.375&amp;rotation=0&amp;showTitle=false&amp;size=231982&amp;status=done&amp;style=none&amp;taskId=u7b4f8822-f12e-494f-b08a-738a49ad539&amp;title=&amp;width=827.6363636363636" alt="image.png"></p><h3 id="数据增量收集CDC"><a href="#数据增量收集CDC" class="headerlink" title="数据增量收集CDC"></a>数据增量收集CDC</h3><p> 捕获数据源中数据的更新，进而获取增量数据的过程，被称为 **CDC(Change Data Capture)**。<br> CDC 系统主要功能是捕获数据库中的数据更新，将增量数据发送给各个订阅者和消费者；<br> CDC 系统应用非常广泛，主要包括：</p><ul><li>异地机房同步：实现数据异地机房容灾；</li><li>数据库实时备份：类似于master/slave架构，实时对数据库进行备份； </li><li>业务Cache刷新：更新数据库成功的同时，刷新 Cache 中的值；</li><li>数据全库迁移：创建任务队列表，逐步完成全库所有表的迁移。</li></ul><h3 id="CDC开源实现Canal"><a href="#CDC开源实现Canal" class="headerlink" title="CDC开源实现Canal"></a>CDC开源实现Canal</h3><h4 id="Canal主要原理"><a href="#Canal主要原理" class="headerlink" title="Canal主要原理"></a>Canal主要原理</h4><p>Canal主要定位是<strong>基于数据库增量日志解析，提供增量数据订阅和消费</strong>，目前主要支持了MySQL等关系型数据库。<br>Canal的主要原理是，模拟数据库的主备复制协议，接受主数据库产生的binary log，进而捕获更新数据。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/29550710/1697727596459-0e721b2d-8a55-4bbd-9201-bfae5fa3ba39.png#averageHue=%23f4f3f3&amp;clientId=ua9edeed5-70db-4&amp;from=paste&amp;height=312&amp;id=ue281518a&amp;originHeight=429&amp;originWidth=856&amp;originalType=binary&amp;ratio=1.375&amp;rotation=0&amp;showTitle=false&amp;size=100400&amp;status=done&amp;style=none&amp;taskId=u0703fd01-8157-4c78-afc3-a8e952a04a9&amp;title=&amp;width=622.5454545454545" alt="image.png"></p><h4 id="Canal基本架构"><a href="#Canal基本架构" class="headerlink" title="Canal基本架构"></a>Canal基本架构</h4><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29550710/1697727670892-e0d601a9-c029-4f24-bb14-7d0d5f4fa332.png#averageHue=%23f5f4f3&amp;clientId=ua9edeed5-70db-4&amp;from=paste&amp;height=447&amp;id=ud64011e6&amp;originHeight=615&amp;originWidth=1177&amp;originalType=binary&amp;ratio=1.375&amp;rotation=0&amp;showTitle=false&amp;size=146351&amp;status=done&amp;style=none&amp;taskId=u5eb6af15-3ac2-47d8-a6cc-87560ec9849&amp;title=&amp;width=856" alt="image.png"></p><h3 id="多机房数据同步系统Otter"><a href="#多机房数据同步系统Otter" class="headerlink" title="多机房数据同步系统Otter"></a>多机房数据同步系统Otter</h3><h4 id="Otter基本架构"><a href="#Otter基本架构" class="headerlink" title="Otter基本架构"></a>Otter基本架构</h4><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29550710/1697728046633-74539bbc-e6ce-4a69-b912-914365b077b1.png#averageHue=%23f0efee&amp;clientId=ua9edeed5-70db-4&amp;from=paste&amp;height=471&amp;id=u2344ea3c&amp;originHeight=648&amp;originWidth=1173&amp;originalType=binary&amp;ratio=1.375&amp;rotation=0&amp;showTitle=false&amp;size=203941&amp;status=done&amp;style=none&amp;taskId=uc5776525-893e-4597-94d1-1c37a80557c&amp;title=&amp;width=853.0909090909091" alt="image.png"></p><h4 id="Otter-S、E、T、L阶段模型"><a href="#Otter-S、E、T、L阶段模型" class="headerlink" title="Otter S、E、T、L阶段模型"></a>Otter S、E、T、L阶段模型</h4><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29550710/1697728115654-364f02ed-3483-4b56-8239-58fa62b9b348.png#averageHue=%23f2f0ef&amp;clientId=ua9edeed5-70db-4&amp;from=paste&amp;height=403&amp;id=u09e013b1&amp;originHeight=554&amp;originWidth=1130&amp;originalType=binary&amp;ratio=1.375&amp;rotation=0&amp;showTitle=false&amp;size=188596&amp;status=done&amp;style=none&amp;taskId=u7f39c631-579b-4743-b31d-43449a5e1a6&amp;title=&amp;width=821.8181818181819" alt="image.png"></p><h4 id="Otter跨机房数据同步"><a href="#Otter跨机房数据同步" class="headerlink" title="Otter跨机房数据同步"></a>Otter跨机房数据同步</h4><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29550710/1697728138093-13a87f50-ccc1-474f-88ab-277eac32f4b0.png#averageHue=%23f0efee&amp;clientId=ua9edeed5-70db-4&amp;from=paste&amp;height=470&amp;id=u01c39387&amp;originHeight=646&amp;originWidth=1039&amp;originalType=binary&amp;ratio=1.375&amp;rotation=0&amp;showTitle=false&amp;size=193724&amp;status=done&amp;style=none&amp;taskId=u6470a719-f056-432a-b24b-a187276e767&amp;title=&amp;width=755.6363636363636" alt="image.png"></p><h3 id="非关系型数据收集"><a href="#非关系型数据收集" class="headerlink" title="非关系型数据收集"></a>非关系型数据收集</h3><ul><li>非关系型数据种类繁多，包括网页、视频、图片、用户行为日志等，其中日志类数据直接反映了生产者的现状和行为特征， 通常用在行为分析系统、推荐系统、广告系统中；  </li><li>日志数据具有流式、数据量大等特点，通常分散在各种设备上， 由不同服务和组件产生，为了高效地收集这些流式日志，需要采用具有良好扩展性、伸缩性和容错性的分布式系统；  </li><li>为了帮助用户解决日志收集问题，Hadoop生态系统提供了 Flume，它是Cloudera公司开源的一个分布式高可靠系统，能够<strong>对不同数据源的海量日志数据进行高效收集、聚合、移动</strong>，最后存储到一个中心化的数据存储系统中。</li></ul><h3 id="Flume概述"><a href="#Flume概述" class="headerlink" title="Flume概述"></a>Flume概述</h3><h4 id="Flume设计动机"><a href="#Flume设计动机" class="headerlink" title="Flume设计动机"></a>Flume设计动机</h4><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29550710/1697728312738-479789d1-f6f2-4cef-9225-2aa680867332.png#averageHue=%23f0edeb&amp;clientId=ua9edeed5-70db-4&amp;from=paste&amp;height=345&amp;id=u323a0f5d&amp;originHeight=474&amp;originWidth=1132&amp;originalType=binary&amp;ratio=1.375&amp;rotation=0&amp;showTitle=false&amp;size=236716&amp;status=done&amp;style=none&amp;taskId=u05bb7534-e4ae-4d5a-b6ec-65bd7cd58f4&amp;title=&amp;width=823.2727272727273" alt="image.png"></p><h4 id="Flume基本思想及特点"><a href="#Flume基本思想及特点" class="headerlink" title="Flume基本思想及特点"></a>Flume基本思想及特点</h4><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29550710/1697728335167-25373eeb-c862-4306-9620-8202743274c7.png#averageHue=%23f3f1ef&amp;clientId=ua9edeed5-70db-4&amp;from=paste&amp;height=409&amp;id=uc20e96eb&amp;originHeight=562&amp;originWidth=1134&amp;originalType=binary&amp;ratio=1.375&amp;rotation=0&amp;showTitle=false&amp;size=233426&amp;status=done&amp;style=none&amp;taskId=u274ce792-e62b-4fb0-adfb-3c71b82dd8a&amp;title=&amp;width=824.7272727272727" alt="image.png"></p><h3 id="Flume基本架构"><a href="#Flume基本架构" class="headerlink" title="Flume基本架构"></a>Flume基本架构</h3><h4 id="Flume基本构成"><a href="#Flume基本构成" class="headerlink" title="Flume基本构成"></a>Flume基本构成</h4><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29550710/1697728752395-4b52443f-f435-430f-adc2-844c9e655139.png#averageHue=%23f5f4f2&amp;clientId=ua9edeed5-70db-4&amp;from=paste&amp;height=415&amp;id=u41f06469&amp;originHeight=570&amp;originWidth=1092&amp;originalType=binary&amp;ratio=1.375&amp;rotation=0&amp;showTitle=false&amp;size=231712&amp;status=done&amp;style=none&amp;taskId=u292d8b39-8af2-4ff3-8243-7dd0beaf49e&amp;title=&amp;width=794.1818181818181" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2023/png/29550710/1697728805958-19999312-e06d-4454-bd5e-8f12b8ac4ed5.png#averageHue=%23f2efed&amp;clientId=ua9edeed5-70db-4&amp;from=paste&amp;height=443&amp;id=u02fb9d90&amp;originHeight=609&amp;originWidth=1132&amp;originalType=binary&amp;ratio=1.375&amp;rotation=0&amp;showTitle=false&amp;size=299703&amp;status=done&amp;style=none&amp;taskId=u02b2a549-e38b-4eb9-8115-2f906858e76&amp;title=&amp;width=823.2727272727273" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2023/png/29550710/1697728815238-483e928e-023d-4732-a89d-232f36aee8bb.png#averageHue=%23f8f7f6&amp;clientId=ua9edeed5-70db-4&amp;from=paste&amp;height=452&amp;id=u207bc9a8&amp;originHeight=622&amp;originWidth=1115&amp;originalType=binary&amp;ratio=1.375&amp;rotation=0&amp;showTitle=false&amp;size=184471&amp;status=done&amp;style=none&amp;taskId=u6c35833f-720a-46d9-a556-1b349a723bb&amp;title=&amp;width=810.9090909090909" alt="image.png"></p><h4 id="Flume-NG高级组件"><a href="#Flume-NG高级组件" class="headerlink" title="Flume NG高级组件"></a>Flume NG高级组件</h4><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29550710/1697728861575-68887aeb-8692-457d-a807-4ed5e1de205d.png#averageHue=%23f1eeeb&amp;clientId=ua9edeed5-70db-4&amp;from=paste&amp;height=398&amp;id=u59984716&amp;originHeight=547&amp;originWidth=1112&amp;originalType=binary&amp;ratio=1.375&amp;rotation=0&amp;showTitle=false&amp;size=272068&amp;status=done&amp;style=none&amp;taskId=u2fb05f7e-4557-4b19-8408-cb4f2e3cac6&amp;title=&amp;width=808.7272727272727" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2023/png/29550710/1697728867945-994da6bf-c58c-4d8e-bbc6-4e851d1ba989.png#averageHue=%23f6f4f3&amp;clientId=ua9edeed5-70db-4&amp;from=paste&amp;height=457&amp;id=u33c6df00&amp;originHeight=629&amp;originWidth=1123&amp;originalType=binary&amp;ratio=1.375&amp;rotation=0&amp;showTitle=false&amp;size=231933&amp;status=done&amp;style=none&amp;taskId=u8ee2fdd9-5393-4d39-93c3-7595beb9109&amp;title=&amp;width=816.7272727272727" alt="image.png"></p><h3 id="Flume-NG数据流拓扑"><a href="#Flume-NG数据流拓扑" class="headerlink" title="Flume NG数据流拓扑"></a>Flume NG数据流拓扑</h3><h4 id="构建数据流拓扑"><a href="#构建数据流拓扑" class="headerlink" title="构建数据流拓扑"></a>构建数据流拓扑</h4><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29550710/1697729087900-9c142b3e-7028-4b13-90f5-d5779d1b6f85.png#averageHue=%23f2f0ed&amp;clientId=ua9edeed5-70db-4&amp;from=paste&amp;height=324&amp;id=uf45de7ed&amp;originHeight=446&amp;originWidth=1105&amp;originalType=binary&amp;ratio=1.375&amp;rotation=0&amp;showTitle=false&amp;size=201864&amp;status=done&amp;style=none&amp;taskId=uf3bdff6d-ce5b-4d06-ab86-cc4323c9cf6&amp;title=&amp;width=803.6363636363636" alt="image.png"></p><h4 id="多路合并拓扑架构"><a href="#多路合并拓扑架构" class="headerlink" title="多路合并拓扑架构"></a>多路合并拓扑架构</h4><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29550710/1697729148825-f0b14aef-259c-44b0-94dd-755bb42640a8.png#averageHue=%23f7f6f5&amp;clientId=ua9edeed5-70db-4&amp;from=paste&amp;height=452&amp;id=u4996df74&amp;originHeight=622&amp;originWidth=1125&amp;originalType=binary&amp;ratio=1.375&amp;rotation=0&amp;showTitle=false&amp;size=208668&amp;status=done&amp;style=none&amp;taskId=u39dc8bbe-1de7-4190-89e6-316f2112519&amp;title=&amp;width=818.1818181818181" alt="image.png"></p><h4 id="多路复用拓扑架构"><a href="#多路复用拓扑架构" class="headerlink" title="多路复用拓扑架构"></a>多路复用拓扑架构</h4><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29550710/1697729174871-82e19441-bfad-428e-aab6-bd8d2ceeb170.png#averageHue=%23f7f6f6&amp;clientId=ua9edeed5-70db-4&amp;from=paste&amp;height=450&amp;id=uf2f2136d&amp;originHeight=619&amp;originWidth=1102&amp;originalType=binary&amp;ratio=1.375&amp;rotation=0&amp;showTitle=false&amp;size=187009&amp;status=done&amp;style=none&amp;taskId=u7fb03ada-c02e-4917-baa6-f90007a3e67&amp;title=&amp;width=801.4545454545455" alt="image.png"></p><h1 id="第二章-大数据存储和管理"><a href="#第二章-大数据存储和管理" class="headerlink" title="第二章 大数据存储和管理"></a>第二章 大数据存储和管理</h1><h2 id="2-1-分布式消息队列"><a href="#2-1-分布式消息队列" class="headerlink" title="2.1 分布式消息队列"></a>2.1 分布式消息队列</h2><h3 id="Kafka概述"><a href="#Kafka概述" class="headerlink" title="Kafka概述"></a>Kafka概述</h3><ul><li>实际应用中，不同服务器(数据生产者)产生的日志，比如指标监控数据、用户搜索日志、用点击日志等，需要同 时传送到多个系统中以便进行相应的逻辑处理和挖掘， 比如指标监控数据可能被同时写入Hadoop和Storm集群 (数据消费者)进行离线和实时分析。</li><li>消息队列的出现是为了<strong>降低数据生产者和消费者之间的耦合性、平衡两者处理能力的不对等</strong>。 </li><li><strong>消息队列是位于生产者和消费者之间的“中间件”</strong>，它解除了生产者和消费者的直接依赖关系，使得软件架构更 容易扩展和伸缩；它能够缓冲生产者产生的数据，防止 消费者无法及时处理生产者产生的数据。</li></ul><h4 id="Kafka设计动机"><a href="#Kafka设计动机" class="headerlink" title="Kafka设计动机"></a>Kafka设计动机</h4><p>存在问题：</p><ul><li><strong>数据生产者和消费者耦合度过高</strong>：需要增加一种新的消费者时，所有数据生产者均需要被改动，扩展性非常差。</li><li><strong>生产者和消费者间数据处理速率不对等</strong></li><li><strong>大量并发的网络连接对后端消费者不够友好</strong></li></ul><p>解决方法：引入一层”中间件”</p><ul><li><strong>消息中间件</strong>：避免生产者和消费者直接互通产生的彼此高度依赖，两者中任何一个有变化都不会 影响另一方。  </li><li><strong>消息队列</strong>：缓存生产者产生的数据，使得消费者可以重复消费历史数据；平滑生产者产生数据速度和消费者处理数据速度的不对等。</li><li><strong>发布订阅系统</strong>：消费者可订阅某类主题的数据，当生产者产生对应主题的数据后，所有订阅者会快速获取到的数据，即消费者可快速获取新增数据。</li><li><strong>信息总线</strong>：所有收集到的数据会流经Kafka，之后由Kafka分流后，进入各个消费者系统。</li></ul><h4 id="Kafka特点"><a href="#Kafka特点" class="headerlink" title="Kafka特点"></a>Kafka特点</h4><ul><li><strong>高吞吐量</strong></li><li><strong>良好的扩展性</strong></li><li><strong>持久性和可靠性</strong></li></ul><h4 id="Flume与Kafka的区别"><a href="#Flume与Kafka的区别" class="headerlink" title="Flume与Kafka的区别"></a>Flume与Kafka的区别</h4><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29550710/1698378163478-ab9ad77e-2c50-4d24-a893-9ffa2d158a0b.png#averageHue=%23f5f3f0&amp;clientId=ub9045351-1b5f-4&amp;from=paste&amp;height=278&amp;id=uc93c905c&amp;originHeight=347&amp;originWidth=931&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=125522&amp;status=done&amp;style=none&amp;taskId=u04ba6821-7eb5-421d-8778-53981c962a5&amp;title=&amp;width=744.8" alt="image.png"></p><h3 id="Kafka设计架构"><a href="#Kafka设计架构" class="headerlink" title="Kafka设计架构"></a>Kafka设计架构</h3><h4 id="Kafka基本架构"><a href="#Kafka基本架构" class="headerlink" title="Kafka基本架构"></a>Kafka基本架构</h4><p>Kafka是一个分布式消息队列，它将数据分区保存，并将每个分区保存成多份以提高数据可靠性。</p><ul><li>Kafka架构由<strong>Producer、Broker和Consumer</strong>三类组件构成，其中Producer将数据写入Broker，Consumer则从Broker上读取数据进行处理；Broker构成了连接Producer和Consumer的”缓冲区”，Broker和Consumer通过ZooKeeper做协调和服务发现。</li><li>Kafka架构采用<strong>Push-Pull架构（生产者将消息推送到队列中，但消费者不会立即接收消息。相反，消费者在自己的节奏下拉（pull）消息）</strong>，即Producer将数据直接”push”给Broker，而Consumer从Broker端”pull”数据，这种架构优势主要体现在以下两点:<ul><li>Consumer可根据自己的实际负载和需求获取数据，避免采用”push”方式给Consumer带来较大压力。</li><li>Consumer自己维护已读取消息的offset而不是由Broker端维护，大大缓解了Broker的压力。</li></ul></li></ul><h4 id="Kafka各组件详解"><a href="#Kafka各组件详解" class="headerlink" title="Kafka各组件详解"></a>Kafka各组件详解</h4><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29550710/1698379811033-620d3f96-713f-4bd3-8820-d3691fff23b4.png#averageHue=%23f6f3f1&amp;clientId=ub9045351-1b5f-4&amp;from=paste&amp;height=298&amp;id=udb05c2e3&amp;originHeight=373&amp;originWidth=887&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=134602&amp;status=done&amp;style=none&amp;taskId=uc6031cbe-fe23-4836-945d-17042db6629&amp;title=&amp;width=709.6" alt="image.png"></p><ul><li>Kafka Producer发送信息时，不需要指定所有Broker的地址，只需给定一个或几个初始化Broker的地址即可，Producer可通过指定的Broker获取其他所有Broker的位置信息，并自动实现负载均衡。</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29550710/1700188977865-477435f5-bb1c-490b-9187-22abb594e0b4.png#averageHue=%23f4f2ef&amp;clientId=u439df397-55e9-4&amp;from=paste&amp;height=339&amp;id=u9abff1e4&amp;originHeight=424&amp;originWidth=802&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=193175&amp;status=done&amp;style=none&amp;taskId=u1e0b21fe-c42c-40d4-9fbf-ba0e8f42ec1&amp;title=&amp;width=641.6" alt="image.png"></p><h2 id="2-2-大数据存储"><a href="#2-2-大数据存储" class="headerlink" title="2.2 大数据存储"></a>2.2 大数据存储</h2><h2 id="2-3-NoSQL数据库"><a href="#2-3-NoSQL数据库" class="headerlink" title="2.3 NoSQL数据库"></a>2.3 NoSQL数据库</h2><h2 id="2-4-分布式文件系统"><a href="#2-4-分布式文件系统" class="headerlink" title="2.4 分布式文件系统"></a>2.4 分布式文件系统</h2><p>文件存储的方式：</p><ul><li>文件系统<ul><li>NTFS(New Technology File System)：Windows常用的高级文件系统</li><li>Ext4(Extended File System4)：Android常用的文件系统</li><li>HFS(Hierarchical File System)、HFS+、APFS(Apple File System)：IOS</li></ul></li><li>数据库</li></ul><p>数据存储扩容问题的两种解决方案：</p><ul><li><strong>纵向扩展(scale-up)</strong></li><li><strong>横向扩展(scale-out)</strong></li></ul><p>横向扩展存在的难点：</p><ul><li><strong>因故障丢失数据</strong></li><li><strong>文件通常较大</strong></li><li><strong>一次写入多次读取</strong></li></ul><h3 id="HDFS关键技术"><a href="#HDFS关键技术" class="headerlink" title="HDFS关键技术"></a>HDFS关键技术</h3><p>主从软件架构，主服务被称为NameNode，管理文件系统的元信息和从节点，从服务被称为DataNode，存储实际的数据块；DataNode与NameNode维护了周期性的心跳，为防止</p><h4 id="容错性设计（考）"><a href="#容错性设计（考）" class="headerlink" title="容错性设计（考）"></a>容错性设计（考）</h4><p>NameNode故障：为每个Active NameNode分配一个Standby NameNode<br>DataNode故障：冗余备份、心跳机制<br>数据块损坏：保存DataNode时生成校验码，读取数据时比较校验码</p><h4 id="副本放置策略"><a href="#副本放置策略" class="headerlink" title="副本放置策略"></a>副本放置策略</h4><p>HDFS默认采用三副本放置策略</p><h4 id="集中式缓存管理"><a href="#集中式缓存管理" class="headerlink" title="集中式缓存管理"></a>集中式缓存管理</h4><p>允许用户将一部分目录会文件缓存在off-heap内存中，以加速对这些数据的访问效率，该机制被称为集中式缓存管理。<br>优势：</p><ul><li>提高集群的内存利用率</li><li>防止被频繁使用的数据从内存中清除</li><li>提高数据读取的效率</li></ul><h3 id="HDFS访问方式"><a href="#HDFS访问方式" class="headerlink" title="HDFS访问方式"></a>HDFS访问方式</h3><h3 id="NoSQL数据库"><a href="#NoSQL数据库" class="headerlink" title="NoSQL数据库"></a>NoSQL数据库</h3><p>关系型数据库（如MySQL、Oracle）通过了严格的ACID测试。</p><ul><li>原子性（Atomicity）：单个事务为一个不可分割的最小工作单元</li><li>一致性（Consistency）</li><li>隔离性（Isolation）：一个事务所做的修改在最终提交以前，对其他事务是不可见的</li><li>持久性（Durability）：一旦事务提交，所作的修改就会永久保存到数据库中。</li></ul><h3 id="NoSQL与关系数据库的对比"><a href="#NoSQL与关系数据库的对比" class="headerlink" title="NoSQL与关系数据库的对比"></a>NoSQL与关系数据库的对比</h3><table><thead><tr><th>比较标准</th><th>关系型数据库</th><th>NoSQL</th></tr></thead><tbody><tr><td>查询方式</td><td>SQL</td><td>UnQL</td></tr><tr><td>数据完整性</td><td>容易实现</td><td>很难实现</td></tr><tr><td>一致性</td><td>强一致性</td><td>弱一致性</td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h3 id="NoSQL的三大基石"><a href="#NoSQL的三大基石" class="headerlink" title="NoSQL的三大基石"></a>NoSQL的三大基石</h3><h4 id="CAP"><a href="#CAP" class="headerlink" title="CAP"></a>CAP</h4><p>C（Consistency）：一致性，任何一个读操作总是能读到之前完成的写操作的结果。<br>A（Availability）：可用性，是指快速获取数据，可以再确定的时间内返回操作结果，保证每个请求不管成功或者失败都有相应。<br>P（Partition Tolerance）：分区容错性，</p><h4 id="BASE模型"><a href="#BASE模型" class="headerlink" title="BASE模型"></a>BASE模型</h4><p>BASE模型反ACID模型，基本含义是本基本可用（Basically Availability）、软状态和最终一致性。</p><h4 id="最终一致性"><a href="#最终一致性" class="headerlink" title="最终一致性"></a>最终一致性</h4><ul><li>N——数据复制的份数</li><li>W——更新数据时需要保证写完成的节点数</li><li>R——读取数据时</li></ul><h3 id="NoSQL数据库类型"><a href="#NoSQL数据库类型" class="headerlink" title="NoSQL数据库类型"></a>NoSQL数据库类型</h3><ul><li>Key-Value型（Redis、Riak、SimpleDB、Chordless、Scalaris、Memcached）<ul><li>key-value store</li></ul></li><li>Key-Column型</li><li>Key-Document模型</li><li>图模型</li></ul><h4 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h4><ul><li>STRING</li><li>LIST</li><li>SET</li><li>HASH</li><li>ZSET</li></ul><p>两种不同的持久化方法：</p><ul><li>快照</li><li>只追加文件</li></ul><h3 id="HBase"><a href="#HBase" class="headerlink" title="HBase"></a>HBase</h3><h3 id="时间序列数据库OpenTSDB"><a href="#时间序列数据库OpenTSDB" class="headerlink" title="时间序列数据库OpenTSDB"></a>时间序列数据库OpenTSDB</h3><p>不需要具体了解</p><h3 id="分布式列式存储系统Kudu"><a href="#分布式列式存储系统Kudu" class="headerlink" title="分布式列式存储系统Kudu"></a>分布式列式存储系统Kudu</h3><ul><li>HDFS使用列式存储格式，适合离线分析，不支持单条记录级别的update操作，随机读写性能差。</li><li>HBase可以进行高效随机读写，却并不适用于基于SQL的数据分析方向，大批量数据获取时的性能较差。</li><li>Kudu介于HDFS和HBase之间，比HBase批处理快，比HDFS随机读写性能强。</li></ul><p>Kudu是一个强类型的<strong>纯列式存储数据库</strong>。</p><ul><li>Kudu Master</li><li>Table Server<ul><li>通常有3个副本存放在不同的Table Server上</li><li>同一个副本分为leader和follower</li></ul></li></ul><p>完全的列式存储引擎，表中的每一列数据都是存放在一起，列与列之间都是分开的。</p><h3 id="云数据库"><a href="#云数据库" class="headerlink" title="云数据库"></a>云数据库</h3><p>为什么zookeeper通常由奇数个实例构成<br>2n+1个节点和2n+2个节点的容错数均为n个节点</p><p>observer不参与投票过程</p><h1 id="第三章-大数据分析和处理"><a href="#第三章-大数据分析和处理" class="headerlink" title="第三章 大数据分析和处理"></a>第三章 大数据分析和处理</h1><h2 id="3-1-分布式协调"><a href="#3-1-分布式协调" class="headerlink" title="3.1 分布式协调"></a>3.1 分布式协调</h2><h2 id="3-2-资源管理"><a href="#3-2-资源管理" class="headerlink" title="3.2 资源管理"></a>3.2 资源管理</h2><h3 id="资源管理与调度系统"><a href="#资源管理与调度系统" class="headerlink" title="资源管理与调度系统"></a>资源管理与调度系统</h3><p>•为了能够对集群中的资源进行统一管理和调度，Hadoop 2.0引入了数据操作系统YARN。</p><p>•YARN的引入<strong>大大提高了集群的资源利用率，并降低了集群管理成本</strong>。</p><p>•首先，YARN能够将资源按需分配给各个应用程序，这大大提高了资源利用率，其次，YARN允许各类短作业和长服务混合部署在一个集群中，并提供了容错、资源隔离及负载均衡等方面的支持，这大大简化了作业和服务的部署和管理成本。</p><h3 id="Yarn基本架构与原理"><a href="#Yarn基本架构与原理" class="headerlink" title="Yarn基本架构与原理"></a>Yarn基本架构与原理</h3><p><img src="/2023/11/25/da-shu-ju-ji-zhu-ji-chu-bi-ji/yarnStructure.png"></p><ul><li><p>Yarn总体上采用<strong>master/slave</strong>架构，其中，<strong>ResourceManager为master，NodeManager为slave</strong>, ResourceManager负责对各个NodeManager上的资源进行统一管理和调度。</p></li><li><p>当用户提交一个应用程序时，需要提供一个用以跟踪和管理这个程序的ApplicationMaster，它负责向ResourceManager申请资源，并要求NodeManager启动可以占用一定资源的任务，由于不同的ApplicationMaster被分布到不同的节点上，因此它们之间不会相互影响。</p></li></ul><h4 id="Yarn各组件详解"><a href="#Yarn各组件详解" class="headerlink" title="Yarn各组件详解"></a>Yarn各组件详解</h4><p><strong>ResourceManager (RM)</strong> ：是一个全局的资源管理器，负责整个系统的资源管理和分配。由两个组件构成：调度器(Scheduler) 和应用管理器(Applications Manager, ASM)  </p><p><strong>a)调度器</strong>： 主要功能是根据资源容量，队列等方面的限制条件，将系统中的资源分配给各个应用程序。&nbsp;&nbsp;</p><ul><li><p>YARN中的调度器是一个“纯调度器”，它不再从事任何与具体应用程序相关的工作，比如不负责监控或者跟踪应用的执行状态等，也不负责重新启动因应用执行失败或者硬件故障而产生的失败任务，这些均交由应用程序相关的ApplicationMaster完成。</p></li><li><p>调度器仅根据各个应用程序的资源需求进行资源分配，而资源分配单位用一个抽象概念“资源容器”( Resource Container，简称Container）表示，Container是一 个动态资源分配单位，它将内存、CPU、磁盘、网络等资源封装在一起，从而限定每个任务使用的资源量。</p></li><li><p>在YARN中，资源调度器是一个可插拔的组件，用户可以根据自己需要设计新的调度器，同时YARN也提供了多种直接可用的调度器，比如FAIR Scheduler和Capacity Scheduler。</p></li></ul><p><strong>b)应用管理器</strong>：负责管理整个系统中的所有应用程序。</p><ul><li>包括应用程序提交、与调度器协商资源以启动ApplicationMaster、监控ApplicationMaster运行状态并在失败时重新启动它等。为了避免单个ResourceManager出现单点故障导致整个集群不可用，YARN引入主备ResourceManager实现了高可用性（High Availability），当Active ResourceManager 出现故障时，StandbyResourceManager会通过ZooKeeper选举，自动提升为ActiveResourceManager。</li></ul><p><strong>ApplicationMaster (AM)</strong> ：用户提交的每个应用程序均包含一个独立的AM,其主要功能包括：</p><ul><li>与RM调度器协商以获取资源（用Container表示）。</li><li>将得到的资源进一步分配给内部的任务。</li><li>与NodeManager通信以启动/停止任务。</li><li>监控所有任务的运行状态，并在任务运行失败时重新为任务申请资源以重启任务。</li></ul><p><strong>NodeManager (NM)</strong> ： NM是每个节点上的资源管理器。</p><ul><li>会定时地向RM汇报本节点上的资源使用情况和各个Container的运行状态。</li><li>接收并处理来自AM的任务启动/停止等各种请求。在一个集群中，NM通常存在多个，由于YARN内置了容错机制，单个NM的故障不会对集群中的应用程序运行产生严重影响。</li></ul><p><strong>Container</strong> ： 是Yarn中的基本资源分配单位，是对应用程序运行环境的抽象，并为应用程序提供资源隔离环境。</p><ul><li><p>它封装了多维度的资源，如内存、CPU、 磁盘、网络等，当AM向RM申请资源时，RM为AM返回的资源便是用Container表示的。</p></li><li><p>Yarn中每个任务均会对应一个Container,且该任务只能使用该Container中描述的资源。需要注意的是，Container不同于MRv1中的slot，它是一个动态资源划分单位，是根据应用程序的需求动态生成的。</p></li><li><p>Container最终是由ContainerExecutor启动和运行的，YARN提供了三种可选的ContainerExecutor:<br>a)DefaultContainerExecutor：默认ContainerExecutor实现，直接以进程方式启动Container,不提供任何隔离机制和安全机制。<br>b)LinuxContainerExecutor：提供了安全和Cgroups隔离的ContainerExecutor，它以应用程序提交者的身份运行Container，且使用Cgroups为Container提供CPU和内存隔离注的运行环境。<br>c)DockerContainerExecutor：基于Docker注实现的ContainerExecutor,可直接在YARN集群中运行Docker Container。</p></li></ul><h4 id="Yarn高可用性"><a href="#Yarn高可用性" class="headerlink" title="Yarn高可用性"></a>Yarn高可用性</h4><p>YARN提供了恢复机制，这使得YARN在服务出现故障或人工重启时，不会对正在运行的应用程序产生任何影响。</p><p>a)<strong>ResourceManager HA（High Availability）</strong></p><p>• ResourceManager负责集群中资源的调度和应用程序的管理，是YARN最核心的组件。由于YARN采用了master/slave架构，这使得ResourceManager成为单点故障。为了避免ResourceManager故障导致整个集群不可用，YARN引入了<strong>Active/Standby ResourceManager</strong> ，通过冗余方式解决ResourceManager单点故障。</p><p>• 当Active ResourceManager 出现故障时，Standby ResourceManager 可通过ZooKeeper选举成为Active ResourceManager并通过ResourceManager Recovery机制恢复状态。</p><p>b)<strong>ResourceManager Recovery</strong></p><p>•ResourceManager内置了重启恢复功能，当ResourceManager就地重启，或发生Active/Standby切换时，不会影响正在运行的应用程序运行。主要流程为：保存元信息、加载元信息、重构状态信息。</p><h4 id="Yarn工作流程"><a href="#Yarn工作流程" class="headerlink" title="Yarn工作流程"></a>Yarn工作流程</h4><p>运行在Yarn上的应用程序主要分为两类：短作业和长服务。</p><ul><li><p>短作业是指一定时间内(可能是秒级、分钟级或小时级，尽管天级别或者更长时间的也存在，但非常少)可运行完成并退出的应用程序，比如MapReduce作业、Spark作业等</p></li><li><p>长服务是指不出意外，永不终止运行的应用程序，通常是一些在线服务，比如Storm Servive ( 主要包括Nimbus和Supervisor两类服务)、HBaseService ( 包括Hmaster和RegionServer两类服务)注等，而它们本身作为一个框架或服务提供了访问接口供用户使用。</p></li></ul><p>尽管这两类应用程序作用不同，一类直接运行数据处理程序，一类用于部署服务(服务之上再运行数据处理程序)，但运行在Yarn上的流程是相同的。</p><ul><li>当用户向Yarn中提交一个应用程序后，Yarn将分两个阶段运行该应用程序:</li><li>第一个阶段是启动ApplicationMaster。</li><li>第二个阶段是由ApplicationMaster创建应用程序，为它申请资源，并监控它的整个运行过程。</li></ul><p>YARN的工作流程分为以下几个步骤：</p><p><strong>1）提交应用程序</strong>：用户通过客户端与YARN ResourceManager通信，以提交应用程序，应用程序中需包含ApplicationMaster可执行代码、启动命令和资源需求、应用程序可执行代码和资源需求、优先级、提交到的队列等信息。</p><p><strong>2）启动ApplicationMaster</strong>： ResourceManager为该应用程序分配第一个Container,并与对应的NodeManager通信，要求它在这个Container中启动应用程序的ApplicationMaster之后ApplicationMaster的生命周期直接被ResourceManager管理。</p><p><strong>3） ApplicationMaster注册</strong>： ApplicationMaster启动后，首先，向ResourceManager注册，这样，用户可以直接通过ResourceManage查看应用程序的运行状态，然后，它将初始化应用程序，并按照一定的策略为内部任务申请资源，监控它们的运行状态，直到运行结束，即重复步骤4~7。</p><p><strong>4） 资源获取</strong>: ApplicationMaster采用轮询的方式通过RPC协议向ResourceManager申请和领取资源。</p><p><strong>5） 请求启动Container</strong> ：一旦ApplicationMaster申请到资源后，则与对应的NodeManager通信，请求为其启动任务（NodeManager会将任务放到Container中）。</p><p><strong>6）启动Container</strong>：NodeManager为任务设置好运行环境(包括环境变量、jar包、二进制程序等)后，将任务启动命令写到一个脚本中，并通过ContainerExecutor运行该脚本启动任务。</p><p><strong>7） Container监控</strong>：ApplicationMaster可通过两种方式获取各个Container的运行状态，以便在任务失败时重新启动任务。</p><p>•ApplicationMaster与ResourceManager间维护了周期性心跳信息，每次通信可获取自己分管的Container的运行状态。</p><p>•各个Container可通过某个RPC协议向ApplicationMaster汇报自己的状态和进度。</p><p><strong>8）注销ApplicationMaster</strong>：应用程序运行完成后，ApplicationMaster 向ResourceManager注销，并退出执行。</p><h2 id="3-3-大数据计算引擎"><a href="#3-3-大数据计算引擎" class="headerlink" title="3.3 大数据计算引擎"></a>3.3 大数据计算引擎</h2><h3 id="批处理引擎MapReduce"><a href="#批处理引擎MapReduce" class="headerlink" title="批处理引擎MapReduce"></a>批处理引擎MapReduce</h3><h4 id="MapReduce编程模型"><a href="#MapReduce编程模型" class="headerlink" title="MapReduce编程模型"></a>MapReduce编程模型</h4><p>MapReduce模型的目的是为了简化分布式数据处理，它是对大量分布式处理问题的总结和抽象，核心思想是分而治之，即将一个分布式计算过程拆解成两个阶段：</p><ul><li>第一阶段：<strong>Map阶段</strong>，由多个可并行执行的Map Task构成，主要功能是，<strong>将待处理数据集按照数据量大小切分成等大的数据分片，每个分片交由一个任务处理</strong>。</li><li>第二阶段：<strong>Reduce阶段</strong>，由多个可并行执行的Reduce Task构成，主要功能是，<strong>对前一阶段中各任务产生的结果进行规约，得到最终结果</strong>。</li></ul><p>MapReduce将待处理数据划分成若干个InputSplit（简称split），它是一个基本计算单位。<br>split是一个逻辑概念，它只包含一些元数据信息，比如数据起始位置、数据长度、数据所在节点等。split的多少决定了map task的数目，因为每个split会交由一个map task处理。</p><p>数据在MapReduce引擎中是以&lt;key，value&gt;形式流动的，每个split中的数据会被转换成一系列&lt;key，value&gt;。<br>MapReduce编程模型实际上是一种包含5个步骤的分布式计算方法：</p><ul><li>迭代遍历输入数据，并将之解析成&lt;key，value&gt;对；</li><li>将输入&lt;key，value&gt;对映射（map）成另外一些&lt;key，value&gt;对；</li><li>依据key对中间数据进行分组；</li><li>以组为单位对数据进行归约（reduce）；</li><li>迭代将最终产生的&lt;key，value&gt;保存到输出文件中。</li></ul><h5 id="shuffle"><a href="#shuffle" class="headerlink" title="shuffle"></a>shuffle</h5><p>（<strong>重要</strong>）Hadoop MapReducer对外提供了5个可编程组件，分别是<strong>InputFormat、Mapper、Partitioner、Reducer和OutputFormat</strong>，其中Mapper和Reducer跟应用程序逻辑相关，因此必须由用户编写。</p><h5 id="InputFormat"><a href="#InputFormat" class="headerlink" title="InputFormat"></a>InputFormat</h5><p>InputFormat主要用于描述输入数据的格式，它提供以下两个功能：</p><ul><li><strong>数据切分</strong>：按照某个策略将输入数据切分成若干个split，以便确定Map Task个数以及对应的split。</li><li><strong>为Mapper提供输入数据</strong>：给定某个split，能将其解析成一系列&lt;key，value&gt;对。</li></ul><h5 id="Mapper"><a href="#Mapper" class="headerlink" title="Mapper"></a>Mapper</h5><p>Mapper中封装了应用程序的数据处理逻辑，为了简化接口，MapReduce要求所有存储在底层分布式文件系统上的数据均要解释成&lt;key，value&gt;的形式，并以迭代方式依次交给Mapper中的map函数处理，产生另外一些&lt;key，value&gt;</p><h5 id="Partitioner"><a href="#Partitioner" class="headerlink" title="Partitioner"></a>Partitioner</h5><p>Partitioner的作用是<strong>对Mapper产生的中间结果进行分片，以便将同一组的数据交给同一个Reducer处理</strong>，它直接影响Reduce阶段的<strong>负载均衡</strong>。</p><h5 id="Reducer"><a href="#Reducer" class="headerlink" title="Reducer"></a>Reducer</h5><p>Reducer主要作用是，基于Mapper产生的结果<strong>进行规约操作，产生最终结果</strong>。</p><h5 id="OutputFormat"><a href="#OutputFormat" class="headerlink" title="OutputFormat"></a>OutputFormat</h5><p>OutputFormat主要用于<strong>描述输出数据的格式</strong>，它能够将用户提供key/value对写入特定格式的文件中。</p><h5 id="Combiner"><a href="#Combiner" class="headerlink" title="Combiner"></a>Combiner</h5><p>Combiner是一个<strong>可选的性能优化组件</strong>，可看作Map端的local reducer。它通常跟Reducer的逻辑是一样的，运行在Map Task中，主要作用是，<strong>对Mapper输出结果做一个局部聚集，以减少本地磁盘写入量和网络数据传输量，并减少Reducer计算压力</strong>。</p><h2 id="DAG计算引擎Spark"><a href="#DAG计算引擎Spark" class="headerlink" title="DAG计算引擎Spark"></a>DAG计算引擎Spark</h2><p>Spark是一个<strong>高性能DAG（Directed Acyclic Graph）计算引擎</strong>，它通过引入RDD（Resili-ent Distributed Datasets，弹性分布式数据集）模型，使得Spark具备类似MapReduce等数据流模型的容错特性，并且允许开发人员在大型集群上执行基于内存的分布式计算。</p><h3 id="Spark产生背景（MapReduce局限性）"><a href="#Spark产生背景（MapReduce局限性）" class="headerlink" title="Spark产生背景（MapReduce局限性）"></a>Spark产生背景（MapReduce局限性）</h3><ul><li>MapReduce一个最大的问题是在很多应用场景中速度非常慢，<strong>只适合离线的计算任务</strong>。</li><li><strong>仅支持Map和Reduce两种操作</strong>：MapReduce提供的编程接口过于低层次，这意味着，开发者即使仅完成一些常用功能，仍需编写大量代码，且可能需要实现多个Mapper和Reducer并进行组装，这大大增加了开发工作量。</li><li><strong>处理效率低效</strong>：任务调度和启动开销大、无法充分利用内存、Map端和Reduce端均需要排序和复杂功能磁盘IO开销大等。</li><li><strong>不适合迭代式和交互式计算</strong>：MapReduce是一种基于磁盘的分布式计算框架，它追求的是高吞吐率，而性能较为低效，这使得它不适合迭代式和交互式计算。</li></ul><p><img src="/2023/11/25/da-shu-ju-ji-zhu-ji-chu-bi-ji/MapreduceVSSpark.png" alt="|475"></p><h3 id="Spark编程模型"><a href="#Spark编程模型" class="headerlink" title="Spark编程模型"></a>Spark编程模型</h3><p>Spark中有两个核心概念：<strong>RDD（Resilient Distributed Datasets）和DAG（Directed Acyclic Graph）</strong>。</p><h4 id="RDD"><a href="#RDD" class="headerlink" title="RDD"></a>RDD</h4><p>RDD：Spark提出了一个数据集抽象概念RDD，即<strong>弹性分布式数据集</strong>，它是一个只读的、带分区的数据集合，并支持多种分布式算子。RDD是Spark计算引擎的核心，具有以下几个特点：</p><ul><li>分布在集群中的只读对象集合，由多个Partition构成，这些Partition可能存储在不同机器上。</li><li>RDD可以存储在磁盘或内存中，Partition可全部存储在内存或磁盘上，也可以部分在内存中，部分在磁盘上。</li><li>通过并行“转换”操作构造：Spark提供了大量API通过并行的方式构造和生成RDD。</li><li>失效后自动重构：RDD可通过一定计算方式转换成另外一种RDD（父RDD），这种通过转换而产生的RDD关系称为“血统”。Spark通过记录RDD的血统，可了解每个RDD的产生方式，进而能够通过重算的方式构造因机器故障或磁盘损坏而丢失的RDD数据。</li></ul><p>RDD只是一个逻辑概念，它可能并不对应磁盘或内存中的物理数据，而仅仅是记录了RDD的由来，包括父RDD是谁，以及自己是如何通过父RDD计算得到的。RDD由以下五部分构成：</p><ul><li>一组partition；</li><li>每个partition的计算函数；</li><li>所依赖的RDD列表（即父RDD列表）；</li><li>（可选的）对于key-value类型的RDD（每个元素是key-value对），则包含一个Partitioner；</li><li>（可选的）计算每个partition所倾向的节点位置（比如HDFS文件的存放位置）。</li></ul><p>作用在RDD上的操作（或称为“算子”）主要分为两类：transformation和action，他们的作用如下：</p><ul><li><strong>transformation：即“转换”</strong>，其主要作用是将一种RDD转换为另外一类RDD，比如通过“增加1”的转换方式将一个RDD[Int]转换成一个新的RDD[Int]。常用的transformatin操作包括map，filter，groupByKey等。</li><li><strong>action：即“行动”</strong>，其主要作用是通过处理RDD得到一个或一组结果，比如将一个RDD[Int]中所有元素值加起来，得到一个全局和。常用的action包括saveAsTextFile，reduce，count等。</li></ul><p>之所以将RDD操作分为transformation和action两类，主要是因为它们的接口定义方式和执行方式是不同的：</p><ul><li><strong>接口定义方式不同</strong>，具体如下：<ul><li>Transformation：RDD[X]→RDD[Y]<br>  （X和Y所代表的的数据类型可能不同）</li><li>Action：RDD[X]→Z<br>  （Z不是一个RDD，可能是基本类型，数组等）</li></ul></li><li><strong>执行方式不同</strong>：Spark程序是惰性执行（Lazy Execution）的，在RDD上的转换操作不会立即执行，而是在遇到行动操作（如收集数据或保存数据）时才会触发计算。</li></ul><h4 id="DAG"><a href="#DAG" class="headerlink" title="DAG"></a>DAG</h4><p>Spark是一个通用DAG引擎，这使得用户<strong>能够在一个应用程序中描述复杂的逻辑</strong>，以便于优化整个数据流（比如避免重复计算等），并让不同计算阶段<strong>直接通过本地磁盘或内存交换数据</strong>（而不是像MapReduce那样通过HDFS）。</p><p>如图展示同一SQL语句分别翻译成MapReduce和Spark后产生的DAG数据流。如果翻译成MapReduce，则会对应四个有依赖关系的作业，它们之间通过HDFS交换数据；而翻译成Spark则简单很多，只需要一个应用程序，其内部不同计算单元通过本地磁盘或内存交换数据（读写HDFS要比读写本地磁盘和内存慢很多），<strong>这使得磁盘和网络IO消耗更小，性能更加高效</strong>。<br><img src="/2023/11/25/da-shu-ju-ji-zhu-ji-chu-bi-ji/MapReduceVSSpark2.png" alt="|425"></p><h4 id="Spark运行基本流程"><a href="#Spark运行基本流程" class="headerlink" title="Spark运行基本流程"></a>Spark运行基本流程</h4><p><img src="/2023/11/25/da-shu-ju-ji-zhu-ji-chu-bi-ji/Pasted%20image%2020231215111520.png"></p><h4 id="Spark程序基本框架"><a href="#Spark程序基本框架" class="headerlink" title="Spark程序基本框架"></a>Spark程序基本框架</h4><ul><li>每个Spark应用程序的运行时环境是由<strong>一个Driver进程和多个Executor进程</strong>构成的，它们运行在不同机器上（也可能其中几个运行在同一个机器上，具体取决于资源调度器的调度算法），并通过网络相互通信。</li><li>Driver进程运行用户程序（main函数），并依次经历逻辑计划生成、物理计划生成、任务调度等阶段后，将任务分配到各个Executor上执行。</li><li>Executor进程是拥有独立计算资源的JVM实例，其内部以线程方式运行Driver分配的任务。<br>如图展示了一个Spark应用程序的运行时环境，该应用程序由1个Driver和3个Executor（可能分布到不同节点上）构成，每个Executor内部可同时运行4个任务：<br><img src="/2023/11/25/da-shu-ju-ji-zhu-ji-chu-bi-ji/SparkEnvironment.png" alt="|400"></li></ul><h1 id="第四章-大数据应用"><a href="#第四章-大数据应用" class="headerlink" title="第四章 大数据应用"></a>第四章 大数据应用</h1><h2 id="4-1-图计算"><a href="#4-1-图计算" class="headerlink" title="4.1 图计算"></a>4.1 图计算</h2><p>与传统计算模型相比，图计算主要针对解决以下问题：</p><ul><li>图计算的<strong>频繁迭代</strong>带来的读写数据等待和通信开销大的问题；</li><li>图算法对节点和边的邻居信息的<strong>计算依赖</strong>问题；</li><li>图数据的复杂结构使得图算法难以实现分布不均匀的分块上<strong>并行计算</strong>的问题。</li></ul><h3 id="Pregel"><a href="#Pregel" class="headerlink" title="Pregel"></a>Pregel</h3><h4 id="BSP"><a href="#BSP" class="headerlink" title="BSP"></a>BSP</h4><p>Pregel是一种基于BSP模型（Bulk Synchronous Parallel Computing Model，块同步并行计算模型）实现的并行图处理系统。</p><p>一次BSP计算过程包括一系列全局超步（所谓的超步就是计算中的一次迭代），每个超步主要包括三个组件：</p><ul><li>局部计算</li><li>通讯</li><li>栅栏同步</li></ul><h4 id="Pregel计算过程"><a href="#Pregel计算过程" class="headerlink" title="Pregel计算过程"></a>Pregel计算过程</h4><ul><li>在Pregel计算过程中，一个算法什么时候可以结束，是由所有顶点的状态决定的</li><li>在第0个超步，所有顶点处于活跃状态，都会参与该超步的计算过程</li><li>当一个顶点不需要继续执行进一步的计算时，就会把自己的状态设置为 “停机”，进入非活跃状态</li><li>一旦一个顶点进入非活跃状态，后续超步中就不会再在该顶点上执行计算，除非其他顶点给该顶点发送消息把它再次激活</li><li>当一个处于非活跃状态的顶点收到来自其他顶点的消息时，Pregel计算框架必须根据条件判断来决定是否将其显式唤醒进入活跃状态</li><li>当图中所有的顶点都已经标识其自身达到“非活跃（inactive）”状态，并且没有消息在传送的时候，算法就可以停止运行<br><img src="/2023/11/25/da-shu-ju-ji-zhu-ji-chu-bi-ji/exampleOfPregel.png" alt="|402"></li></ul>]]></content>
      
      
      <categories>
          
          <category> 课程笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 大数据技术基础 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
