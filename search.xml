<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2023/12/06/shu-ju-ku-bi-ji/"/>
      <url>/2023/12/06/shu-ju-ku-bi-ji/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="第七章-关系型数据库设计"><a href="#第七章-关系型数据库设计" class="headerlink" title="第七章 关系型数据库设计"></a>第七章 关系型数据库设计</h1><h3 id="设计目标"><a href="#设计目标" class="headerlink" title="设计目标"></a>设计目标</h3><ul><li>避免数据冗余</li><li>保存属性间的关系</li><li>便于检查数据更新是否违反完整性约束</li></ul><h3 id="函数依赖"><a href="#函数依赖" class="headerlink" title="函数依赖"></a>函数依赖</h3><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><p>当关系模式为R，其中 $\alpha \subseteq R$ 和 $\beta \subseteq R$。<br>如果在 R 上成立<strong>函数依赖</strong> $\alpha \rightarrow \beta$，则当对于 R 的任何合法关系 r(R) 时，只要关系中的任意两个元组 t1和 t2 在属性 $\alpha$ 上相同，它们在属性 $\beta$上也相同。也就是说，<br>$t1[\alpha] = t2[\alpha] =&gt; t1[\beta] = t2[\beta]$</p><h5 id="键"><a href="#键" class="headerlink" title="键"></a>键</h5><p>K是关系模式R的<strong>超键</strong> &lt;-&gt; K$\rightarrow$R<br>K是R的<strong>候选键</strong> &lt;-&gt; K$\rightarrow$R且不存在α$\subseteq$K，α$\rightarrow$R</p><h5 id="几种依赖"><a href="#几种依赖" class="headerlink" title="几种依赖"></a>几种依赖</h5><ul><li><strong>平凡依赖</strong>：平凡依赖是一种显而易见的依赖，它指的是一个属性或属性集总是依赖于自身的超集。例如，ID,name-&gt;ID；name-&gt;name</li><li><strong>传递依赖</strong>：如果存在依赖 A→B 和 B→C，那么可以推导出传递依赖 A→C。</li><li><strong>部分依赖</strong>：如果一个属性依赖于关键字的一部分，而不是整个关键字，那么就存在部分依赖。</li></ul><h5 id="逻辑蕴含"><a href="#逻辑蕴含" class="headerlink" title="逻辑蕴含"></a>逻辑蕴含</h5><p>在关系模式R上，有一个函数依赖集合F。如果对于R的每个关系实例r(R)，都满足某个特定的函数依赖f，那么我们说这个函数依赖f是由F逻辑上推导出来的。简而言之，<strong>如果关系的所有数据都符合某个函数依赖，那么我们就可以说这个函数依赖是由整体的函数依赖集合逻辑上推导出来的。</strong></p><h4 id="函数依赖集闭包"><a href="#函数依赖集闭包" class="headerlink" title="函数依赖集闭包"></a>函数依赖集闭包</h4><p>对于关系模式 R(U, F)，其中 U 是属性集合，F 是函数依赖集合，<strong>由 F 逻辑上推导出的所有函数依赖的集合称为 F 的闭包</strong>。</p><ul><li>例如，如果存在 A ➔ B 和 B ➔ C，那么我们可以推断出 A ➔ C。<br>我们用 $F^+$ 表示 F 的闭包。</li></ul><h5 id="Armstrong-公理"><a href="#Armstrong-公理" class="headerlink" title="Armstrong 公理"></a>Armstrong 公理</h5><p><img src="/2023/12/06/shu-ju-ku-bi-ji/Armstrong%E2%80%98s%20Axioms.png" alt="|425"></p><h5 id="计算-F"><a href="#计算-F" class="headerlink" title="计算$F^+$"></a>计算$F^+$</h5><blockquote><p>$F^+$=F<br>重复以下步骤：<br>    对于 F 中的每个函数依赖 f：<br>        - 应用<strong>自反律和增广律</strong>于 f，将得到的函数依赖添加到 $F^+$ 中。<br>     对于 $F^+$ 中的每对函数依赖 f1 和 f2：<br>        - 如果可以使用<strong>传递律</strong>规则合并 f1 和 f2，则将得到的函数依赖添加到 $F^+$ 中。<br>重复上述步骤，直到 $F^+$ 不再发生变化。</p></blockquote><h5 id="其他规则"><a href="#其他规则" class="headerlink" title="其他规则"></a>其他规则</h5><p><img src="/2023/12/06/shu-ju-ku-bi-ji/additional%20rules.png" alt="|400"></p><h4 id="属性集闭包"><a href="#属性集闭包" class="headerlink" title="属性集闭包"></a>属性集闭包</h4><p>给定一个属性集合 α，定义 $α^+$（属性集合闭包）为在 F 下由 α 函数决定的属性集合：<br>对于 a→β 在 $F^+$ 中成立 &lt;=&gt; β⊆$a^+$</p><h5 id="计算-a-的算法"><a href="#计算-a-的算法" class="headerlink" title="计算$a^+$的算法"></a>计算$a^+$的算法</h5><blockquote><p>输入：α，F<br>输出：$α^+$</p><p>result := a;<br>当（result仍在变化）时：<br>        对于 F 中的每个 β→γ：<br>            如果 β⊆result，则 result:=result∪γ</p></blockquote><h1 id="第十三章-数据存储结构"><a href="#第十三章-数据存储结构" class="headerlink" title="第十三章 数据存储结构"></a>第十三章 数据存储结构</h1><h2 id="存储访问"><a href="#存储访问" class="headerlink" title="存储访问"></a>存储访问</h2><h3 id="基本概念-1"><a href="#基本概念-1" class="headerlink" title="基本概念"></a>基本概念</h3><ul><li>一个数据库文件被分割成固定长度的存储单元，称为<strong>块</strong>。块是存储分配和数据传输的单位。</li><li>数据库系统的目标是<strong>最小化磁盘和内存之间的块传输次数</strong>，尽量将尽可能多的块保留在主内存中。</li><li><strong>缓冲区</strong> - 主内存中可用于存储磁盘块副本的部分。</li><li><strong>缓冲区管理器</strong> - 负责在主内存中分配缓冲区空间的子系统。</li></ul><h3 id="缓冲区管理器"><a href="#缓冲区管理器" class="headerlink" title="缓冲区管理器"></a>缓冲区管理器</h3><p>如果块已经在缓冲区中，请求的程序将获得主内存中该块的地址。<br>如果块不在缓冲区中， </p><ol><li>缓冲区管理器将在缓冲区中为该块分配空间，如果需要的话，替换（清除）其他块以为新块腾出空间。 </li><li>被清除的块只有在自上次写入/从磁盘获取以来被修改过时才会被写回磁盘。</li><li>一旦在缓冲区中分配了空间，缓冲区管理器将该块从磁盘读取到缓冲区，并将主内存中该块的地址传递给请求者。</li></ol><h3 id="缓冲区替换策略"><a href="#缓冲区替换策略" class="headerlink" title="缓冲区替换策略"></a>缓冲区替换策略</h3><p>大多数操作系统采用<strong>最近最少使用(LRU)</strong> 策略替换块。</p><p>查询具有明确定义的访问模式（例如顺序扫描），数据库系统可以使用用户查询中的信息来预测将来的引用。<br>对于涉及重复扫描数据的某些访问模式，LRU 可能是一个不好的策略，例如，在计算两个关系 r 和 s 的连接时通过嵌套循环：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for each tuple tr of r do </span><br><span class="line">    for each tuple ts of s do </span><br><span class="line">        if the tuples tr and ts match …</span><br></pre></td></tr></tbody></table></figure><p><strong>钉住的块</strong>  不允许写回磁盘的内存块。<br>在从块中读取/写入数据之前执行固定操作。<br>在读取/写入完成后执行取消固定操作。<br>可以进行多个并发的固定/取消固定操作。</p><p><strong>强制写出</strong>  将块强制写出到磁盘。</p><p><strong>立即丢弃</strong> 一旦处理完块的最后一个元组，就释放该块占用的空间。</p><p><strong>最近最常使用 (MRU)</strong> 策略 - 缓冲区管理器可以使用关于请求将引用特定关系的概率的统计信息。<br>例如，数据字典经常被访问。启发式方法：将数据字典块保留在主内存缓冲区中。</p><h3 id="缓冲区的共享锁和独占锁"><a href="#缓冲区的共享锁和独占锁" class="headerlink" title="缓冲区的共享锁和独占锁"></a>缓冲区的共享锁和独占锁</h3><p>需要防止并发操作（在页面内容被修改时读取页面内容，或者同时进行多个修改）</p><p>读者获取<strong>共享锁</strong>，写者获取<strong>独占锁</strong>。<br><strong>锁定规则</strong>：</p><ul><li>一次只能有一个进程获取独占锁。</li><li>共享锁不能与独占锁同时存在。</li><li>可以同时给予多个进程共享锁。</li></ul><h2 id="文件组织"><a href="#文件组织" class="headerlink" title="文件组织"></a>文件组织</h2><p>数据库以文件的形式存储。每个文件是一系列<strong>记录</strong>，记录是字段的序列。</p><h3 id="定长记录"><a href="#定长记录" class="headerlink" title="定长记录"></a>定长记录</h3><p>简单的存储方法方法： </p><ul><li>将记录 i 存储在字节 n * (i – 1) 处，其中 n 是每个记录的大小。 </li><li>记录访问简单，但记录可能跨越块。修改：不允许记录跨越块边界。</li></ul><p>删除记录 i 的替代方法：</p><ol><li>将记录 i + 1, . . ., n 移动到 i, . . . , n – 1</li><li>将记录 n 移动到 i</li><li>不移动记录，而是将所有空闲记录链接到一个空闲列表上</li></ol><h4 id="空闲列表"><a href="#空闲列表" class="headerlink" title="空闲列表"></a>空闲列表</h4><ul><li>将第一个删除的记录的地址存储在文件头中。</li><li>使用第一个记录来存储第二个删除的记录的地址，依此类推。<br><img src="/2023/12/06/shu-ju-ku-bi-ji/freeList.png"></li></ul><h3 id="变长记录"><a href="#变长记录" class="headerlink" title="变长记录"></a>变长记录</h3><p>变长记录在数据库系统中以几种方式出现：</p><ol><li>在文件中存储多个记录类型。</li><li>允许一个或多个字段的变长的记录类型。</li><li>允许重复字段的记录类型。</li></ol><h4 id="字节字符串表示"><a href="#字节字符串表示" class="headerlink" title="字节字符串表示"></a>字节字符串表示</h4><ul><li>将数据以字节的形式进行编码和存储，而不是以字符的形式。</li><li>可以准确地存储任意类型的数据，包括文本、图像、音频等，而不受字符编码的限制。</li><li>变长字段通常由两部分组成：<strong>偏移量和长度</strong>。偏移量表示变长字段在字节字符串中的起始位置，而长度表示该字段的实际字节数。</li><li>空值通过<strong>空值位图</strong>表示。</li><li>有时，在字节字符串的末尾可能会添加<strong>特殊的结束标志</strong>，以指示数据的结束。<br><img src="/2023/12/06/shu-ju-ku-bi-ji/byteString.png"></li></ul><h4 id="插槽页结构"><a href="#插槽页结构" class="headerlink" title="插槽页结构"></a>插槽页结构</h4><p><img src="/2023/12/06/shu-ju-ku-bi-ji/slotPage.png"><br>在数据库管理系统中，Slotted Page Structure 是一种用于组织和存储记录的数据页结构。每个数据页被划分为固定大小的插槽，每个插槽包含一个指向记录的指针，指示记录在页中的位置。</p><ul><li>插槽页头包含：</li></ul><ol><li>记录条目的数量。</li><li>数据块中空闲空间的末尾。</li><li>每个记录的位置和大小。</li></ol><ul><li>记录可以在页面内移动，以保持它们的连续性，没有空白空间分隔它们；必须更新页头中的条目。</li><li>指针不应直接指向记录，而应指向页头中记录条目的位置。</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>机器学习笔记</title>
      <link href="/2023/11/28/ji-qi-xue-xi-bi-ji/"/>
      <url>/2023/11/28/ji-qi-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="第七章-概率模型"><a href="#第七章-概率模型" class="headerlink" title="第七章 概率模型"></a>第七章 概率模型</h1><h2 id="概率模型基本概念"><a href="#概率模型基本概念" class="headerlink" title="概率模型基本概念"></a>概率模型基本概念</h2><h3 id="先验概率与后验概率"><a href="#先验概率与后验概率" class="headerlink" title="先验概率与后验概率"></a>先验概率与后验概率</h3><p><strong>先验概率</strong>：在考虑任何新的证据或信息之前，对事件发生的概率的估计。它是基于以往的经验、背景知识或主观判断而得出的概率。<br><strong>后验概率</strong>：考虑了新的证据或信息后，对事件发生的概率进行修正的概率。</p><h3 id="贝叶斯定理"><a href="#贝叶斯定理" class="headerlink" title="贝叶斯定理"></a>贝叶斯定理</h3><p><strong>贝叶斯定理</strong>连接了先验概率和后验概率。其表达式如下：</p><p>$$P(A|B) = \frac{P(B|A) \cdot P(A)}{P(B)}$$</p><p>其中：</p><ul><li>P(A|B)是后验概率，表示在给定证据 B 的情况下事件 A 发生的概率。</li><li>P(B|A)是似然度，表示在事件 A 发生的情况下得到证据 B 的概率。</li><li>P(A)是先验概率，表示在考虑证据 B 之前事件 A 发生的概率。</li><li>P(B)是归一化常数，确保后验概率的总和为1，计算为所有可能的事件 A 下发生 B 的概率的和。</li></ul><h3 id="概率模型"><a href="#概率模型" class="headerlink" title="概率模型"></a>概率模型</h3><p>概率模型就是将学习任务归结为<strong>计算变量的概率分布</strong>的机器学习模型。</p><p>假设有k种可能标签，记作$γ={c_1,c_2,…,c_k}$，对于输入样本集X中的x，分类为$c_j$的后验概率为$P(c_j|x),j=1,2,…,k$</p><ul><li>学习阶段直接构建后验概率$P(c_j|x)$模型，然后预测$c_j$的方法称为<strong>判别式概率模型</strong>。</li><li>学习阶段对联合概率分布$P(x,c_j)$建模，判别阶段基于联合概率分布得到后验概率$P(c_j|x)=\frac{P(x,c_j)}{P(x)}$来判别$c_j$的方法，称为<strong>生成式概率模型</strong>。</li></ul><p>常见的判别概率模型：</p><ul><li>线性分类器（将点到决策面的距离转换成概率）</li><li>感知机（sigmoid函数）</li><li>决策树</li><li>逻辑斯蒂回归模型</li></ul><p>常见的生成概率模型：</p><ul><li>朴素贝叶斯模型</li><li>高斯混合模型</li></ul><h2 id="贝叶斯决策"><a href="#贝叶斯决策" class="headerlink" title="贝叶斯决策"></a>贝叶斯决策</h2><p>对于分类任务而言，在知道所有概率分布的理想情况下，贝叶斯决策论是基<strong>于概率分布和误判损失选择最优类别标签</strong>的基本方法。</p><p>对于可能的标签集$γ={c_1,c_2,…,c_k}$和输入x，假设x的正确分类标签为$c_j$。如果将x错误分类到$c_i$，则产生损失。基于后验概率$P(c_i|x)$知：输入x分类到$c_i$所产生的期望损失为：<br>$$<br>损失函数L(c,f(x)) = \begin{cases}<br>0, &amp; c=f(x) \<br>1, &amp; c≠f(x)<br>\end{cases}<br>$$<br>$$<br>期望损失 E_{x,c}(L) = E_x\sum{j=1}^{k} P(c_j|x)<br>$$<br>最小化总体损失只需在每一个样本上使用条件损失最小的类别标签，即<br>$$<br>H^*(x)=arg \min_{c∈γ}\sum_{j=1}^{k}LP(c_j|x)<br>$$<br>由损失函数得<br>$$<br>\sum_{j=1}^kLP(c_j|x)=1-P(c|x)<br>$$<br>所以<strong>最小化分类错误率的贝叶斯最优分类器</strong>为：<br>$$<br>H^*(X)=arg \max_{C\inγ}P(c|x)<br>$$<br>称为<strong>最大后验概率准则</strong>。</p><h2 id="朴素贝叶斯模型"><a href="#朴素贝叶斯模型" class="headerlink" title="朴素贝叶斯模型"></a>朴素贝叶斯模型</h2><h3 id="似然函数"><a href="#似然函数" class="headerlink" title="似然函数"></a>似然函数</h3><p><strong>似然函数</strong>（Linkelihood Funciton）表示<strong>在给定一组观测数据下，关于模型参数的可能性有多大</strong>。设有一个统计模型，其中包含一个或多个参数，用θ表示这些参数。假设我们有一组观测数据X。似然函数L(θ|X)表示在给定参数值θ下，观测到数据X的概率。<br>形式上，似然函数可以写为：<br>$$<br>L(θ|X)=P(X|θ)<br>$$<br>在极大似然估计中，我们试图找到参数θ的值，使得似然函数取得最大值。即<strong>想办法让观察样本出现的概率最大</strong>。</p><p><img src="/2023/11/28/ji-qi-xue-xi-bi-ji/coinTossing1.png"><br><img src="/2023/11/28/ji-qi-xue-xi-bi-ji/coinTossing2.png"></p><h3 id="朴素贝叶斯模型-1"><a href="#朴素贝叶斯模型-1" class="headerlink" title="朴素贝叶斯模型"></a>朴素贝叶斯模型</h3><p>朴素贝叶斯模型：基于贝叶斯定理与特征条件独立假设的分类方法。</p><ol><li>基于特征条件独立假设<strong>学习输入/输出的联合概率分布</strong>。</li><li>基于此模型，对于给定的输入，用贝叶斯定理<strong>求出后验概率</strong>。</li><li>基于最大后验概率<strong>做出分类决策</strong>。</li></ol><p>例子（重要）：</p><p><img src="/2023/11/28/ji-qi-xue-xi-bi-ji/watermelonTable.png" alt="|500"></p><p><img src="/2023/11/28/ji-qi-xue-xi-bi-ji/watermelonStep1.png" alt="|416"><br><img src="/2023/11/28/ji-qi-xue-xi-bi-ji/watermelonStep2.png"><br><img src="/2023/11/28/ji-qi-xue-xi-bi-ji/watermelonStep2_.png" alt="|425"><br><img src="/2023/11/28/ji-qi-xue-xi-bi-ji/watermelonStep34.png" alt="|425"></p><h3 id="拉普拉斯修正"><a href="#拉普拉斯修正" class="headerlink" title="拉普拉斯修正"></a>拉普拉斯修正</h3><p>背景：由于实际训练样本有限，可能出现<strong>某个分类标签对应的样本数为0，或某类样本中某个属性取值出现的次数为0</strong>。一旦出现这些情况，连乘结果会一直为0。出现这种情况，不管其它属性提供的分类信息多么显著，都会被乘积为0“抹去”。</p><p>方法：拉普拉斯修正<br>$$<br>P(c_j)=\frac{λ+\sum_{i=1}^{M}I(y^{(i)}=c_j)}{M+Kλ},j=1,2,…,K<br>$$</p><p>$$<br>P(x_l=a_k|c_j)=\frac{λ+\sum_{i=1}^{M}I(y^{(i)}=c_j and x_l^{(i)} = a_k)}{Nλ+\sum_{i=1}^{M}I(y^{(i)}=c_j)}<br>$$<br>N为属性取值数目，λ经常取1。</p><h2 id="逻辑斯蒂回归模型"><a href="#逻辑斯蒂回归模型" class="headerlink" title="逻辑斯蒂回归模型"></a>逻辑斯蒂回归模型</h2><h3 id="逻辑斯蒂分布"><a href="#逻辑斯蒂分布" class="headerlink" title="逻辑斯蒂分布"></a>逻辑斯蒂分布</h3><p>逻辑斯蒂分布：<br>$$<br>F(x)=P(X≤x)=\frac{1}{1+e^{-(x-\mu)/γ}}<br>$$<br>μ为位置参数，γ&gt;0为形状参数。</p><p><img src="/2023/11/28/ji-qi-xue-xi-bi-ji/logisticDistribution.png" alt="|500"></p>]]></content>
      
      
      <categories>
          
          <category> 课程笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大数据技术基础小测二</title>
      <link href="/2023/11/28/da-shu-ju-ji-zhu-ji-chu-xiao-ce-er/"/>
      <url>/2023/11/28/da-shu-ju-ji-zhu-ji-chu-xiao-ce-er/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ol><li>Kafka在架构和应用定位上不包括：<br>A、存储的数据是多副本的，能够做到数据不丢<br>B、可将数据暂存一段时间(默认是一周)，供消费者重复读取，提供了类似于“发布订阅模式”的功能<br>C、提供memory channel和file channel，数据有可能丢失<br>D、生产者和消费者均需要用户使用API编写，仅提供了少量的与外部系统集成的组件&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [单选题]</li></ol><blockquote><p>解析：<br>A选项，<strong>Kafka通过在多个服务器上复制数据来确保数据的高可用性和持久性</strong>。这意味着即使某个服务器失败，Kafka也能保证数据不会丢失。<br>B选项，<strong>Kafka允许在服务器上暂存数据一段时间</strong>，这个时间是可配置的（默认情况下大约是一周）。这样，消费者可以在这段时间内重复读取数据。<strong>Kafka的这种功能支持发布订阅模式</strong>，其中生产者发布消息，而消费者订阅并读取这些消息。<br>C选项，Kafka本身不提供memory channel和file channel这样的概念。这些是Apache Flume的组成部分，另一个不同的数据集成工具。在Kafka中，数据的持久性和可靠性是通过复制和日志存储来实现的，并不直接依赖于内存或文件系统。<br>D选项，<strong>Kafka要求开发者使用其API来实现生产者和消费者</strong>。然而，<strong>Kafka提供了丰富的与外部系统集成的组件和连接器</strong>，例如Kafka Connect，这使得与外部系统的集成变得更加容易和灵活。答案选C</p></blockquote><ol start="2"><li>在Kafka中，每条数据被称为“消息”，每条消息表示为一个三元组，该三元组不包括：<br>A、topic B、key C、message D、value&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [单选题]</li></ol><blockquote><p>解析：在Kafka中，消息是通信的基本单位。每条消息都有三个主要组成部分：<br>A. <strong>Topic</strong>（主题）：标识消息所属的类别或主题，允许消息被发布到特定的类别。<br>B. <strong>Key</strong>（键）：是一个可选字段，用于标识消息的唯一性，帮助在分布式系统中将消息路由到特定的分区。<br>C. <strong>Message</strong>（值）：包含实际传输的数据，即消息的内容。<br>所以，在这个三元组中，不包括的部分是 D、value。</p></blockquote><ol start="3"><li>Producer负责将数据写入Broker，通常由用户根据实际需要编写，一般不包括以下哪个步骤：<br>A、创建配置对象ProducerConfig<br>B、定义分类区SimplePartitioner<br>C、创建Producer对象，并发送数据<br>D、创建配置对象ConsumerConfig&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [单选题]</li></ol><blockquote><p>解析：Producer负责将数据写入Broker，通常由用户根据实际需要编写。可根据以下三个步骤进行：<strong>创建配置对象ProducerConfig；定义分类区SimplePartitioner；创建Producer对象，并发送数据。</strong> D选项属于Consumer程序的步骤。</p></blockquote><ol start="4"><li>ZooKeeper内部存储着有关HBase的重要元信息和状态信息，担任着HMaster与RegionServer之间的服务协调角色，具体职责不包括：<br>A、保证任何时候，集群中可以存在多个HMaster；<br>B、存储所有Region的寻址入口；<br>C、实时监控RegionServer的上线和下线信息，并实时通知给HMaster；<br>D、存储HBase的schema和table元数据&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [单选题]</li></ol><blockquote><p>解析：<br>A选项，在HBase中，<strong>通常只有一个活动的HMaster</strong>，它负责协调和管理整个HBase集群。ZooKeeper确保集群中只有一个活跃的HMaster，并在HMaster失败时协助选举新的HMaster。因此，ZooKeeper不是用来保证多个HMaster同时存在的。<br>B选项，<strong>ZooKeeper在HBase中用于存储关于Region服务器的信息</strong>，包括它们的地址和状态，这样客户端和HMaster可以知道如何与这些Region服务器通信。<br>C选项，<strong>ZooKeeper监控着RegionServer的状态</strong>，包括它们的上线和下线。当RegionServer的状态发生变化时，ZooKeeper会及时通知HMaster，从而允许HMaster做出相应的调整。<br>D选项。承担了许多协调和管理的角色，<strong>负责存储HBase的schema和表的元数据</strong>。</p></blockquote><ol start="5"><li>根据接收者可能收到的重复消息的次数，将消息传递语义分为三种模式，其中，发送者发送后立即返回，不关心接收者是否收到这种模式是：<br>A、at least once B、at most once C、exactly once&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [单选题]</li></ol><p>&nbsp;</p><blockquote><p>解析：<br><strong>at most once</strong>：发送者将消息发送给消费者后，立刻返回，不会关心消费者是否成功收到消息。 这种情况下，消息可能被消费者成功接收，也可能丢失；<br><strong>at least once</strong>：发送者将消息发送给消费者后，需等待确认，如果未收到确认消息，则会重发消息。这种语义能保证消费者收到消息，但可能会收到多次；<br><strong>exactly once</strong>：消费者会且只会处理一次同一条消息。</p></blockquote><ol start="6"><li>下列关于网络数据采集说法错误的是<br>A.网络数据采集是指通过网络爬虫或网站公开API等方式从网站上获取数据信息，支持图片、音频、视频等文件或附件的采集，附件和正文可以自动关联<br>B.网络爬虫的常见抓取策略有宽度优先策略、反向链接策略、PartialPageRank策略、OPIC策略、大站优先策略等<br>C.单个抓取程序足以胜任大规模的分布式抓取系统，不需要多个抓取程序协同工作<br>D.Scrapy Engine作为Scrapy内部的主要组件构成，负责控制系统所有组件之间的数据流，并在发生某些操作时触发事件&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [单选题]</li></ol><blockquote><p>解析：一般来说，大规模的分布式抓取系统需要抓取整个互联网上数以亿计的网页，单个抓取程序难以胜任，往往需要多个抓取程序协同工作。</p></blockquote><ol start="7"><li>下列关于HDFS关键技术说法正确的是（ABD）<br>A. HDFS的数据块损坏容错性设计为：DataNode保存数据块时，会同时生成一个校验码。当存取数据块时，如果发现校验码不一致则认为该数据块已经损坏，NameNode会通过其他节点上的正常副本重构受损的数据块。<br>B. HDFS的副本放置策略与集群物理拓扑结构是直接相关的。<br>C. HDFS只提供了API方式，让用户管理集中式缓存系统中的文件和目录，可以根据需要将一个文件增加到缓存中，或从缓存中移除。<br>D. HDFS支持多种常用存储类型，包括：ARCHIVE、DISK、SSD、RAM_DISK。</li></ol><blockquote><p>解析：HDFS允许用户将一部分目录或文件缓存在off-heap内存中，以加速对这些数据的访问效率，该机制被称为集中式缓存管理。<strong>为了方便用户管理集中式缓存系统中的文件和目录，HDFS提供了API和命令行两种方式</strong>，可以根据需要将一个文件增加到缓存中，或从缓存中移除。</p></blockquote><ol start="8"><li>下列关于NoSQL说法错误的是（B）<br>A. NoSQL是非关系型数据库的统称，采用类似键-值、列族、文档等非关系模。<br>B. 关系型数据库是横向扩展的，NoSQL数据库是纵向扩展的。<br>C. NoSQL以块为单元操作数据，使用的是非结构化的查询语言。<br>D. NoSQL存储的格式都是key-value类型的，并且存储在内存中，非常容易存储，而且对于数据的一致性是弱要求。NoSQL无需SQL的解析，提高了读写性能。</li></ol><blockquote><p>解析：纵向扩展(scale-up)是指利用现有的存储系统，通过不断增加存储容量来满足数据增长的需求；横向扩展(scale-out)是指以网络互连的节点为单位扩大存储容量(集群)。<br><strong>关系系型数据库是纵向扩展</strong>，也就是说想要提高处理能力，要使用速度更快的计算机。<br><strong>Nosql数据库是横向扩展的</strong>，它的存储天然就是分布式的，可以通过给资源池添加更多的普通数据库服务器来分担负载。</p></blockquote><ol start="9"><li>RegionServer写流程的具体流程包括：<br>A、RegionServer收到写请求后，将写入的数据以追加的方式写入HDFS上的日志文件WAL；<br>B、扫描器查找缓存BlockCache，它内部缓存了最近读取过的数据<br>C、RegionServer将数据写入内存数据结构MemStore中，之后通知客户端数据写入成功；<br>D、当MemStore所占内存达到一定阈值后，RegionServer会将数据顺序刷新到HDFS中，保存成HFile格式的文件</li></ol><blockquote><p>解析：ACD<br>扫描器查找缓存BlockCache，它内部缓存了最近读取过的数据。这个选项似乎不是写流程的一部分，而是读流程的一部分，因此不包括在内</p></blockquote><ol start="10"><li>下列关于文件存储格式说法正确的是：<br>A.文件存储格式直接决定了数据存取效率以及被上层分布式计算集成的容易程度<br>B.常见的存储格式包括行式存储和列式存储两种：行式存储以文本格式Text File、key/value二进制存储格式Sequence File为典型代表；列式存储以ORC、Parquet和Carbon Data三种文件格式为代表<br>C.行存储和列存储的写入都是一次完成，性能较高<br>D.行存储将每行数据存储在一起，压缩比较低；列存储以列为单位存储数据，使得类型相同的数据存放在一起，对压缩算法友好，压缩比较高</li></ol><blockquote><p>解析：ABD<br>行存储和列存储的写入都是一次完成，性能较高。这是不准确的，因为写入性能的高低受多种因素影响，并不仅仅取决于存储格式。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 应试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据技术基础 </tag>
            
            <tag> 试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大数据技术基础小测一</title>
      <link href="/2023/11/28/da-shu-ju-ji-zhu-ji-chu-xiao-ce-yi/"/>
      <url>/2023/11/28/da-shu-ju-ji-zhu-ji-chu-xiao-ce-yi/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ol><li><p>当前大数据技术的基础是由( )首先提出的<br>A.&nbsp; 微软<br>B.&nbsp; 谷歌<br>C.  百度<br>D.  阿里巴巴</p><details><summary>查看答案</summary>解析： Google在大数据方面的技术，均是以发表论文的形式对外公开的，尽管其没有对外开源&gt;系统实现代码，但这些论文直接带动了大数据技术的发展，尤其为大数据开源技术的发展指明了方向。对外公开的技术包括GFS、BigTable、MapReduce、Chubby、Pregel等。</details></li><li><p>在数据度量中，1ZB是多大（ ）<br>A.  10^15<br>B.&nbsp;&nbsp;10^18<br>C.&nbsp;&nbsp;10^21<br>D.&nbsp;&nbsp;10^24</p><details><summary>查看答案</summary>解析：数据单位按照从小到大依次是TB,PB,EB,ZB,YB,分别是10^12,10^15,10^18,10^21,10^24</details></li><li><p>网页、视频、图片、用户行为日志属于哪种数据（ ）<br>A.  结构化数据<br>B.&nbsp;&nbsp;非结构化数据<br>C.&nbsp;&nbsp;都不是<br>D.&nbsp;&nbsp;都是</p><details><summary>查看答案</summary>解析：<b>非结构化数据</b>指数据结构不规则或不完整，没有预定义的数据模型，不方便用数据库二维逻辑表来表现的数据。如word、pdf、ppt及各种格式的图片、视频等。<b>结构化数据</b>指关系模型数据，即<b>以关系数据库表形式管理的数据</b>，结合到典型场景中更容易理解，比如企业ERP(Enterprise resource Planning)、OA(Office Automation)、HR(Human Resource)里的数据。 &nbsp;</details></li><li><p>下列不属于大数据的4V特征的是（ ）<br>A.  Volume（量大）<br>B.  Velocity（快速化）<br>C.  Variety（多样化）<br>D.  Value（价值密度高）</p><details><summary>查看答案</summary>解析：大数据具备价值密度低、商业特征高的特征。大数据的4V特征：量大（Volume） 多样化（Variety） 快速化（Velocity） 价值密度低（Value）</details></li><li><p>MapReduce,Spark属于哪种计算模式（ ）<br>A.  批处理计算<br>B.  流计算<br>C.&nbsp;&nbsp;图计算<br>D.&nbsp;&nbsp;查询分析计算</p><details><summary>查看答案</summary>解析：<b>批处理计算</b>是针对大规模数据的批处理，代表产品有MapReduce、Spark等；<b>流计算</b>是针对流数据的实时计算，代表产品有Storm、S4、Flume、Streams、Puma、Dstream、银河流数据处理平台等；<b>图计算</b>是针对大规模图结构数据的处理，代表产品有Pregel、GraphX、Giraph等；<b>查询分析计算</b>是针对大规模数据的存储管理和查询分析，代表产品有Dremel、Hive、Cassandra、 Impala等。</details></li><li><p>以下哪个不是大数据时代新兴的技术（ ）<br>A.  HBase<br>B.  Spark<br>C.  MySQL<br>D.  Hadoop</p><details><summary>查看答案</summary>解析：Hbase和Spark都属于大数据技术的重要组成部分，而MySQL并不适合大数据。</details></li><li><p>每种大数据产品都有特定的应用场景，以下哪个产品是用于批处理的（ ）：<br>A.  Storm<br>B.  MapReduce<br>C.  Pregel<br>D.  Dremel</p><details><summary>查看答案</summary>解析：批处理计算是针对大规模数据的批处理，代表产品有MapReduce、Spark等；</details></li><li><p>下列叙述不恰当的是（ ）：<br>A.  大数据时代可以分析更多数据，甚至可以处理和某个特别现象相关的全部数据，而不再依赖于随机采样。<br>B.  从对象角度看，大数据是大小超出典型数据库软件采集、储存、分析和管理等能力的数据集合。<br>C.  大数据时代，数据量极大，但纷繁复杂的数据是不可接受的，所以仍需追求精确性。<br>D.  批处理计算、流计算、图计算与查询分析计算是常见的四种大数据计算模式。</p><details><summary>查看答案</summary>解析：大数据时代追求效率而非精确：大数据时代，数据量极大，乐于接受数据的纷繁复杂，而不再追求精确性；</details></li><li><p>下面哪一项不属于Hadoop与Spark开源大数据技术栈的层级（ ）<br>A.  数据收集<br>B.  数据存储<br>C.  计算引擎<br>D.  数据清洗</p><details><summary>查看答案</summary>解析：随着大数据开源技术的快速发展，目前开源社区已经积累了比较完整的大数据技术栈，应用最广泛的是以Hadoop与Spark为核心的生态系统，整个大数据技术栈涉及<b>数据收集、数据存储、资源管理与服务协调、计算引擎和数据分析这五个层级</b>。</details></li><li><p>下面哪一项不属于Hadoop与Spark开源大数据技术栈的数据存储层的技术（ ）<br>A.  HDFS<br>B.  Kudu<br>C.  ZooKeeper<br>D.  HBase</p><details><summary>查看答案</summary>解析：数据存储层主要由分布式文件系统（面向文件的存储）和分布式数据库（面向行/列的存储）构成。</details></li></ol><ul><li>HDFS：Hadoop分布式文件系统，具有良好的扩展性与容错性等优点</li><li>HBase：构建在HDFS之上的分布式数据库，允许用户存储结构化与半结构化的数据</li><li>Kudu：分布式列式存储数据库，允许用户存储结构化数据，支持行无限扩展以及数据随机查找与更新</li></ul>]]></content>
      
      
      <categories>
          
          <category> 应试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据技术基础 </tag>
            
            <tag> 试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统笔记</title>
      <link href="/2023/11/25/cao-zuo-xi-tong-bi-ji/"/>
      <url>/2023/11/25/cao-zuo-xi-tong-bi-ji/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="第八章-内存管理"><a href="#第八章-内存管理" class="headerlink" title="第八章 内存管理"></a>第八章 内存管理</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><ul><li>CPU能直接访问的存储器：<strong>寄存器和内存</strong>。</li><li>程序必须（从磁盘）<strong>装到内存</strong>中才能执行。</li><li>在处理地址空间和内存管理方面，程序员主要关注<strong>逻辑地址</strong>，操作系统主要关注<strong>内存大小</strong>、<strong>地址绑定</strong>以及<strong>内存保护</strong>。</li><li>寄存器通常在一个CPU时钟周期内（或更少）就可以完成访问，而内存通常需要多个CPU时钟周期访问。当CPU已读入指令但尚未从内存中读取完数据时，会暂停导致CPU利用率降低。为解决这个问题，在内存和CPU之间引入了<strong>高速缓存Cache</strong>（将<strong>需要频繁读取的数据从内存暂存到Cache中</strong>），通常位于CPU上。</li><li><strong>内存保护</strong>需要保证执行正确的操作。</li></ul><h2 id="基址寄存器和限址寄存器"><a href="#基址寄存器和限址寄存器" class="headerlink" title="基址寄存器和限址寄存器"></a>基址寄存器和限址寄存器</h2><ol><li><strong>基址寄存器</strong>（Base Register）：存储基址，表示一个可用内存块的<strong>起始地址</strong>。</li><li><strong>限址寄存器</strong>（Limit Register）：存储限址，表示基址寄存器定义的<strong>内存块大小</strong>。</li></ol><p><img src="/2023/11/25/cao-zuo-xi-tong-bi-ji/base&amp;limit.png" alt="|334"></p><h2 id="地址绑定"><a href="#地址绑定" class="headerlink" title="地址绑定"></a>地址绑定</h2><p><strong>地址绑定</strong>：在程序的执行过程中，将程序中的逻辑地址（或虚拟地址）映射到实际的物理地址的过程。这个过程可以在编译时、加载时或运行时发生。</p><p>一个程序运行的流程：<strong>编译（编译成机器码）–&gt;链接（链接外部模块）–&gt;加载（加载进内存）–&gt;执行</strong>。</p><h3 id="地址绑定的时机"><a href="#地址绑定的时机" class="headerlink" title="地址绑定的时机"></a>地址绑定的时机</h3><ul><li><strong>编译时</strong>绑定：若编译时已知进程在内存中驻留的地址，即可生成绝对代码。如果未来地址发送变化，程序需要<strong>重新编译</strong>。（<strong>静态重定位，不需要硬件支持</strong>）</li><li><strong>加载时</strong>绑定：编译时生成可重定位代码。加载时再进行绑定，此时若内存地址发生变化，只需要<strong>重新加载程序</strong>。（<strong>静态重定位，不需要硬件支持</strong>）</li><li><strong>运行时</strong>绑定：如果一个进程在运行时可从一个内存段移到另一个内存段，那么绑定将延迟到运行时进行。如果要改变内存地址，只需要改变基址寄存器的值即可。（<strong>动态重定位，需要硬件支持，如基址寄存器、限址寄存器和MMU，为大多数操作系统采用</strong>）</li></ul><h2 id="逻辑地址vs-物理地址"><a href="#逻辑地址vs-物理地址" class="headerlink" title="逻辑地址vs.物理地址"></a>逻辑地址vs.物理地址</h2><ol><li>逻辑地址</li></ol><ul><li>程序运行时由CPU产生的<strong>虚拟地址</strong>。</li><li>CPU利用逻辑地址访问内存中的物理地址并获取数据。</li><li>CPU产生的逻辑地址集合被称为<strong>逻辑地址空间</strong>。</li></ul><ol start="2"><li>物理地址</li></ol><ul><li>内存中数据的<strong>实际地址</strong>，由<strong>内存管理单元</strong>（MMU）计算得出。</li><li>物理地址对用户程序<strong>不可见</strong>。</li><li>物理地址的集合被称为<strong>物理地址空间</strong>。</li></ul><h2 id="内存管理单元（MMU）"><a href="#内存管理单元（MMU）" class="headerlink" title="内存管理单元（MMU）"></a>内存管理单元（MMU）</h2><ul><li>完成从逻辑地址到物理地址的映射。</li><li>逻辑地址 + 重定位寄存器中的值 = 物理地址。</li></ul><p><img src="/2023/11/25/cao-zuo-xi-tong-bi-ji/MMU.png" alt="|400"></p><h2 id="动态加载和动态链接"><a href="#动态加载和动态链接" class="headerlink" title="动态加载和动态链接"></a>动态加载和动态链接</h2><p>一个程序运行的流程：<strong>编译（编译成机器码）–&gt;链接（链接外部模块）–&gt;加载（加载进内存）–&gt;执行</strong>。但链接和加载有时也可以在执行时动态进行。</p><p><img src="/2023/11/25/cao-zuo-xi-tong-bi-ji/link&amp;load.png" alt="|500"></p><ul><li>动态链接（运行时链接）：将链接的过程推迟到程序实际执行的时候，利用<strong>存根</strong>（stub）定位内存中的库历程并执行，允许多个程序共享相同的库(被称为<strong>共享库</strong>)，减少了重复的代码和内存占用。需要操作系统的支持。</li><li>动态加载（运行时加载）：将不常用的代码（例如用于异常处理的代码）写入到模块程序中，只有当需要时才会加载进入内存。<strong>提高了内存空间利用率</strong>。不需要系统提供特别的支持，通常是程序员实现。例子：<strong>Windows操作系统的各种DLL库</strong>。</li></ul><h2 id="交换（Swapping）"><a href="#交换（Swapping）" class="headerlink" title="交换（Swapping）"></a>交换（Swapping）</h2><p>一个进程可以<strong>暂时</strong>从内存中交换到<strong>备份区</strong>，之后再被换回内存中继续执行。允许操作系统更有效地利用有限的物理内存资源，类似于进程调度中的<strong>中期调度</strong>。</p><p><img src="/2023/11/25/cao-zuo-xi-tong-bi-ji/Swapping.png" alt="|375"></p><ul><li><strong>备份区</strong>：一个足够大的<strong>可以容纳所有用户内存映像拷贝的快速磁盘</strong>，提供对这些内存映像的直接访问。</li><li><strong>换入，换出</strong>（Roll out，roll in）：换出低优先级的进程，以装入执行高优先级的进程。</li><li>交换时间的<strong>主要部分是传输时间</strong>。</li><li>系统维护一个<strong>已准备运行的进程队列</strong>，这些进程在磁盘上有内存映像。</li></ul><h2 id="连续内存分配"><a href="#连续内存分配" class="headerlink" title="连续内存分配"></a>连续内存分配</h2><h3 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h3><p>内存通常分为两个部分：</p><ul><li><strong>操作系统和中断向量</strong>通常放在<strong>低内存</strong>中。</li><li><strong>用户进程</strong>放在<strong>高内存</strong>中。</li></ul><p>再分配寄存器用于<strong>防止用户进程相互越界访问</strong>，并且<strong>避免它们修改操作系统</strong>的代码和数据。</p><p><img src="/2023/11/25/cao-zuo-xi-tong-bi-ji/addressProtection.png" alt="|400"></p><ul><li><strong>基址寄存器</strong>存储物理地址的最小值。</li><li><strong>限址寄存器</strong>存储逻辑地址的范围——所有逻辑地址都要比这个值小。</li><li><strong>MMU</strong>实现逻辑地址的动态映射。</li></ul><h3 id="多区分配"><a href="#多区分配" class="headerlink" title="多区分配"></a>多区分配</h3><ul><li><strong>空闲块（hole）</strong>——可用的内存块。</li><li>当一个进程到达时，从足<strong>够容纳该进程的空闲块</strong>中分配内存。</li><li>操作系统维护有关<strong>已分配分区和空闲分区</strong>的信息。</li></ul><p><img src="/2023/11/25/cao-zuo-xi-tong-bi-ji/Contiguous%20Allocation.png" alt="|550"></p><p>分配策略：</p><ul><li><strong>首次适应</strong>：分配首个足够大的孔。</li><li><strong>最优适应</strong>：分配最小的足够大的孔。</li><li><strong>最差适应</strong>：分配最大的足够大的孔。<br>在速度和空间利用率上，首次适应和最优适应要优于最差适应。</li></ul><h2 id="碎片"><a href="#碎片" class="headerlink" title="碎片"></a>碎片</h2><ul><li><strong>外部碎片</strong>：全部的可用空间可以满足一个进程的请求但<strong>不连续</strong>。</li><li><strong>内部碎片</strong>：<strong>分配给进程的内存大于进程申请的内存</strong>，造成内存浪费。</li></ul><p>通过<strong>压缩</strong>（compaction）可以减少外部碎片：</p><ul><li>重新排列内存内容，将所有的空闲内存拼成一个大的空闲块。</li><li>需要满足动态重定位，且在执行时才能发生。</li></ul><h2 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><ul><li><p>把<strong>物理内存</strong>分为等大小（2的幂次）的块，叫做<strong>帧或页帧</strong>。</p></li><li><p>把<strong>逻辑内存</strong>分为等大小的块，叫做<strong>页或页面</strong>。</p></li><li><p>当执行一个<strong>n页</strong>的进程时，需要找到<strong>n个空闲帧</strong>加载程序。</p></li><li><p>系统通过<strong>帧表</strong>保留所有的空闲帧，通过<strong>页表</strong>实现逻辑内存到物理内存的映射。</p></li><li><p>每个进程都拥有一个页表，存放着自己的<strong>逻辑地址空间（页）与物理地址空间（帧）的映射</strong>。</p></li><li><p>分页使分页内存完全独立于物理内存，<strong>解决了外部碎片</strong>（内存和进程都被分成碎片，内存碎片可以被利用而不是浪费），<strong>但仍有内部碎片</strong>。</p></li></ul><h3 id="地址转换机制"><a href="#地址转换机制" class="headerlink" title="地址转换机制"></a>地址转换机制</h3><ul><li>逻辑地址表示为：<strong>页码</strong>（page number）+<strong>页偏移</strong>（page offset）。</li><li>页码：页表的索引，通过页码在页表中找到对应的帧号。</li><li>页偏移：数据在页内的偏移值。</li></ul><p><img src="/2023/11/25/cao-zuo-xi-tong-bi-ji/pageNumberOffset.png"><br>逻辑地址空间 $2^m$     页大小$2^n$</p><p><img src="/2023/11/25/cao-zuo-xi-tong-bi-ji/Paging%20Hardware.png"></p><ul><li>在页表中根据页号找到帧号。</li><li>帧号和页内偏移构成物理地址。</li></ul><h3 id="页表"><a href="#页表" class="headerlink" title="页表"></a>页表</h3><h4 id="页表的实现"><a href="#页表的实现" class="headerlink" title="页表的实现"></a>页表的实现</h4><ul><li>页表存放在内存中，<strong>页表基地址寄存器</strong>（PTBR）指向页表的基地址，<strong>页表限长寄存器</strong>（PTLR）表示页表的长度。</li><li>这种模式下<strong>每次数据/指令访问需要两次内存访问</strong>：先访问页表获取帧号，再访问数据/指令。使用<strong>转换表缓冲区</strong>（TLBs，也称联想寄存器）解决两次访问的问题：是<strong>高速硬件Cache</strong>，存储少数频繁访问的页表条目，访问几乎不需要额外开销。<ul><li>所需条目在TLB中，直接读取帧号，计算物理地址并访问。</li><li>所需条目不在TLB中：从内存中的页表读取帧号，并将页码和帧号存入TLB，若TLB已满则采用相应的替换策略。</li></ul></li></ul><p><img src="/2023/11/25/cao-zuo-xi-tong-bi-ji/PagingHardwareWithTLB.png" alt="|425"></p><h4 id="有效访问时间"><a href="#有效访问时间" class="headerlink" title="有效访问时间"></a>有效访问时间</h4><ul><li>关联查找时间：ε</li><li>假设内存访问时间是1ms</li><li>命中率：α<br><img src="/2023/11/25/cao-zuo-xi-tong-bi-ji/EATofTLB.png" alt="|475"></li></ul><h4 id="内存保护"><a href="#内存保护" class="headerlink" title="内存保护"></a>内存保护</h4><p>页表中的每一个表项都有一个有效-无效位。</p><ul><li>有效表示页面合法且在进程的逻辑地址空间内。</li><li>无效表示不在进程的逻辑地址空间内。</li></ul><p><img src="/2023/11/25/cao-zuo-xi-tong-bi-ji/Valid-InvalidBit.png" alt="|450"></p><h4 id="共享页"><a href="#共享页" class="headerlink" title="共享页"></a>共享页</h4><ul><li><strong>只读（可重入）代码</strong>的一份拷贝在多个进程之间共享。</li><li>共享代码必须出现在<strong>所有进程的逻辑空间中的相同位置</strong>。</li></ul><p><img src="/2023/11/25/cao-zuo-xi-tong-bi-ji/Shared%20Pages.png" alt="|400"></p><h4 id="页表的结构"><a href="#页表的结构" class="headerlink" title="页表的结构"></a>页表的结构</h4><h5 id="层次页表"><a href="#层次页表" class="headerlink" title="层次页表"></a>层次页表</h5><p>将页表再分页，使用时先利用外部页表的页码和外部页表的页偏移获取内部页表的帧号，再计算物理地址，存取数据。（除了二级页表外，还有三级甚至四级页表等）。</p><p><img src="/2023/11/25/cao-zuo-xi-tong-bi-ji/Two%20Level%20Page%20Table.png" alt="|350"></p><p><img src="/2023/11/25/cao-zuo-xi-tong-bi-ji/Address%20Translation.png" alt="|525"></p><h5 id="哈希页表"><a href="#哈希页表" class="headerlink" title="哈希页表"></a>哈希页表</h5><p><strong>处理超过32位地址空间的一种常用方法</strong>，防止存储时稀疏问题，解决了浪费（<strong>允许页表项只在需要时被分配</strong>）。</p><p>实现：</p><ul><li>将<strong>虚拟页码哈希到哈希表</strong>，每个哈希表的条目中存储了一个<strong>链表</strong>（拉链法解决哈希时的碰撞），链表每个元素含有三个字段：（1）虚拟页码（2）帧号（3）指向下个元素的指针。</li><li>将虚拟页码与哈希表中第一个元素的第一个字段比较，如果相同，那么取出帧号计算物理地址。否则利用指针访问下个元素，再次比较。</li></ul><p><img src="/2023/11/25/cao-zuo-xi-tong-bi-ji/Hashed%20Page%20Table.png" alt="|500"></p><h5 id="倒置页表（反向页表）"><a href="#倒置页表（反向页表）" class="headerlink" title="倒置页表（反向页表）"></a>倒置页表（反向页表）</h5><p><strong>为每个物理内存帧创建一个对应页的条目</strong>，使页表按照物理内存排序，<strong>所有进程共享一张页表</strong>。</p><ul><li>倒置页表不包含进程逻辑地址空间的完整信息，每个进程必须将完整信息保存在外存的<strong>外部页表</strong>中。外部页表按需调入内存。</li><li>优点：减少了物理内存的使用。</li><li>缺点：进程较少时，检索时间较长。（原先直接访问，现在需要遍历搜索）。实现共享内存困难。</li></ul><p><img src="/2023/11/25/cao-zuo-xi-tong-bi-ji/Inverted%20Page.png" alt="|475"></p><h2 id="分段"><a href="#分段" class="headerlink" title="分段"></a>分段</h2><p>分段是一种内存管理机制，将一个进程的<strong>逻辑地址空间划分为若干个段</strong>。每个段代表着一个<strong>逻辑单元</strong>，如代码段、数据段、堆、栈等。</p><ul><li>逻辑地址由<strong>段号和段偏移</strong>组成。</li><li>逻辑地址到物理地址的映射由<strong>段表</strong>实现，段表中每个条目包含段基址和段界限。</li><li><strong>段表基址寄存器</strong>（STBR）指向内存中段表的位置，<strong>段表长度寄存器</strong>（STLR）表示一个程序使用的段的数量。</li></ul><p><img src="/2023/11/25/cao-zuo-xi-tong-bi-ji/Segmentation%20Hardware.png" alt="|475"></p><h3 id="分段与分页的比较"><a href="#分段与分页的比较" class="headerlink" title="分段与分页的比较"></a>分段与分页的比较</h3><ul><li>分段与分页最大的区别在于：<strong>段的大小不固定，而页的大小固定</strong>。</li><li>分段无法解决外部碎片，<strong>因为碎片大小可能会比所有请求的段大小更小</strong>。但分段不存在内部碎片问题，因为分配给进程的内存块大小不是固定的。</li><li>分段的好处是<strong>易于共享内存</strong>，因为段具有实际意义。不同进程共享的段具有同样的段号。<strong>非连续内存存储才支持共享内存，连续内存存储每个进程的内存区域都是唯一的</strong>。</li></ul><h3 id="实例：Intel-Pentium"><a href="#实例：Intel-Pentium" class="headerlink" title="实例：Intel Pentium"></a>实例：Intel Pentium</h3><p><img src="/2023/11/25/cao-zuo-xi-tong-bi-ji/Pentium%20Paging.png" alt="|500"></p><h1 id="第九章-虚拟内存"><a href="#第九章-虚拟内存" class="headerlink" title="第九章 虚拟内存"></a>第九章 虚拟内存</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>虚拟内存是计算机操作系统中的一种技术，它<strong>定义了一个连续的虚拟地址空间，并且将部分硬盘空间用作内存的扩展</strong>。</p><h3 id="概念区分"><a href="#概念区分" class="headerlink" title="概念区分"></a>概念区分</h3><ul><li>虚拟地址空间：分配给进程的虚拟内存。</li><li>虚拟地址：在虚拟内存中指令或数据的位置。</li><li>虚拟内存：把内存和磁盘结合起来使用，得到一个容量很大的虚存。物理内存上的数据可以通过页表直接访问，但<strong>如果访问到磁盘上的数据，要先调入到内存上的空闲帧（无空闲帧时先利用置换算法与内存中某个帧交换再访问）</strong>。</li></ul><h3 id="虚拟内存的大小决定因素"><a href="#虚拟内存的大小决定因素" class="headerlink" title="虚拟内存的大小决定因素"></a>虚拟内存的大小决定因素</h3><ul><li><strong>操作系统字长</strong>：决定了逻辑地址的最大长度，也决定了虚拟内存的大小（超出部分无法正确寻址使用）。</li><li><strong>内存外存容量和</strong></li></ul><h3 id="两种实现方式"><a href="#两种实现方式" class="headerlink" title="两种实现方式"></a>两种实现方式</h3><ul><li>请求分页</li><li>请求分段</li></ul><h2 id="请求分页"><a href="#请求分页" class="headerlink" title="请求分页"></a>请求分页</h2><p>进程运行开始时，<strong>仅装入一个或零个页面</strong>，所有的数据和指令大都存放在外存中。进程执行过程中，<strong>根据进程的需求动态装入页面</strong>（将外存中固定块的内容装入内存中的某一帧，并更新页表）。内存已满时，要利用<strong>页面置换算法</strong>将低优先级的页面置换出去。<br><strong>使用惰性的调页程序</strong>，即只在页面被需要时调入。</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>减少I/O操作</li><li>减少内存需求</li><li>更快的响应速度</li><li>支持更多用户</li></ul><h3 id="有效-无效位"><a href="#有效-无效位" class="headerlink" title="有效-无效位"></a>有效-无效位</h3><p>每一个页表的表项有一个有效-无效位<br><strong>v/1</strong>-&gt;valid-&gt;<strong>页面在内存中并且合法</strong><br><strong>i/0</strong>-&gt;invalid-&gt;<strong>页面合法但不在内存中/页面不合法</strong></p><p><img src="/2023/11/25/cao-zuo-xi-tong-bi-ji/demandpaging.png"></p><h3 id="页错误"><a href="#页错误" class="headerlink" title="页错误"></a>页错误</h3><p>对一个页面的首次访问，会陷入操作系统的缺页中断。<br><strong>六步过程</strong></p><ol><li>访问指令/数据，有效-无效位为1-&gt;直接访问，否则继续。</li><li>页面不合法-&gt;终止，报错，<br> 页面合法但不在内存中-&gt;继续。</li><li>找到页在磁盘中的位置。</li><li>有空闲帧-&gt;直接调入<br> 无空闲帧-&gt;换出一个低优先级的帧<br>         没修改过-&gt;直接覆盖<br>         修改过-&gt;先写入到磁盘，再覆盖</li><li>更新页表。</li><li>重启指令。</li></ol><p><img src="/2023/11/25/cao-zuo-xi-tong-bi-ji/pageFault.png" alt="|525"></p><h3 id="有效访问时间-1"><a href="#有效访问时间-1" class="headerlink" title="有效访问时间"></a>有效访问时间</h3><ul><li>缺页率：0&lt;=p&lt;=1.0</li><li><strong>有效访问时间 EAT = （1 - p） * 内存访问时间 + p * 缺页错误处理时间</strong></li><li><strong>缺页错误处理时间 = 处理缺页中断 + 页交换出去时间（不一定需要） + 读入页时间 + 重启进程开销</strong></li></ul><p><img src="/2023/11/25/cao-zuo-xi-tong-bi-ji/computingOfEAT.png" alt="|425"></p><h3 id="页面置换算法"><a href="#页面置换算法" class="headerlink" title="页面置换算法"></a>页面置换算法</h3><p>页面置换：当需要调入新的页面而没有空闲帧时，找到内存中某些页面换出。<br>页面置换算法性能目标：<strong>最小缺页率</strong></p><p>如果发生了页面置换，缺页处理时间会加倍，使用<strong>修改位modify bit或者脏位dirty bit</strong>来减少页面传输的开销：<strong>只有修改过的页面才会被写入磁盘（违背修改的页面直接丢弃）</strong>。</p><p>页面置换完成了逻辑内存和物理内存之间的分离–<strong>可以在较小的物理内存上提供大量的虚拟内存</strong>。</p><h4 id="先进先出（FIFO）算法"><a href="#先进先出（FIFO）算法" class="headerlink" title="先进先出（FIFO）算法"></a>先进先出（FIFO）算法</h4><ul><li>置换在内存中<strong>停留时间最久</strong>的页面。</li><li>可能出现<strong>Belady’s Anomaly</strong>: more frames -&gt; more page faults</li></ul><h4 id="最优置换选择（OPT）算法"><a href="#最优置换选择（OPT）算法" class="headerlink" title="最优置换选择（OPT）算法"></a>最优置换选择（OPT）算法</h4><ul><li>置换在<strong>最远的将来才会使用</strong>的页面。</li><li>缺页错误率最低，不会产生<strong>Belady’s Anomaly</strong>，但需要未来知识才能实现。</li></ul><h4 id="最近最少使用（LRU）算法"><a href="#最近最少使用（LRU）算法" class="headerlink" title="最近最少使用（LRU）算法"></a>最近最少使用（LRU）算法</h4><ul><li>置换<strong>最长时间没有被使用</strong>的页面。</li><li>性能接近OPT，需要硬件（<strong>计数器或堆栈</strong>）支持。</li></ul><h4 id="近似LRU算法-二次机会法"><a href="#近似LRU算法-二次机会法" class="headerlink" title="近似LRU算法/二次机会法"></a>近似LRU算法/二次机会法</h4><ul><li>无硬件支持时使用<strong>引用位</strong>实现近似LRU算法。<ul><li>初始时，将内存中每一页的引用位都初始化为0。</li><li>当某个页面被引用时，引用位设置为1。</li><li>当需要置换时，顺时针遍历内存中所有页面。如果找到一个页的引用位为0，那么将其置换；引用位为1，则将其改为0，继续遍历。~~（给它一次做人的机会）</li></ul></li></ul><p><img src="/2023/11/25/cao-zuo-xi-tong-bi-ji/secondChance.png" alt="|400"></p><h4 id="计数算法"><a href="#计数算法" class="headerlink" title="计数算法"></a>计数算法</h4><ul><li>用一个计数器<strong>记录每个页面被引用的次数</strong>。</li><li>LFU 算法：替换被引用次数最小的也页面。</li><li>MFU 算法</li></ul><h3 id="帧分配"><a href="#帧分配" class="headerlink" title="帧分配"></a>帧分配</h3><p>每个进程需要的最小帧数由<strong>计算机架构</strong>决定：</p><ul><li>例子：IBM370的SS-MOV指令：<ul><li>指令是6个字节，并可能跨越2个页面</li><li>存储来源（from）可能需要2个页面</li><li>目的区域（to）可能需要2个页面</li><li>所以这个指令需要的最小帧数为6</li></ul></li></ul><p>两种主流分配方式：</p><ul><li>固定分配<ul><li><strong>平均分配</strong>：例如，100个帧，5个进程，则每个进程分给20个帧。</li><li><strong>比例分配</strong>：按照每个进程的大小（分配比例=进程大小/总进程大小）进行分配。</li></ul></li><li><strong>优先级分配</strong>：根据优先级而不是进程大小按比例分配。</li></ul><h3 id="全局置换vs-局部置换"><a href="#全局置换vs-局部置换" class="headerlink" title="全局置换vs.局部置换"></a>全局置换vs.局部置换</h3><ul><li><strong>全局置换</strong>：每个进程可以从<strong>所有帧的集合</strong>中选择一个进行页面置换，而不用管该帧是否已经分配给其它进程。<strong>高优先级进程可以选择低优先级进程的帧来置换</strong>。（具有<strong>更好的系统吞吐量</strong>）</li><li><strong>局部置换</strong>：每个进程只能从<strong>自己的帧中</strong>选择页面进行置换。</li></ul><h3 id="颠簸（Thrashing）"><a href="#颠簸（Thrashing）" class="headerlink" title="颠簸（Thrashing）"></a>颠簸（Thrashing）</h3><p>颠簸：一个进程的页面被<strong>频繁换入换出</strong>。(例如，某个低优先级进程的帧被全局置换，之后因为执行需要又要换回)</p><p>原因：</p><ul><li>进程分配的<strong>帧数不足</strong>。</li><li>页面<strong>置换算法不合理</strong>。</li></ul><p>后果：</p><ul><li><strong>CPU利用率低</strong>（频繁进行页面置换，CPU等待时间长）</li><li>操作系统认为需要增加多道程序的道数（CPU利用率低），<strong>调入新的进程，造成更多的缺页错误和更长的换页队列，造成恶性循环</strong>。</li></ul><p><img src="/2023/11/25/cao-zuo-xi-tong-bi-ji/thrashing.png" alt="|425"></p><p>解决方案：</p><ul><li><strong>局部性原理</strong><ul><li>Δ=工作集窗口</li><li>$WSS_i$（working set of $P_i$）=最近Δ中引用的页面总数</li><li>系统需要<strong>跟踪每个进程的工作集</strong>，并为它<strong>分配大于其工作集帧数的帧</strong>。</li><li>当所有进程的工作集帧数之和大于当前系统可用帧数时，系统将发生抖动，<strong>需要暂停一个进程</strong>。</li></ul></li><li><strong>页错误门限</strong><ul><li>假如页错误率太低，回收一些进程的帧。</li><li>假如页错误率太高，分给进程一些帧。</li></ul></li></ul><h3 id="请求分页在进程创建中的作用"><a href="#请求分页在进程创建中的作用" class="headerlink" title="请求分页在进程创建中的作用"></a>请求分页在进程创建中的作用</h3><ol><li>写时复制（Copy-on-Write）</li></ol><ul><li>写时复制允许父进程和子进程<strong>最初共享</strong>相同的内存页，<strong>只有当其中一个进程修改了共享的页时，该页才会被复制</strong>。</li><li>使进程创建更高效。</li></ul><ol start="2"><li>内存映射文件（Memory-Mapped Files）</li></ol><ul><li>通过<strong>将磁盘块映射到内存中的页面</strong>中，内存映射文件I/O允许<strong>将文件I/O视为内存访问</strong>。</li><li><strong>允许多个进程映射同一文件</strong>，从而使内存中的页面可以共享。</li></ul><p><img src="/2023/11/25/cao-zuo-xi-tong-bi-ji/Memory%20Mapped%20Files.png" alt="|500"></p><h3 id="内核的内存分配"><a href="#内核的内存分配" class="headerlink" title="内核的内存分配"></a>内核的内存分配</h3><p>内核态的内存分配不同于用户态的内存分配</p><ul><li>内核内存分配可能需要<strong>连续的物理内存</strong>（请求分页分配的是不连续的物理内存）。</li><li>内核需要为数据结构（相对小，数量多）请求内存。需要努力<strong>最小化碎片浪费</strong>。</li></ul><h4 id="伙伴系统"><a href="#伙伴系统" class="headerlink" title="伙伴系统"></a>伙伴系统</h4><ul><li>内存<strong>按2的幂的大小进行划分</strong>，即4KB、8KB等，组成若干空闲块链表；查找链表找到满足进程需求的最佳匹配块<ul><li>首先将整个可用空间看作一块: 2^n</li><li>假设进程申请的空间大小为s，如果满足2^n-1&lt;s&lt;=2^n，则分配整个块</li><li>否则，将块划分为两个大小相等的伙伴，大小为2^n-1，<strong>一直划分下去直到产生大于或等于s的最小块</strong></li></ul></li><li>优点：通过合并的技术，可以将相邻的伙伴迅速组合以形成更大的分段；</li><li>缺点：由于跨度为两个2的幂，很可能造成内部碎片浪费。</li></ul><p><img src="/2023/11/25/cao-zuo-xi-tong-bi-ji/buddySystemExample.png" alt="|400"><br><img src="/2023/11/25/cao-zuo-xi-tong-bi-ji/buddySystem.png" alt="|400"></p><h4 id="slab分配"><a href="#slab分配" class="headerlink" title="slab分配"></a>slab分配</h4><ul><li>本质上仍然是分页，但物理页面在内存中是连续的。</li><li>每个内核数据结构都有一个cache，用于存储内核数据结构对象<strong>实例</strong>。（<strong>每个Cache包含一个或多个Slab，每个Slab由一个或多个物理连续的页组成</strong>）</li><li>优点：<ul><li>没有因碎片而引起内存浪费；</li><li>可以快速满足内存请求。</li></ul></li></ul><p><img src="/2023/11/25/cao-zuo-xi-tong-bi-ji/slabAllocation.png" alt="|475"></p><h1 id="第十章-文件系统接口"><a href="#第十章-文件系统接口" class="headerlink" title="第十章 文件系统接口"></a>第十章 文件系统接口</h1><h2 id="文件概念"><a href="#文件概念" class="headerlink" title="文件概念"></a>文件概念</h2><p>文件：是计算机中<strong>信息存储</strong>的基本组织形式，是存储设备的<strong>逻辑存储单位</strong>，是记录在<strong>外存中</strong>的相关信息的命名组合。</p><h3 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h3><ul><li><strong>无结构</strong>：文字流、字节流等。</li><li><strong>简单记录结构</strong>：线性、固定长度、可变长度等。</li><li><strong>复杂结构</strong>：结构化文档、多媒体文件等。</li></ul><h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><p>文件相关操作：</p><ul><li><strong>创建</strong>文件</li><li><strong>写</strong>文件</li><li><strong>读</strong>文件</li><li>在文件内<strong>重定位</strong></li><li><strong>删除</strong>文件</li><li><strong>截断</strong>文件</li><li>打开文件：在磁盘上搜索目录结构，找到条目Fi，将其内容移至内存。需要数据结构——<strong>打开文件表</strong>，存放文件指针、打开文件计数器、文件存储位置、访问权限等。</li><li>关闭文件：将内存中条目Fi的内容移动到磁盘上的目录结构。</li></ul><h3 id="文件类型"><a href="#文件类型" class="headerlink" title="文件类型"></a>文件类型</h3><p><img src="/2023/11/25/cao-zuo-xi-tong-bi-ji/fileTypes.png" alt="|432"></p><h2 id="访问方式"><a href="#访问方式" class="headerlink" title="访问方式"></a>访问方式</h2><ul><li><p><strong>顺序访问（顺序文件）</strong>：文件信息<strong>按顺序</strong>（即一个接着一个记录）加以处理，依次访问数据，不能直接跳转到文件的指定位置。类似于<strong>磁带</strong>的访问方式。这种访问模式是最常见的，例如，<strong>编译器和编辑器</strong>以这种方式访问文件。还有<strong>日志文件</strong>也是顺序文件。</p><ul><li>优点：<strong>节省存储空间</strong>，不会有空间浪费。</li><li>缺点：<strong>访问效率较差</strong>。需要顺序遍历寻找，<strong>线性时间复杂度</strong>。</li></ul></li><li><p><strong>直接访问（直接文件）</strong>：又称随机访问、相对访问。文件信息以<strong>定长的分区</strong>形式存储，访问时，先计算记录所在的块，再直接读取相应的块。基于磁盘的访问方式，<strong>对于大数据的立即存取</strong>十分有用。例如，<strong>数据库</strong>通常使用这种方式。</p><ul><li>优点：<strong>访问效率较好</strong>。O(1)。</li><li>缺点：<strong>浪费存储空间（内部碎片）</strong>。</li></ul></li><li><p>索引文件：<strong>顺序文件存储+直接文件检索</strong></p><ul><li>文件内部的记录按照<strong>顺序访问</strong>进行存储，但是为记录建立<strong>可直接访问的索引表</strong>，存放记录号和记录所在位置的指针。访问时，先访问索引获取位置，再访问实际地址。</li></ul></li></ul><p><img src="/2023/11/25/cao-zuo-xi-tong-bi-ji/indexAccess.png" alt="|500"></p><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><h3 id="基本概念-1"><a href="#基本概念-1" class="headerlink" title="基本概念"></a>基本概念</h3><h4 id="目录项"><a href="#目录项" class="headerlink" title="目录项"></a>目录项</h4><p>存放文件的属性信息，在某些操作系统中，目录项中就是FCB（文件控制块），更多地采用<strong>iNode节点</strong>以减少目录项大小，<strong>从而提高检索效率。</strong></p><h4 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h4><ul><li>包含着所有文件信息的<strong>节点集合</strong>。</li><li>根据文件名检索文件的桥梁。</li><li><strong>目录项的有序集合</strong>。</li></ul><h4 id="目录文件"><a href="#目录文件" class="headerlink" title="目录文件"></a>目录文件</h4><ul><li>目录的存在形式。</li><li>目录以<strong>文件的方式</strong>存放在外存上的文件系统中，因为一个操作系统的文件系统往往包含着数百GB的文件，目录文件会非常大，如果全部调入内存会极大地占用空间。</li></ul><h4 id="目录常见操作"><a href="#目录常见操作" class="headerlink" title="目录常见操作"></a>目录常见操作</h4><ul><li>搜索文件</li><li>创建文件</li><li>删除文件</li><li>列出目录</li><li>重命名文件</li><li>跟踪文件系统</li></ul><h4 id="检索文件的过程"><a href="#检索文件的过程" class="headerlink" title="检索文件的过程"></a>检索文件的过程</h4><p><strong>遍历目录项</strong>（虽然目录项类似一种索引，但它由于<strong>经常变动</strong>，所以<strong>一般不排序</strong>，因此也无法直接访问，需要进行<strong>按文件名</strong>遍历）</p><ol><li>打开目录文件</li><li>从磁盘读入该目录文件的1个物理物理块，该块包含若干个目录项</li><li>根据文件名遍历内存中的该块，如找到对应的FCB则结束</li><li>判断该目录文件是否还有物理块没有读入，如果是转2；否则，结束。表示该目录中没有此文件名的文件</li></ol><h4 id="目录性能"><a href="#目录性能" class="headerlink" title="目录性能"></a>目录性能</h4><ul><li><strong>物理块</strong>：外部存储被划分为和页、帧等大小或者倍数的物理块。<strong>内存和存储设备数据交换基本单位</strong>。一个物理块一般为4KB、8KB和16KB等</li><li>提高目录性能：检索时，读入<strong>尽可能少</strong>的物理块</li><li>如果：<ul><li>目录项大小= ds bytes</li><li>目录中最多文件数 = n</li><li>物理块大小 = b</li></ul></li><li>那么：<ul><li>目录文件大小 = ds * n bytes</li><li>目录文件需要的物理块数目 = ds * n/b</li><li>检索一个文件需要平均读入的块数=（ds∗n/b+1）/2</li></ul></li><li>提高目录性能的方法<ul><li>减少目录中的文件数目（<strong>多级目录</strong>）</li><li>减少目录项的大小（<strong>iNode</strong>）</li></ul></li></ul><h4 id="iNode"><a href="#iNode" class="headerlink" title="iNode"></a>iNode</h4><p>将目录项由较大的FCB变为较小的iNode，类似于索引，包含<strong>一个文件名和iNode号。</strong></p><ul><li>我们根据iNode号，可以进入一个iNode表（不含文件名）查询对应的FCB指针，通过FCB获取对应的文件。</li></ul><h3 id="目录的逻辑结构"><a href="#目录的逻辑结构" class="headerlink" title="目录的逻辑结构"></a>目录的逻辑结构</h3><h4 id="目录逻辑结构的设计目标"><a href="#目录逻辑结构的设计目标" class="headerlink" title="目录逻辑结构的设计目标"></a>目录逻辑结构的设计目标</h4><ul><li><strong>效率（性能）</strong>：<ul><li>快速定位文件位置</li><li>提高文件访问效率</li></ul></li><li><strong>命名（方便性）</strong>：<ul><li>方便用户使用</li><li>同名的不同文件</li><li>不同名的相同文件</li></ul></li><li><strong>分组</strong>：<ul><li>文件分组（子目录）</li><li>兼顾效率和方便性</li></ul></li></ul><h4 id="单层目录"><a href="#单层目录" class="headerlink" title="单层目录"></a>单层目录</h4><ul><li>所有文件在<strong>同一目录</strong>中，只有一级目录：<strong>根目录</strong></li><li>优点：<strong>结构简单</strong></li><li>缺点：<ul><li><strong>效率差</strong></li><li><strong>不能有同名文件</strong></li><li><strong>不能分组</strong><br><img src="/2023/11/25/cao-zuo-xi-tong-bi-ji/single-levelDirectory.png"></li></ul></li></ul><h4 id="两级目录"><a href="#两级目录" class="headerlink" title="两级目录"></a>两级目录</h4><ul><li><strong>每个用户</strong>有自己的目录结构，即目录下的目录</li><li>优点：<ul><li><strong>不同用户可有相同文件名的文件</strong>；</li><li>比单层目录<strong>提高检索效率</strong>（文件分布在多个用户目录中）</li></ul></li><li>缺点：<ul><li>相同用户不能有同名文件;</li><li>相同用户无法给文件分组。<br><img src="/2023/11/25/cao-zuo-xi-tong-bi-ji/two-levelDirectory.png"></li></ul></li></ul><h4 id="树形目录"><a href="#树形目录" class="headerlink" title="树形目录"></a>树形目录</h4><ul><li>两级目录的扩展，从两层变为<strong>多层</strong>。</li><li>特点：<ul><li>检索高效（子目录增多导致每个目录下文件减少）</li><li>可以分组</li><li>允许重名<br><img src="/2023/11/25/cao-zuo-xi-tong-bi-ji/Pasted%20image%2020231204093538.png"></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 课程笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大数据技术基础</title>
      <link href="/2023/11/25/da-shu-ju-ji-zhu-ji-chu-bi-ji/"/>
      <url>/2023/11/25/da-shu-ju-ji-zhu-ji-chu-bi-ji/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="大数据概述"><a href="#大数据概述" class="headerlink" title="大数据概述"></a>大数据概述</h1><h2 id="大数据带来的思维转变"><a href="#大数据带来的思维转变" class="headerlink" title="大数据带来的思维转变"></a>大数据带来的思维转变</h2><ul><li>全样而非抽样</li><li>效率而非精确</li><li>相关而非因果</li></ul><h2 id="大数据特征"><a href="#大数据特征" class="headerlink" title="大数据特征"></a>大数据特征</h2><ul><li>Value</li><li>Velocity（快速）</li><li>Volume</li><li>Variety</li></ul><h2 id="大数据的产生阶段"><a href="#大数据的产生阶段" class="headerlink" title="大数据的产生阶段"></a>大数据的产生阶段</h2><ul><li>运营式系统阶段（数据被动产生）</li><li>用户原创内容阶段（数据主动产生）</li><li>感知式系统阶段</li></ul><h2 id="科学研究四范式"><a href="#科学研究四范式" class="headerlink" title="科学研究四范式"></a>科学研究四范式</h2><ul><li>实验</li><li>理论</li><li>计算</li><li>数据探索</li></ul><h2 id="大数据计算模式"><a href="#大数据计算模式" class="headerlink" title="大数据计算模式"></a>大数据计算模式</h2><table><thead><tr><th>大数据计算模式</th><th>解决问题</th><th>代表产品</th></tr></thead><tbody><tr><td>批处理计算</td><td>针对大规模数据的批量处理</td><td>Map Reduce、Spark等</td></tr><tr><td>流计算</td><td>针对流数据的实时计算</td><td>Flume、Storm、Streams等</td></tr><tr><td>图计算</td><td>针对大规模图结构数据的处理</td><td>Pregel、Graphx等</td></tr><tr><td>查询分析计算</td><td>大规模数据的存储管理和查询分析</td><td>Hive等</td></tr></tbody></table><h2 id="大数据技术框架（重要）"><a href="#大数据技术框架（重要）" class="headerlink" title="大数据技术框架（重要）"></a>大数据技术框架（重要）</h2><ul><li>数据收集</li><li>数据存储</li><li>资源管理与服务协调</li><li>计算引擎</li><li>数据分析</li><li>数据可视化</li></ul><p><img src="/2023/11/25/da-shu-ju-ji-zhu-ji-chu-bi-ji/bigDataBasicFrame.png"></p><h2 id="大数据技术实现方案"><a href="#大数据技术实现方案" class="headerlink" title="大数据技术实现方案"></a>大数据技术实现方案</h2><h3 id="Hadoop与Spark开源大数据技术栈"><a href="#Hadoop与Spark开源大数据技术栈" class="headerlink" title="Hadoop与Spark开源大数据技术栈"></a>Hadoop与Spark开源大数据技术栈</h3><p><img src="/2023/11/25/da-shu-ju-ji-zhu-ji-chu-bi-ji/hadoop&amp;spark.png"></p><h2 id="大数据架构"><a href="#大数据架构" class="headerlink" title="大数据架构"></a>大数据架构</h2><p><strong>Lambda架构：</strong><br>将数据处理流程分解成三层：</p><ul><li>批处理层：利用分布式批处理计算，以批为单位处理数据，并产生一个经预计算产生的只读数据视图。</li><li>流式处理层：采用流式计算技术，降低了数据处理延迟。</li><li>服务层：批处理层和流式处理层结合在一起，可以既保证数据延迟低，也能完成复杂的逻辑计算。</li></ul><p><img src="/2023/11/25/da-shu-ju-ji-zhu-ji-chu-bi-ji/Lambda.png"></p><p>案例：推荐系统<br>![[recommandSystem.png]]</p><h1 id="大数据收集"><a href="#大数据收集" class="headerlink" title="大数据收集"></a>大数据收集</h1><h2 id="关系型数据收集"><a href="#关系型数据收集" class="headerlink" title="关系型数据收集"></a>关系型数据收集</h2><p>关系型数据是常见的一种数据类型，通常存储在MySQL、 Oracle等关系型数据库中，为了能够利用大数据技术处理和存储这些关系型数据，将这些数据导入到HDFS、Hbase等大数据存储系统中，以便使用MapReduce、Spark等分布式计算技术进行高效分析和处理。为便于与前端数据可视化系统对接，通常需要将Hadoop大数据系统分析产生的结果导回到关系型数据库中。为解决上述问题，<strong>高效地实现关系型数据库与Hadoop之间数据的导入导出</strong>，Hadoop生态系统提供了<strong>Sqoop</strong>工具。</p><h2 id="Sqoop"><a href="#Sqoop" class="headerlink" title="Sqoop"></a>Sqoop</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>Sqoop采用插拔式Connector架构，解决了关系型数据库与Hadoop之间的数据传输问题。</p><p>Sqoop通常完成的任务：</p><ul><li>数据迁移</li><li>可视化分析结果</li><li>数据增量导入</li></ul><p>Sqoop具备的特点：</p><ul><li>性能高</li><li>自动类型转换</li><li>自动传播元信息</li></ul><h3 id="Sqoop基本架构"><a href="#Sqoop基本架构" class="headerlink" title="Sqoop基本架构"></a>Sqoop基本架构</h3><h4 id="Sqoop1架构"><a href="#Sqoop1架构" class="headerlink" title="Sqoop1架构"></a>Sqoop1架构</h4><p><img src="/2023/11/25/da-shu-ju-ji-zhu-ji-chu-bi-ji/Sqoop1.png"></p><h4 id="Sqoop2架构"><a href="#Sqoop2架构" class="headerlink" title="Sqoop2架构"></a>Sqoop2架构</h4><p><img src="/2023/11/25/da-shu-ju-ji-zhu-ji-chu-bi-ji/Sqoop2.png"></p><h4 id="Sqoop1与Sqoop2对比"><a href="#Sqoop1与Sqoop2对比" class="headerlink" title="Sqoop1与Sqoop2对比"></a>Sqoop1与Sqoop2对比</h4><p><img src="/2023/11/25/da-shu-ju-ji-zhu-ji-chu-bi-ji/SqoopVSSqoop2.png"></p><h3 id="Sqoop使用方式"><a href="#Sqoop使用方式" class="headerlink" title="Sqoop使用方式"></a>Sqoop使用方式</h3><h4 id="Sqoop1使用方式"><a href="#Sqoop1使用方式" class="headerlink" title="Sqoop1使用方式"></a>Sqoop1使用方式</h4><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29550710/1697727069806-87e8eea3-e247-4eac-9664-2e0812d8bfcd.png#averageHue=%23f1eeeb&amp;clientId=ua9edeed5-70db-4&amp;from=paste&amp;height=293&amp;id=uf2701d70&amp;originHeight=403&amp;originWidth=1094&amp;originalType=binary&amp;ratio=1.375&amp;rotation=0&amp;showTitle=false&amp;size=185220&amp;status=done&amp;style=none&amp;taskId=u128fce70-4a36-44b9-a89f-9ae07fa96f3&amp;title=&amp;width=795.6363636363636" alt="image.png"></p><h4 id="Sqoop2使用方式"><a href="#Sqoop2使用方式" class="headerlink" title="Sqoop2使用方式"></a>Sqoop2使用方式</h4><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29550710/1697727091744-8861bf1f-c6ac-4495-941d-81bdb03f31c8.png#averageHue=%23f3f0ed&amp;clientId=ua9edeed5-70db-4&amp;from=paste&amp;height=366&amp;id=u9a6b147e&amp;originHeight=503&amp;originWidth=1138&amp;originalType=binary&amp;ratio=1.375&amp;rotation=0&amp;showTitle=false&amp;size=231982&amp;status=done&amp;style=none&amp;taskId=u7b4f8822-f12e-494f-b08a-738a49ad539&amp;title=&amp;width=827.6363636363636" alt="image.png"></p><h2 id="数据增量收集CDC"><a href="#数据增量收集CDC" class="headerlink" title="数据增量收集CDC"></a>数据增量收集CDC</h2><p> 捕获数据源中数据的更新，进而获取增量数据的过程，被称为 **CDC(Change Data Capture)**。<br> CDC 系统主要功能是捕获数据库中的数据更新，将增量数据发送给各个订阅者和消费者；<br> CDC 系统应用非常广泛，主要包括：</p><ul><li>异地机房同步：实现数据异地机房容灾；</li><li>数据库实时备份：类似于master/slave架构，实时对数据库进行备份； </li><li>业务Cache刷新：更新数据库成功的同时，刷新 Cache 中的值；</li><li>数据全库迁移：创建任务队列表，逐步完成全库所有表的迁移。</li></ul><h2 id="CDC开源实现Canal"><a href="#CDC开源实现Canal" class="headerlink" title="CDC开源实现Canal"></a>CDC开源实现Canal</h2><h3 id="Canal主要原理"><a href="#Canal主要原理" class="headerlink" title="Canal主要原理"></a>Canal主要原理</h3><p>Canal主要定位是<strong>基于数据库增量日志解析，提供增量数据订阅和消费</strong>，目前主要支持了MySQL等关系型数据库。<br>Canal的主要原理是，模拟数据库的主备复制协议，接受主数据库产生的binary log，进而捕获更新数据。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/29550710/1697727596459-0e721b2d-8a55-4bbd-9201-bfae5fa3ba39.png#averageHue=%23f4f3f3&amp;clientId=ua9edeed5-70db-4&amp;from=paste&amp;height=312&amp;id=ue281518a&amp;originHeight=429&amp;originWidth=856&amp;originalType=binary&amp;ratio=1.375&amp;rotation=0&amp;showTitle=false&amp;size=100400&amp;status=done&amp;style=none&amp;taskId=u0703fd01-8157-4c78-afc3-a8e952a04a9&amp;title=&amp;width=622.5454545454545" alt="image.png"></p><h3 id="Canal基本架构"><a href="#Canal基本架构" class="headerlink" title="Canal基本架构"></a>Canal基本架构</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29550710/1697727670892-e0d601a9-c029-4f24-bb14-7d0d5f4fa332.png#averageHue=%23f5f4f3&amp;clientId=ua9edeed5-70db-4&amp;from=paste&amp;height=447&amp;id=ud64011e6&amp;originHeight=615&amp;originWidth=1177&amp;originalType=binary&amp;ratio=1.375&amp;rotation=0&amp;showTitle=false&amp;size=146351&amp;status=done&amp;style=none&amp;taskId=u5eb6af15-3ac2-47d8-a6cc-87560ec9849&amp;title=&amp;width=856" alt="image.png"></p><h2 id="多机房数据同步系统Otter"><a href="#多机房数据同步系统Otter" class="headerlink" title="多机房数据同步系统Otter"></a>多机房数据同步系统Otter</h2><h3 id="Otter基本架构"><a href="#Otter基本架构" class="headerlink" title="Otter基本架构"></a>Otter基本架构</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29550710/1697728046633-74539bbc-e6ce-4a69-b912-914365b077b1.png#averageHue=%23f0efee&amp;clientId=ua9edeed5-70db-4&amp;from=paste&amp;height=471&amp;id=u2344ea3c&amp;originHeight=648&amp;originWidth=1173&amp;originalType=binary&amp;ratio=1.375&amp;rotation=0&amp;showTitle=false&amp;size=203941&amp;status=done&amp;style=none&amp;taskId=uc5776525-893e-4597-94d1-1c37a80557c&amp;title=&amp;width=853.0909090909091" alt="image.png"></p><h3 id="Otter-S、E、T、L阶段模型"><a href="#Otter-S、E、T、L阶段模型" class="headerlink" title="Otter S、E、T、L阶段模型"></a>Otter S、E、T、L阶段模型</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29550710/1697728115654-364f02ed-3483-4b56-8239-58fa62b9b348.png#averageHue=%23f2f0ef&amp;clientId=ua9edeed5-70db-4&amp;from=paste&amp;height=403&amp;id=u09e013b1&amp;originHeight=554&amp;originWidth=1130&amp;originalType=binary&amp;ratio=1.375&amp;rotation=0&amp;showTitle=false&amp;size=188596&amp;status=done&amp;style=none&amp;taskId=u7f39c631-579b-4743-b31d-43449a5e1a6&amp;title=&amp;width=821.8181818181819" alt="image.png"></p><h3 id="Otter跨机房数据同步"><a href="#Otter跨机房数据同步" class="headerlink" title="Otter跨机房数据同步"></a>Otter跨机房数据同步</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29550710/1697728138093-13a87f50-ccc1-474f-88ab-277eac32f4b0.png#averageHue=%23f0efee&amp;clientId=ua9edeed5-70db-4&amp;from=paste&amp;height=470&amp;id=u01c39387&amp;originHeight=646&amp;originWidth=1039&amp;originalType=binary&amp;ratio=1.375&amp;rotation=0&amp;showTitle=false&amp;size=193724&amp;status=done&amp;style=none&amp;taskId=u6470a719-f056-432a-b24b-a187276e767&amp;title=&amp;width=755.6363636363636" alt="image.png"></p><h2 id="非关系型数据收集"><a href="#非关系型数据收集" class="headerlink" title="非关系型数据收集"></a>非关系型数据收集</h2><ul><li>非关系型数据种类繁多，包括网页、视频、图片、用户行为日志等，其中日志类数据直接反映了生产者的现状和行为特征， 通常用在行为分析系统、推荐系统、广告系统中；  </li><li>日志数据具有流式、数据量大等特点，通常分散在各种设备上， 由不同服务和组件产生，为了高效地收集这些流式日志，需要采用具有良好扩展性、伸缩性和容错性的分布式系统；  </li><li>为了帮助用户解决日志收集问题，Hadoop生态系统提供了 Flume，它是Cloudera公司开源的一个分布式高可靠系统，能够<strong>对不同数据源的海量日志数据进行高效收集、聚合、移动</strong>，最后存储到一个中心化的数据存储系统中。</li></ul><h2 id="Flume概述"><a href="#Flume概述" class="headerlink" title="Flume概述"></a>Flume概述</h2><h3 id="Flume设计动机"><a href="#Flume设计动机" class="headerlink" title="Flume设计动机"></a>Flume设计动机</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29550710/1697728312738-479789d1-f6f2-4cef-9225-2aa680867332.png#averageHue=%23f0edeb&amp;clientId=ua9edeed5-70db-4&amp;from=paste&amp;height=345&amp;id=u323a0f5d&amp;originHeight=474&amp;originWidth=1132&amp;originalType=binary&amp;ratio=1.375&amp;rotation=0&amp;showTitle=false&amp;size=236716&amp;status=done&amp;style=none&amp;taskId=u05bb7534-e4ae-4d5a-b6ec-65bd7cd58f4&amp;title=&amp;width=823.2727272727273" alt="image.png"></p><h3 id="Flume基本思想及特点"><a href="#Flume基本思想及特点" class="headerlink" title="Flume基本思想及特点"></a>Flume基本思想及特点</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29550710/1697728335167-25373eeb-c862-4306-9620-8202743274c7.png#averageHue=%23f3f1ef&amp;clientId=ua9edeed5-70db-4&amp;from=paste&amp;height=409&amp;id=uc20e96eb&amp;originHeight=562&amp;originWidth=1134&amp;originalType=binary&amp;ratio=1.375&amp;rotation=0&amp;showTitle=false&amp;size=233426&amp;status=done&amp;style=none&amp;taskId=u274ce792-e62b-4fb0-adfb-3c71b82dd8a&amp;title=&amp;width=824.7272727272727" alt="image.png"></p><h2 id="Flume基本架构"><a href="#Flume基本架构" class="headerlink" title="Flume基本架构"></a>Flume基本架构</h2><h3 id="Flume基本构成"><a href="#Flume基本构成" class="headerlink" title="Flume基本构成"></a>Flume基本构成</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29550710/1697728752395-4b52443f-f435-430f-adc2-844c9e655139.png#averageHue=%23f5f4f2&amp;clientId=ua9edeed5-70db-4&amp;from=paste&amp;height=415&amp;id=u41f06469&amp;originHeight=570&amp;originWidth=1092&amp;originalType=binary&amp;ratio=1.375&amp;rotation=0&amp;showTitle=false&amp;size=231712&amp;status=done&amp;style=none&amp;taskId=u292d8b39-8af2-4ff3-8243-7dd0beaf49e&amp;title=&amp;width=794.1818181818181" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2023/png/29550710/1697728805958-19999312-e06d-4454-bd5e-8f12b8ac4ed5.png#averageHue=%23f2efed&amp;clientId=ua9edeed5-70db-4&amp;from=paste&amp;height=443&amp;id=u02fb9d90&amp;originHeight=609&amp;originWidth=1132&amp;originalType=binary&amp;ratio=1.375&amp;rotation=0&amp;showTitle=false&amp;size=299703&amp;status=done&amp;style=none&amp;taskId=u02b2a549-e38b-4eb9-8115-2f906858e76&amp;title=&amp;width=823.2727272727273" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2023/png/29550710/1697728815238-483e928e-023d-4732-a89d-232f36aee8bb.png#averageHue=%23f8f7f6&amp;clientId=ua9edeed5-70db-4&amp;from=paste&amp;height=452&amp;id=u207bc9a8&amp;originHeight=622&amp;originWidth=1115&amp;originalType=binary&amp;ratio=1.375&amp;rotation=0&amp;showTitle=false&amp;size=184471&amp;status=done&amp;style=none&amp;taskId=u6c35833f-720a-46d9-a556-1b349a723bb&amp;title=&amp;width=810.9090909090909" alt="image.png"></p><h3 id="Flume-NG高级组件"><a href="#Flume-NG高级组件" class="headerlink" title="Flume NG高级组件"></a>Flume NG高级组件</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29550710/1697728861575-68887aeb-8692-457d-a807-4ed5e1de205d.png#averageHue=%23f1eeeb&amp;clientId=ua9edeed5-70db-4&amp;from=paste&amp;height=398&amp;id=u59984716&amp;originHeight=547&amp;originWidth=1112&amp;originalType=binary&amp;ratio=1.375&amp;rotation=0&amp;showTitle=false&amp;size=272068&amp;status=done&amp;style=none&amp;taskId=u2fb05f7e-4557-4b19-8408-cb4f2e3cac6&amp;title=&amp;width=808.7272727272727" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2023/png/29550710/1697728867945-994da6bf-c58c-4d8e-bbc6-4e851d1ba989.png#averageHue=%23f6f4f3&amp;clientId=ua9edeed5-70db-4&amp;from=paste&amp;height=457&amp;id=u33c6df00&amp;originHeight=629&amp;originWidth=1123&amp;originalType=binary&amp;ratio=1.375&amp;rotation=0&amp;showTitle=false&amp;size=231933&amp;status=done&amp;style=none&amp;taskId=u8ee2fdd9-5393-4d39-93c3-7595beb9109&amp;title=&amp;width=816.7272727272727" alt="image.png"></p><h2 id="Flume-NG数据流拓扑"><a href="#Flume-NG数据流拓扑" class="headerlink" title="Flume NG数据流拓扑"></a>Flume NG数据流拓扑</h2><h3 id="构建数据流拓扑"><a href="#构建数据流拓扑" class="headerlink" title="构建数据流拓扑"></a>构建数据流拓扑</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29550710/1697729087900-9c142b3e-7028-4b13-90f5-d5779d1b6f85.png#averageHue=%23f2f0ed&amp;clientId=ua9edeed5-70db-4&amp;from=paste&amp;height=324&amp;id=uf45de7ed&amp;originHeight=446&amp;originWidth=1105&amp;originalType=binary&amp;ratio=1.375&amp;rotation=0&amp;showTitle=false&amp;size=201864&amp;status=done&amp;style=none&amp;taskId=uf3bdff6d-ce5b-4d06-ab86-cc4323c9cf6&amp;title=&amp;width=803.6363636363636" alt="image.png"></p><h3 id="多路合并拓扑架构"><a href="#多路合并拓扑架构" class="headerlink" title="多路合并拓扑架构"></a>多路合并拓扑架构</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29550710/1697729148825-f0b14aef-259c-44b0-94dd-755bb42640a8.png#averageHue=%23f7f6f5&amp;clientId=ua9edeed5-70db-4&amp;from=paste&amp;height=452&amp;id=u4996df74&amp;originHeight=622&amp;originWidth=1125&amp;originalType=binary&amp;ratio=1.375&amp;rotation=0&amp;showTitle=false&amp;size=208668&amp;status=done&amp;style=none&amp;taskId=u39dc8bbe-1de7-4190-89e6-316f2112519&amp;title=&amp;width=818.1818181818181" alt="image.png"></p><h3 id="多路复用拓扑架构"><a href="#多路复用拓扑架构" class="headerlink" title="多路复用拓扑架构"></a>多路复用拓扑架构</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29550710/1697729174871-82e19441-bfad-428e-aab6-bd8d2ceeb170.png#averageHue=%23f7f6f6&amp;clientId=ua9edeed5-70db-4&amp;from=paste&amp;height=450&amp;id=uf2f2136d&amp;originHeight=619&amp;originWidth=1102&amp;originalType=binary&amp;ratio=1.375&amp;rotation=0&amp;showTitle=false&amp;size=187009&amp;status=done&amp;style=none&amp;taskId=u7fb03ada-c02e-4917-baa6-f90007a3e67&amp;title=&amp;width=801.4545454545455" alt="image.png"></p><h1 id="分布式消息队列"><a href="#分布式消息队列" class="headerlink" title="分布式消息队列"></a>分布式消息队列</h1><h2 id="Kafka概述"><a href="#Kafka概述" class="headerlink" title="Kafka概述"></a>Kafka概述</h2><ul><li>实际应用中，不同服务器(数据生产者)产生的日志，比如指标监控数据、用户搜索日志、用点击日志等，需要同 时传送到多个系统中以便进行相应的逻辑处理和挖掘， 比如指标监控数据可能被同时写入Hadoop和Storm集群 (数据消费者)进行离线和实时分析。</li><li>消息队列的出现是为了<strong>降低数据生产者和消费者之间的耦合性、平衡两者处理能力的不对等</strong>。 </li><li><strong>消息队列是位于生产者和消费者之间的“中间件”</strong>，它解除了生产者和消费者的直接依赖关系，使得软件架构更 容易扩展和伸缩；它能够缓冲生产者产生的数据，防止 消费者无法及时处理生产者产生的数据。</li></ul><h3 id="Kafka设计动机"><a href="#Kafka设计动机" class="headerlink" title="Kafka设计动机"></a>Kafka设计动机</h3><p>存在问题：</p><ul><li><strong>数据生产者和消费者耦合度过高</strong>：需要增加一种新的消费者时，所有数据生产者均需要被改动，扩展性非常差。</li><li><strong>生产者和消费者间数据处理速率不对等</strong></li><li><strong>大量并发的网络连接对后端消费者不够友好</strong></li></ul><p>解决方法：引入一层”中间件”</p><ul><li><strong>消息中间件</strong>：避免生产者和消费者直接互通产生的彼此高度依赖，两者中任何一个有变化都不会 影响另一方。  </li><li><strong>消息队列</strong>：缓存生产者产生的数据，使得消费者可以重复消费历史数据；平滑生产者产生数据速度和消费者处理数据速度的不对等。</li><li><strong>发布订阅系统</strong>：消费者可订阅某类主题的数据，当生产者产生对应主题的数据后，所有订阅者会快速获取到的数据，即消费者可快速获取新增数据。</li><li><strong>信息总线</strong>：所有收集到的数据会流经Kafka，之后由Kafka分流后，进入各个消费者系统。</li></ul><h3 id="Kafka特点"><a href="#Kafka特点" class="headerlink" title="Kafka特点"></a>Kafka特点</h3><ul><li><strong>高吞吐量</strong></li><li><strong>良好的扩展性</strong></li><li><strong>持久性和可靠性</strong></li></ul><h3 id="Flume与Kafka的区别"><a href="#Flume与Kafka的区别" class="headerlink" title="Flume与Kafka的区别"></a>Flume与Kafka的区别</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29550710/1698378163478-ab9ad77e-2c50-4d24-a893-9ffa2d158a0b.png#averageHue=%23f5f3f0&amp;clientId=ub9045351-1b5f-4&amp;from=paste&amp;height=278&amp;id=uc93c905c&amp;originHeight=347&amp;originWidth=931&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=125522&amp;status=done&amp;style=none&amp;taskId=u04ba6821-7eb5-421d-8778-53981c962a5&amp;title=&amp;width=744.8" alt="image.png"></p><h2 id="Kafka设计架构"><a href="#Kafka设计架构" class="headerlink" title="Kafka设计架构"></a>Kafka设计架构</h2><h3 id="Kafka基本架构"><a href="#Kafka基本架构" class="headerlink" title="Kafka基本架构"></a>Kafka基本架构</h3><p>Kafka是一个分布式消息队列，它将数据分区保存，并将每个分区保存成多份以提高数据可靠性。</p><ul><li>Kafka架构由<strong>Producer、Broker和Consumer</strong>三类组件构成，其中Producer将数据写入Broker，Consumer则从Broker上读取数据进行处理；Broker构成了连接Producer和Consumer的”缓冲区”，Broker和Consumer通过ZooKeeper做协调和服务发现。</li><li>Kafka架构采用<strong>Push-Pull架构（生产者将消息推送到队列中，但消费者不会立即接收消息。相反，消费者在自己的节奏下拉（pull）消息）</strong>，即Producer将数据直接”push”给Broker，而Consumer从Broker端”pull”数据，这种架构优势主要体现在以下两点:<ul><li>Consumer可根据自己的实际负载和需求获取数据，避免采用”push”方式给Consumer带来较大压力。</li><li>Consumer自己维护已读取消息的offset而不是由Broker端维护，大大缓解了Broker的压力。</li></ul></li></ul><h3 id="Kafka各组件详解"><a href="#Kafka各组件详解" class="headerlink" title="Kafka各组件详解"></a>Kafka各组件详解</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29550710/1698379811033-620d3f96-713f-4bd3-8820-d3691fff23b4.png#averageHue=%23f6f3f1&amp;clientId=ub9045351-1b5f-4&amp;from=paste&amp;height=298&amp;id=udb05c2e3&amp;originHeight=373&amp;originWidth=887&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=134602&amp;status=done&amp;style=none&amp;taskId=uc6031cbe-fe23-4836-945d-17042db6629&amp;title=&amp;width=709.6" alt="image.png"></p><ul><li>Kafka Producer发送信息时，不需要指定所有Broker的地址，只需给定一个或几个初始化Broker的地址即可，Producer可通过指定的Broker获取其他所有Broker的位置信息，并自动实现负载均衡。</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29550710/1700188977865-477435f5-bb1c-490b-9187-22abb594e0b4.png#averageHue=%23f4f2ef&amp;clientId=u439df397-55e9-4&amp;from=paste&amp;height=339&amp;id=u9abff1e4&amp;originHeight=424&amp;originWidth=802&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=193175&amp;status=done&amp;style=none&amp;taskId=u1e0b21fe-c42c-40d4-9fbf-ba0e8f42ec1&amp;title=&amp;width=641.6" alt="image.png"></p><h1 id="大数据存储"><a href="#大数据存储" class="headerlink" title="大数据存储"></a>大数据存储</h1><h2 id="数据序列化"><a href="#数据序列化" class="headerlink" title="数据序列化"></a>数据序列化</h2><h2 id="数据序列化方案"><a href="#数据序列化方案" class="headerlink" title="数据序列化方案"></a>数据序列化方案</h2><h2 id="文件存储格式"><a href="#文件存储格式" class="headerlink" title="文件存储格式"></a>文件存储格式</h2><h2 id="行式存储格式"><a href="#行式存储格式" class="headerlink" title="行式存储格式"></a>行式存储格式</h2><h2 id="列式存储格式"><a href="#列式存储格式" class="headerlink" title="列式存储格式"></a>列式存储格式</h2><h1 id="分布式存储"><a href="#分布式存储" class="headerlink" title="分布式存储"></a>分布式存储</h1><p>文件存储的方式：</p><ul><li>文件系统<ul><li>NTFS(New Technology File System)：Windows常用的高级文件系统</li><li>Ext4(Extended File System4)：Android常用的文件系统</li><li>HFS(Hierarchical File System)、HFS+、APFS(Apple File System)：IOS</li></ul></li><li>数据库</li></ul><p>数据存储扩容问题的两种解决方案：</p><ul><li><strong>纵向扩展(scale-up)</strong></li><li><strong>横向扩展(scale-out)</strong></li></ul><p>横向扩展存在的难点：</p><ul><li><strong>因故障丢失数据</strong></li><li><strong>文件通常较大</strong></li><li><strong>一次写入多次读取</strong></li></ul><h2 id="分布式文件系统"><a href="#分布式文件系统" class="headerlink" title="分布式文件系统"></a>分布式文件系统</h2><h2 id="文件级别和块级别的分布式文件系统"><a href="#文件级别和块级别的分布式文件系统" class="headerlink" title="文件级别和块级别的分布式文件系统"></a>文件级别和块级别的分布式文件系统</h2><h2 id="HDFS关键技术"><a href="#HDFS关键技术" class="headerlink" title="HDFS关键技术"></a>HDFS关键技术</h2><p>主从软件架构，主服务被称为NameNode，管理文件系统的元信息和从节点，从服务被称为DataNode，存储实际的数据块；DataNode与NameNode维护了周期性的心跳，为防止</p><h3 id="容错性设计（考）"><a href="#容错性设计（考）" class="headerlink" title="容错性设计（考）"></a>容错性设计（考）</h3><p>NameNode故障：为每个Active NameNode分配一个Standby NameNode<br>DataNode故障：冗余备份、心跳机制<br>数据块损坏：保存DataNode时生成校验码，读取数据时比较校验码</p><h3 id="副本放置策略"><a href="#副本放置策略" class="headerlink" title="副本放置策略"></a>副本放置策略</h3><p>HDFS默认采用三副本放置策略</p><h3 id="集中式缓存管理"><a href="#集中式缓存管理" class="headerlink" title="集中式缓存管理"></a>集中式缓存管理</h3><p>允许用户将一部分目录会文件缓存在off-heap内存中，以加速对这些数据的访问效率，该机制被称为集中式缓存管理。<br>优势：</p><ul><li>提高集群的内存利用率</li><li>防止被频繁使用的数据从内存中清除</li><li>提高数据读取的效率</li></ul><h2 id="HDFS访问方式"><a href="#HDFS访问方式" class="headerlink" title="HDFS访问方式"></a>HDFS访问方式</h2><h2 id="NoSQL数据库"><a href="#NoSQL数据库" class="headerlink" title="NoSQL数据库"></a>NoSQL数据库</h2><p>关系型数据库（如MySQL、Oracle）通过了严格的ACID测试。</p><ul><li>原子性（Atomicity）：单个事务为一个不可分割的最小工作单元</li><li>一致性（Consistency）</li><li>隔离性（Isolation）：一个事务所做的修改在最终提交以前，对其他事务是不可见的</li><li>持久性（Durability）：一旦事务提交，所作的修改就会永久保存到数据库中。</li></ul><h2 id="NoSQL与关系数据库的对比"><a href="#NoSQL与关系数据库的对比" class="headerlink" title="NoSQL与关系数据库的对比"></a>NoSQL与关系数据库的对比</h2><table><thead><tr><th>比较标准</th><th>关系型数据库</th><th>NoSQL</th></tr></thead><tbody><tr><td>查询方式</td><td>SQL</td><td>UnQL</td></tr><tr><td>数据完整性</td><td>容易实现</td><td>很难实现</td></tr><tr><td>一致性</td><td>强一致性</td><td>弱一致性</td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h2 id="NoSQL的三大基石"><a href="#NoSQL的三大基石" class="headerlink" title="NoSQL的三大基石"></a>NoSQL的三大基石</h2><h3 id="CAP"><a href="#CAP" class="headerlink" title="CAP"></a>CAP</h3><p>C（Consistency）：一致性，任何一个读操作总是能读到之前完成的写操作的结果。<br>A（Availability）：可用性，是指快速获取数据，可以再确定的时间内返回操作结果，保证每个请求不管成功或者失败都有相应。<br>P（Partition Tolerance）：分区容错性，</p><h3 id="BASE模型"><a href="#BASE模型" class="headerlink" title="BASE模型"></a>BASE模型</h3><p>BASE模型反ACID模型，基本含义是本基本可用（Basically Availability）、软状态和最终一致性。</p><h3 id="最终一致性"><a href="#最终一致性" class="headerlink" title="最终一致性"></a>最终一致性</h3><ul><li>N——数据复制的份数</li><li>W——更新数据时需要保证写完成的节点数</li><li>R——读取数据时</li></ul><h2 id="NoSQL数据库类型"><a href="#NoSQL数据库类型" class="headerlink" title="NoSQL数据库类型"></a>NoSQL数据库类型</h2><ul><li>Key-Value型（Redis、Riak、SimpleDB、Chordless、Scalaris、Memcached）<ul><li>key-value store</li></ul></li><li>Key-Column型</li><li>Key-Document模型</li><li>图模型</li></ul><h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><ul><li>STRING</li><li>LIST</li><li>SET</li><li>HASH</li><li>ZSET</li></ul><p>两种不同的持久化方法：</p><ul><li>快照</li><li>只追加文件</li></ul><h2 id="分布式结构化存储系统"><a href="#分布式结构化存储系统" class="headerlink" title="分布式结构化存储系统"></a>分布式结构化存储系统</h2><h2 id="HBase"><a href="#HBase" class="headerlink" title="HBase"></a>HBase</h2><h3 id="HBase数据模型"><a href="#HBase数据模型" class="headerlink" title="HBase数据模型"></a>HBase数据模型</h3><h3 id="HBase基本架构"><a href="#HBase基本架构" class="headerlink" title="HBase基本架构"></a>HBase基本架构</h3><h3 id="HBase内部原理"><a href="#HBase内部原理" class="headerlink" title="HBase内部原理"></a>HBase内部原理</h3><h3 id="HBase实例"><a href="#HBase实例" class="headerlink" title="HBase实例"></a>HBase实例</h3><h3 id="HBase访问方式"><a href="#HBase访问方式" class="headerlink" title="HBase访问方式"></a>HBase访问方式</h3><h2 id="时间序列数据库OpenTSDB"><a href="#时间序列数据库OpenTSDB" class="headerlink" title="时间序列数据库OpenTSDB"></a>时间序列数据库OpenTSDB</h2><p>不需要具体了解</p><h2 id="分布式列式存储系统Kudu"><a href="#分布式列式存储系统Kudu" class="headerlink" title="分布式列式存储系统Kudu"></a>分布式列式存储系统Kudu</h2><ul><li>HDFS使用列式存储格式，适合离线分析，不支持单条记录级别的update操作，随机读写性能差。</li><li>HBase可以进行高效随机读写，却并不适用于基于SQL的数据分析方向，大批量数据获取时的性能较差。</li><li>Kudu介于HDFS和HBase之间，比HBase批处理快，比HDFS随机读写性能强。</li></ul><p>Kudu是一个强类型的<strong>纯列式存储数据库</strong>。</p><ul><li>Kudu Master</li><li>Table Server<ul><li>通常有3个副本存放在不同的Table Server上</li><li>同一个副本分为leader和follower</li></ul></li></ul><p>完全的列式存储引擎，表中的每一列数据都是存放在一起，列与列之间都是分开的。</p><h2 id="云数据库"><a href="#云数据库" class="headerlink" title="云数据库"></a>云数据库</h2><p>为什么zookeeper通常由奇数个实例构成<br>2n+1个节点和2n+2个节点的容错数均为n个节点</p><p>observer不参与投票过程</p>]]></content>
      
      
      <categories>
          
          <category> 课程笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
